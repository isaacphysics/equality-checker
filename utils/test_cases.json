{
    "2*A*cos(2*pi*f*t - (2*pi*x)/(lambda)) * cos(phi)": {
        "type": "maths",
        "requireExact": true,
        "shouldMatch": [
            "2*A*cos(2*f*pi*t - ((2*pi)/(lambda)) * x) * cos(phi)",
            "2*A*cos(2*f*pi*t - (2*pi*x)/(lambda)) * cos(phi)",
            "2*A*cos(2*f*t*pi - ((2*pi)/(lambda)) * x) * cos(phi)",
            "2*A*((cos(2*pi*f*t - ((2*pi)/(lambda)) * x)) * cos(phi))",
            "2*A*(cos(2*pi*f*t - ((2*pi)/(lambda)) * x) * cos(phi))",
            "2*A*(cos(2*pi*f*t - ((2*pi)/(lambda)) * x)) * (cos(phi))",
            "2*A*(cos(2*pi*f*t - (2*pi)/(lambda) * x) * cos(phi))",
            "2*A*cos((2*pi*f*t) - ((2*pi)/(lambda)) * x) * cos(phi)",
            "2*A*cos(2*pi*f*t - ((2*pi)/(lambda) * x)) * cos(phi)",
            "2*A*cos(2*pi*f*t - ((2*pi)/(lambda)) * x) * (cos(phi))",
            "2*A*cos(2*pi*f*t - ((2*pi)/(lambda)) * x) * cos(phi)",
            "2*A*cos(2*pi*f*t - (2*pi)/(lambda) * (x)) * cos(phi)",
            "2*A*cos(2*pi*f*t - (2*pi)/(lambda) * x) * cos(phi)",
            "(2*A*cos(2*(pi) * f*t - ((2*pi)/(lambda)) * x)) * (cos(phi))",
            "2*A*(cos(2*pi*(f) * t - (2*(pi)/(lambda)) * x)) * (cos(phi))",
            "2*A*(cos(2*pi*f*t - (2*(pi)/(lambda)) * x) * cos(phi))",
            "2*A*(cos(2*pi*f*t - (2*(pi)/(lambda)) * x)) * (cos(phi))",
            "2*A*cos(2*(pi) * f*t - ((2*pi)/(lambda)) * x) * cos(phi)",
            "2*A*cos(2*pi*(f*t) - (2*(pi)/(lambda)) * x) * cos(phi)",
            "2*A*cos(2*pi*f*t - ((2*(pi)/(lambda)) * x)) * cos(phi)",
            "2*A*cos(2*pi*f*t - (2*(pi)/(lambda) * x)) * cos(phi)",
            "2*A*cos(2*pi*f*t - (2*(pi)/(lambda)) * x) * cos(phi)",
            "2*A*cos(2*pi*f*t - 2*(pi)/(lambda) * x) * cos(phi)",
            "2*A*(cos(2*(pi) * f*t - (2*(pi)/(lambda)) * x) * cos(phi))",
            "2*A*(cos(2*(pi) * f*t - (2*(pi)/(lambda)) * x)) * (cos(phi))",
            "2*A*(cos(2*pi*f*t - (2*pi*x)/(lambda)) * (cos(phi)))",
            "2*A*(cos(2*pi*f*t - (2*pi*x)/(lambda)) * cos(phi))",
            "2*A*(cos(2*pi*f*t - (2*pi*x)/(lambda))) * cos(phi)",
            "2*A*cos((2*pi*f*t - ((2*pi*x)/(lambda)))) * cos(phi)",
            "2*A*cos((2*pi*f*t - (2*pi*x)/(lambda))) * cos(phi)",
            "2*A*cos((2*pi*f*t) - (2*pi*x)/(lambda)) * cos(phi)",
            "2*A*cos(2*pi*f*t - ((2*pi*x)/(lambda))) * cos(phi)",
            "2*A*cos(2*pi*f*t - (2*pi*(x))/(lambda)) * cos(phi)",
            "2*A*cos(2*pi*f*t - (2*pi*x)/(lambda)) * cos(phi)",
            "2*A*cos(2*pi*f*t - 2*pi*(x)/(lambda)) * (cos(phi))",
            "2*A*cos(2*pi*f*t - 2*pi*(x)/(lambda)) * cos(phi)",
            "(2*A) * cos(2*(pi) * f*t - (2*(pi) * x)/(lambda)) * cos(phi)",
            "2*A*cos(2*(pi) * (f*t) - ((2*(pi) * x)/(lambda))) * (cos(phi))",
            "2*A*cos(2*(pi) * f*t - (2*(pi) * x)/(lambda)) * cos(phi)",
            "2*A*cos(2*(pi) * f*t - 2*(pi) * (x)/(lambda)) * cos(phi)",
            "2*A*cos(2*pi*f*t - (2*x*pi)/(lambda)) * cos(phi)",
            "2*A*cos((2*(pi) * f*t) - (2*x*(pi))/(lambda)) * cos(phi)",
            "2*A*cos( - (2*pi)/(lambda) * x + 2*pi*f*t) * cos(phi)",
            "2*A*cos(phi) * cos(2*pi*f*t - ((2*pi)/(lambda)) * x)",
            "2*A*cos(phi) * cos(2*pi*f*t - (2*pi)/(lambda) * x)",
            "2*A*cos(phi) * (cos(2*pi*f*t - 2*(pi)/(lambda) * x))",
            "2*A*cos(phi) * cos(2*pi*f*t - (2*(pi)/(lambda)) * x)",
            "2*A*cos(phi) * cos(2*pi*f*t - 2*(pi)/(lambda) * x)",
            "(2*A*cos(phi)) * (cos(2*pi*f*t - (2*pi*(x)/(lambda))))",
            "2*A*cos(phi) * cos((2*pi*f*t) - ((2*pi*x)/(lambda)))",
            "2*A*cos(phi) * cos(2*pi*f*t - (2*pi*x)/(lambda))",
            "2*A*cos(phi) * cos(2*pi*f*t - 2*pi*(x)/(lambda))",
            "2*A*cos(phi) * cos(2*(pi) * f*t - ((2*(pi) * x)/(lambda)))",
            "2*A*cos(phi) * cos(2*pi*f*t - x*(2*(pi)/(lambda)))",
            "A*(2*cos((2*pi*f*t) - ((2*pi)/(lambda)) * x)) * (cos(phi))",
            "A*(2*cos(2*pi*f*t - ((2*pi)/(lambda)) * x) * cos(phi))",
            "A*(2*cos(2*pi*f*t - (2*pi)/(lambda) * x) * cos(phi))",
            "A*2*cos(2*pi*f*t - ((2*pi)/(lambda)) * x) * cos(phi)",
            "A*(2*cos(2*pi*f*t - (2*(pi)/(lambda)) * x) * cos(phi))",
            "A*(2*cos(2*pi*f*t - 2*pi*(x)/(lambda)) * cos(phi))",
            "A*2*cos(2*pi*f*t - (2*pi*(x)/(lambda))) * cos(phi)",
            "A*2*cos(2*pi*f*t - 2*pi*(x)/(lambda)) * cos(phi)",
            "A*2*cos(phi) * (cos(2*pi*f*t - ((2*pi*x)/(lambda))))",
            "(A*cos(2*pi*f*t - (2*(pi)/(lambda)) * x)) * (2*cos(phi))"
        ]
    },
    "((2*d*tan(theta)*sin(theta))/(n))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(2*d*(1 - cos(theta)**(2)) * sec(theta))/(n)",
            "((((2*d))/((n))) * (((sin(theta)**(2)))/((cos(theta)))))",
            "((2*d)/(n)) * ((sin(theta)**(2))/(cos(theta)))",
            "(2*d)/(n) * ((sin(theta)**(2))/(cos(theta)))",
            "(2*d)/(n) * (sin(theta)**(2))/(cos(theta))",
            "(2*(d)/(n)) * (((sin(theta))**(2))/(cos(theta)))",
            "2*(d)/(n) * ((sin(theta)**(2))/(cos(theta)))",
            "2*(d)/(n) * (sin(theta)**(2))/(cos(theta))",
            "(2*d)/(n) * ((sin(theta) * sin(theta))/(cos(theta)))",
            "(2*d)/(n) * (sin(theta) * tan(theta))",
            "(2*d)/(n) * sin(theta) * tan(theta)",
            "(2*(d)/(n)) * sin(theta) * tan(theta)",
            "2*(d)/(n) * (sin(theta) * tan(theta))",
            "2*(d)/(n) * sin(theta) * tan(theta)",
            "(2*d)/(n) * tan(theta) * sin(theta)",
            "(2*(d)/(n)) * tan(theta) * sin(theta)",
            "2*(d)/(n) * tan(theta) * sin(theta)",
            "(2*d*sin(theta)**(2))/(cos(theta) * n)",
            "(2*d*sin(theta)**(2))/(n*cos(theta))",
            "2*d*(sin(theta)**(2))/(n*cos(theta))",
            "(2*d*sin(theta)**(2) * sec(theta))/(n)",
            "2*d*(sin(theta))/(n) * sqrt((1)/(cos(theta)**(2)) - 1)",
            "2*d*(sin(theta))/(n) * tan(theta)",
            "(2*d*sin(theta) * sin(theta))/(n*cos(theta))",
            "(2*d*sin(theta) * tan(theta))/(n)",
            "2*d*(sin(theta)) * (tan(theta))/(n)",
            "2*d*sin(theta) * (tan(theta))/(n)",
            "2*(d*sin(theta) * tan(theta))/(n)",
            "2*d*tan(theta) * ((1)/(n)) * sin(theta)",
            "2*d*tan(theta) * (1)/(n) * sin(theta)",
            "((2*d) * tan(theta) * sin(theta))/(n)",
            "((2*d*tan(theta)) * (sin(theta)))/(n)",
            "(2*d*(tan(theta) * sin(theta))/(n))",
            "(2*d*tan(theta) * sin(theta))/(n)",
            "(2*d*tan(theta)) * (sin(theta))/(n)",
            "2*d*tan(theta) * ((sin(theta))/(n))",
            "2*d*tan(theta) * (sin(theta))/(n)",
            "2*(d*tan(theta)) * (sin(theta))/(n)",
            "(2*sin(theta)**(2) * d)/(n*cos(theta))",
            "(2*sin(theta))/(n) * sqrt((d**(2))/(cos(theta)**(2)) - d**(2))",
            "(2*sin(theta) * tan(theta) * d)/(n)",
            "(2*tan(theta) * d*sin(theta))/(n)",
            "2*tan(theta) * d*(sin(theta))/(n)",
            "(2*tan(theta) * sin(theta) * d)/(n)",
            "(sin(theta) * 2*d*tan(theta))/(n)",
            "sin(theta) * 2*d*(tan(theta))/(n)",
            "sin(theta) * 2*tan(theta) * (d)/(n)",
            "(sin(theta))/(n) * 2*d*tan(theta)",
            "sin(theta) * tan(theta) * (2*(d)/(n))",
            "sin(theta) * tan(theta) * 2*(d)/(n)"
        ]
    },
    "(2/27)*a**(-1/2)*b**(-3/2)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(2)/(27) * ((1)/(a) * (1)/(b**(3)))**((1)/(2))",
            "(2)/(27) * ((1)/(a*b**(3)))**((1)/(2))",
            "(2)/(27) * ((1)/(sqrt(a*b**(3))))",
            "(2)/((27*a**((1)/(2))) * b**((3)/(2)))",
            "(2)/(27*a**((1)/(2))*b**((3)/(2)))",
            "((2)/(27) * a**( - (1)/(2))*b**( - (3)/(2)))",
            "((2)/(27)) * (a**( - (1)/(2))) * (b**( - ((3)/(2))))",
            "((2)/(27)) * (a**( - (1)/(2))) * (b**( - (3)/(2)))",
            "((2)/(27)) * (a**( - (1)/(2))*b**( - (3)/(2)))",
            "((2)/(27)) * a**( - ((1)/(2)))*b**( - ((3)/(2)))",
            "((2)/(27)) * a**( - (1)/(2))*b**( - (3)/(2))",
            "(2)/(27) * (a**( - ((1)/(2)))*b**( - ((3)/(2))))",
            "(2)/(27) * (a**( - (1)/(2))) * (b**( - (3)/(2)))",
            "(2)/(27) * (a**( - (1)/(2))*b**( - (3)/(2)))",
            "(2)/(27) * (a**(( - 1)/(2))) * (b**(( - 3)/(2)))",
            "(2)/(27) * a**( - ((1)/(2)))*b**( - ((3)/(2)))",
            "(2)/(27) * a**( - ((1)/(2)))*b**( - (3)/(2))",
            "(2)/(27) * a**( - ((1)/(2)))*b**(( - 3)/(2))",
            "(2)/(27) * a**( - (1)/(2))*b**( - ((3)/(2)))",
            "(2)/(27) * a**( - (1)/(2))*b**( - (3)/(2))",
            "(2)/(27) * a**( - (1)/(2))*b**(( - 3)/(2))",
            "(2)/(27) * a**(( - (1)/(2)))*b**(( - (3)/(2)))",
            "(2)/(27) * a**(( - 1)/(2))*b**( - (3)/(2))",
            "(2)/(27) * a**(( - 1)/(2))*b**(( - 3)/(2))",
            "(2)/(27) * a**((-1)/(2))*b**(( - 3)/(2))",
            "(2)/(27) * a**((-1)/(2))*b**((-3)/(2))",
            "(2)/(27) * a**((-1)/(2))*b**((3)/( - 2))",
            "(2)/(27*(a**((1)/(2))) * (b**((3)/(2))))",
            "(2)/(27*(a*b**(3))**((1)/(2)))",
            "(2)/(27*b**((3)/(2))*a**((1)/(2)))",
            "(2)/(27) * b**( - (3)/(2))*a**( - (1)/(2))",
            "(2)/((27*b**((3)/(2))) * sqrt(a))",
            "(2)/(27*b**((3)/(2))*sqrt(a))",
            "(2)/((27*b) * sqrt(a*b))",
            "(2)/(27*b*(sqrt(a*b)))",
            "(2)/(27*b*sqrt(a*b))",
            "(2)/(27) * sqrt(a)**( - 1) * sqrt(b)**( - 3)",
            "((2)/(27)) * ((sqrt(a))/(a)) * ((sqrt(b))/(b**(2)))",
            "(2)/(27*sqrt(a*b**(3)))",
            "(2)/(27*sqrt(a) * b**((3)/(2)))",
            "(2)/(27*(sqrt(a)) * b**((3)/(2)))",
            "(2)/(27*sqrt(a) * b*sqrt(b))",
            "(2)/(27*sqrt(a) * (sqrt(b))**(3))",
            "(2)/(27*sqrt(a) * sqrt(b)**(3))",
            "(2)/(27*sqrt(a) * sqrt(b**(3)))",
            "(2)/(27*sqrt(b)**(3) * sqrt(a))",
            "(2)/(9**((3)/(2))) * a**( - (1)/(2))*b**( - (3)/(2))",
            "2*((9**(3)) * a*(b**(3)))**( - (1)/(2))",
            "(2*a**( - ((1)/(2)))*b**( - ((3)/(2))))/(27)",
            "(2*a**( - ((1)/(2)))*b**(( - 3)/(2)))/(27)",
            "(2*a**( - (1)/(2))*(b**( - (3)/(2)))/(27))",
            "(2*a**( - (1)/(2))*b**( - (3)/(2)))/(27)",
            "(2*a**( - (1)/(2))*b**(( - 3)/(2)))/(27)",
            "(2*a**(( - 1)/(2))*b**(( - 3)/(2)))/(27)",
            "(2*a**((-1)/(2))*b**((-3)/(2)))/(27)",
            "2*a**( - (1)/(2))*(b**( - (3)/(2)))/(27)",
            "(2)/(a**((1)/(2))*b**((3)/(2))*27)",
            "2*(a**( - (1)/(2))*b**( - (3)/(2)))/(27)",
            "(2*(a*b**(3))**( - (1)/(2)))/(27)",
            "2*a*b**((3)/(2))*(1)/(27) * (1)/(sqrt(a**(3))) * (1)/(b**(3))",
            "(2*a*b**((3)/(2))) * ((1)/(27) * a**( - (3)/(2))*b**( - 3))",
            "2*a*b**((3)/(2))*(1)/(27) * a**( - ((3)/(2)))*b**( - 3)",
            "2*a*b**((3)/(2))*(1)/(27) * a**( - (3)/(2))*b**( - 3)",
            "(2*a*b**((3)/(2)))/((27*a**((3)/(2))) * b**(3))",
            "(2*a*b**((3)/(2)))/(27*a**((3)/(2))*b**(3))",
            "(2*a*b**((3)/(2)))/(27*b**(3)*a**((3)/(2)))",
            "(2*a*b*sqrt(b))/(27*b**(3)*a**((3)/(2)))",
            "(2*a*b*sqrt(b))/(27*b**(3)*a*sqrt(a))",
            "(2*a*sqrt(b)**(3))/(27*sqrt(a)**(3) * b**(3))",
            "(2*b**((1)/(2)))/(27*a**((1)/(2))*b**(2))",
            "(2*b**((3)/(2)))/(27*a**((1)/(2))*b**(3))",
            "(2*sqrt(a**(2)*b**(3)))/(27*a**((3)/(2))*b**(3))",
            "(2*sqrt(a**(2)*b**(3)))/(27*(a*b**(2))**((3)/(2)))",
            "(2*sqrt(a**(2)*b**(3)))/(27*a*b**(2)*sqrt(a*b**(2)))",
            "(2*sqrt(a*b))/(27*a*b**(2))",
            "(2*sqrt(b))/(27*sqrt(a) * b**(2))",
            "a**(( - 1)/(2))*b**(( - 3)/(2))*(2)/(27)",
            "sqrt(4*a**(2)*b**(3)) * (1)/(sqrt((9*a*b**(2))**(3)))",
            "(sqrt(4*a**(2)*b**(3)))/(sqrt(729*a**(3)*b**(6)))"
        ]
    },
    "R<=sqrt(3/(8*pi*G*rho))*v_0": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "abs(R) <= sqrt((3*v_0**(2))/(8*G*pi*rho))",
            "abs(R) <= sqrt((3*v_0**(2))/(8*G*rho*pi))",
            "abs(R) <= sqrt((3*(v_0)**(2))/(8*G*rho*pi))",
            "abs(R) <= sqrt((3*(v_0**(2)))/(8*G*rho*pi))",
            "R <= ((3)/(8) * ((v_0**(2))/((G) * (pi) * (rho))))**((1)/(2))",
            "R <= ((3*v_0**(2))/(8*G*pi*rho))**((1)/(2))",
            "R <= ((3*(v_0)**(2))/(8*G*pi*rho))**((1)/(2))",
            "R <= (3*((v_0)**(2))/(8*G*pi*rho))**((1)/(2))",
            "R <= (3*(v_0**(2))/(8*G*pi*rho))**((1)/(2))",
            "R <= ((3*v_0**(2))/(8*G*rho*pi))**((1)/(2))",
            "R <= ((3*v_0**(2))/(8*pi*G*rho))**((1)/(2))",
            "R <= ((3*(v_0)**(2))/(8*pi*G*rho))**((1)/(2))",
            "R <= sqrt(((3)/(4) * v_0**(2))/(2*G*pi*rho))",
            "R <= sqrt(((3)/(8)) * v_0**(2)*(1)/(G*pi*rho))",
            "R <= sqrt(((3)/(8) * v_0**(2))/(G*pi*rho))",
            "R <= sqrt(((3)/(8) * v_0**(2))/(G*rho*pi))",
            "R <= sqrt((3)/(8) * (v_0**(2))/(G*rho*pi))",
            "R <= sqrt(((3)/(8)) * (v_0**(2))/(pi*rho*G))",
            "R <= sqrt((3)/(8) * (v_0**(2))/(rho*pi*G))",
            "R <=  + sqrt((3*v_0**(2))/(8*G*pi*rho))",
            "R <= (sqrt((3*v_0**(2))/(8*G*pi*rho)))",
            "R <= sqrt((3*v_0**(2))/(8*G*(pi) * (rho)))",
            "R <= sqrt((3*v_0**(2))/(8*G*pi*rho))",
            "R <= sqrt((3*((v_0)**(2)))/(8*G*pi*rho))",
            "R <= sqrt((3*(v_0)**(2))/(8*G*(pi) * (rho)))",
            "R <= sqrt((3*(v_0)**(2))/(8*G*pi*rho))",
            "R <= sqrt(3*(v_0**(2))/(8*G*pi*rho))",
            "R <= sqrt((3*v_0**(2))/(8*G*rho*pi))",
            "R <= sqrt((3*(v_0)**(2))/(8*G*rho*pi))",
            "R <= sqrt((3*v_0**(2))/(8*pi*G*rho))",
            "R <= sqrt((3*(v_0)**(2))/(8*pi*G*rho))",
            "R <= sqrt(3*(v_0**(2))/(8*pi*G*rho))",
            "R <= sqrt(((3*v_0**(2))/(8*pi*rho*G)))",
            "R <= sqrt((3*v_0**(2))/(8*pi*rho*G))",
            "R <= sqrt((3*(v_0)**(2))/(8*pi*rho*G))",
            "R <= sqrt(3*(v_0**(2))/(8*pi*rho*G))",
            "R <= sqrt((3*v_0**(2))/(8*rho*pi*G))",
            "R <= sqrt((3*(v_0**(2))/(8*rho*pi*G)))",
            "R <= (sqrt(3) * v_0)/(sqrt(8*G*pi*rho))",
            "R <= sqrt((v_0**(2))/(2*(4)/(3) * G*pi*rho))",
            "R <= sqrt(((v_0)**(2))/(2*G*(4)/(3) * pi*rho))",
            "R <= sqrt(((v_0)**(2))/((8)/(3) * G*pi*rho))",
            "R <= sqrt((v_0**(2))/((8)/(3) * G*pi*rho))",
            "R <= sqrt((v_0**(2))/((8)/(3) * pi*rho*G))",
            "R <= sqrt((v_0**(2))/((8*G*pi*rho)/(3)))",
            "R <= (v_0)/(2) * ((3)/(2*G*rho*pi))**((1)/(2))",
            "R <= (((v_0)**(2))/(((8)/(3)) * G*pi*rho))**((1)/(2))",
            "R <= (v_0)/(2) * sqrt((3)/(2*pi*G*rho))",
            "R <= (v_0)/(sqrt((2*G*((4)/(3) * pi) * rho)))",
            "R <= (v_0)/(sqrt(2*G*((4)/(3)) * pi*(rho)))",
            "R <= v_0*sqrt((3)/(8*G*pi*rho))",
            "R <= v_0*sqrt((3)/(8*G*rho*pi))",
            "R <= v_0*sqrt((3)/(8*pi*G*rho))",
            "R <= v_0*sqrt((3)/(8*(pi) * G*(rho)))",
            "R <= (v_0) * sqrt((3)/(8*pi*rho*G))",
            "R <= v_0*sqrt((3)/(8*rho*pi*G))",
            "R <= (v_0*sqrt(3))/(sqrt(8*G*pi*rho))",
            "R <= (v_0*sqrt(3))/(sqrt(8*G*rho*pi))",
            "R <= (v_0*sqrt((6)/(G*pi*rho)))/(4)",
            "R <= (v_0)/(sqrt((8)/(3) * G*pi*rho))",
            "R <= (v_0)/(sqrt((8)/(3) * pi*G*rho))",
            "R <= (v_0)/(sqrt((8)/(3) * pi*rho*G))",
            "R <= (v_0)/(sqrt(8*G*pi*(rho)/(3)))",
            "sqrt(((1)/(2) * v_0**(2))/((4)/(3) * pi*G*rho)) >= R",
            "sqrt(((1)/(2) * v_0**(2))/(G*(4)/(3) * pi*rho)) >= R",
            "sqrt(((3)/(8) * v_0**(2))/(pi*G*rho)) >= R",
            "sqrt((3*v_0**(2))/(8*G*pi*rho)) >= abs(R)",
            "sqrt((3*(v_0)**(2))/(8*G*pi*rho)) >= abs(R)",
            "sqrt((3*v_0**(2))/(8*G*pi*rho)) >= R",
            "sqrt((3*(v_0)**(2))/(8*G*pi*rho)) >= R",
            "sqrt((3*v_0**(2))/(8*G*rho*pi)) >= abs(R)",
            "sqrt((3*v_0**(2))/(8*G*rho*pi)) >= R",
            "sqrt((3*v_0**(2))/(8*pi*G*rho)) >= R",
            "sqrt((3*v_0**(2))/(8*rho*G*pi)) >= R",
            "sqrt((v_0**(2)*3)/(8*G*pi*rho)) >= R",
            "sqrt((v_0**(2))/((8)/(3) * G*pi*rho)) >= R",
            "v_0*sqrt((3)/(8*G*pi*rho)) >= R",
            "v_0*sqrt(((3)/(8*G*rho*pi))) >= R",
            "(v_0)/(sqrt(8*pi*G*(rho)/(3))) >= R"
        ]
    },
    "((2*V)/(E*d))*(h - ((E*d**(2))/(4*V)))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(2*h*V - (1)/(2) * d**(2)*E)/(dE)",
            "(2*h*V)/(d*E) - (d)/(2)",
            "(2*h*V)/(E*d) - (1)/(2) * d",
            "(2*h*V)/(E*d) - (d)/(2)",
            "2*h*(V)/(E*d) - (d)/(2)",
            "2*(h*V)/(E*d) - (d)/(2)",
            "(2*V)/(d*E) * (h - (E*d**(2))/(4*V))",
            "2*(V)/(E*d) * h - (1)/(2) * d",
            "2*((V)/(E))/(d) * (h - (1)/(4) * d**(2)*(E)/(V))",
            "2*(V)/(E*d) * (h - (1)/(4) * (E*d**(2))/(V))",
            "(2*V)/(E*d) * (h - (d**(2)*E)/(4*V))",
            "(2*V)/(E*d) * (h - d**(2)*(E)/(4*V))",
            "(2*(V)/(E*d)) * (h - (d**(2)*E)/(4*V))",
            "2*(V)/(E*d) * (h - d**(2)*(E)/(4*V))",
            "((2*V)/(E*d)) * (h - ((E*d**(2))/(4*V)))",
            "((2*V)/(E*d)) * (h - (E*d**(2))/(4*V))",
            "(2*V)/(E*d) * (h - (E*d**(2))/(4*V))",
            "(2*(V)/(E*d)) * (h - (E*d**(2))/(4*V))",
            "2*V*(h)/(dE) - (d)/(2)",
            "(2*V*h)/(E*d) - (1)/(2) * d",
            "(2*V*(h)/(E*d)) - (d)/(2)",
            "(2*V*h)/(E*d) - (d)/(2)",
            "2*V*(h)/(E*d) - (d)/(2)",
            "(4*h*V - E*d**(2))/(2*E*d)",
            "((4*V*h - E*d**(2)))/(2*E*d)",
            "(4*V*h - E*d**(2))/(2*E*d)",
            "(h - E*(d**(2))/(4*V)) * 2*(V)/(E*d)"
        ]
    },
    "L == ((2*V)/(E*d))*(h - ((E*d**(2))/(4*V)))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "L == (2*(h - ((E*d**(2))/(4*V))) * V)/(E*d)",
            "L == (2*h*V)/(d*E) - (d)/(2)",
            "L == (2*h*V - (E*d**(2))/(2))/(E*d)",
            "L == ((2*h*V)/(E*d)) - ((d)/(2))",
            "L == ((2*h*V)/(E*d)) - (d)/(2)",
            "L == (2*h*V)/(E*d) - (d)/(2)",
            "L == 2*((h*V)/(E*d)) - (d)/(2)",
            "L == 2*(h*V)/(E*d) - (d)/(2)",
            "L == (2*V)/(E*d) * (h - (1)/(4) * (d**(2)*E)/(V))",
            "L == (2*V)/(E*d) * (h - (d**(2)*E)/(4*V))",
            "L == (2*V)/(E*d) * (h - d**(2)*(E)/(4*V))",
            "L == 2*(V)/(E*d) * (h - (d**(2)*(E)/(4*V)))",
            "L == (2*V)/(E*d) * (h - (E*d**(2))/(4*V))",
            "L == (2*(V)/(E*d)) * (h - (E*(d**(2))/(4*V)))",
            "L == (2*(V)/(E*d)) * (h - (E*d**(2))/(4*V))",
            "L == ((2*V*h)/(dE)) - (d)/(2)",
            "L == (2*V*h)/(d*E) - (d)/(2)",
            "L == 2*V*(h)/(dE) - (d)/(2)",
            "L == (2*V*h)/(E*d) - (1)/(2) * d",
            "L == (2*V*h)/(E*d) - (1*d)/(2)",
            "L == (2*V*h - (E*d**(2))/(2))/(E*d)",
            "L == (2*V*(h - (E*d**(2))/(4*V)))/(E*d)",
            "L == (2*V*h)/(E*d) - (d)/(2)",
            "L == 2*V*(h)/(E*d) - (d)/(2)",
            "L == 2*(V*h)/(E*d) - (d)/(2)",
            "L == (4*h*V - d**(2)*E)/(2*dE)",
            "L == (4*h*V - E*d**(2))/(2*d*E)",
            "L == ((4*h*V) - (E*d**(2)))/(2*E*d)",
            "L == (4*h*V - E*d**(2))/(2*E*d)",
            "L == (4*V*h - E*d**(2))/(2*E*d)",
            "L == (h - (d**(2)*E)/(4*V)) * ((2*V)/(d*E))",
            "L == (h - (E*d**(2))/(4*V)) * (2*V)/(E*d)",
            "L == (h - (E*d**(2))/(4*V))/((E*d)/(2*V))"
        ]
    },
    "2*pi*v*sqrt(((x*(m_1+m_2))/(m_1*g)))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "2*pi*(sqrt(((m_1 + m_2) * x)/(m_1*g))) * v",
            "2*pi*sqrt(x*(m_1 + m_2)/(g*m_1)) * v",
            "2*pi*sqrt(x*(m_1 + m_2)/(m_1*g)) * v",
            "(2*pi*v)/(((m_1*g)/(x*(m_1 + m_2)))**((1)/(2)))",
            "(2*pi*v) * ((m_1 + m_2) * (x)/(m_1*g))**((1)/(2))",
            "2*pi*v*(((m_1 + m_2) * x)/(m_1*g))**((1)/(2))",
            "2*pi*v*((m_1 + m_2) * (x)/(m_1*g))**((1)/(2))",
            "(2*pi*v)/(sqrt((g)/((1 + (m_2)/(m_1)) * x)))",
            "(2*pi*v)/(sqrt((m_1*g)/((m_1 + m_2) * x)))",
            "2*pi*(v)/(sqrt(m_1*(g)/((m_1 + m_2) * x)))",
            "(2*pi*v)/(sqrt((m_1*g)/(x*(m_1 + m_2))))",
            "2*pi*(v)/(sqrt(m_1*((g)/(x))/(m_1 + m_2)))",
            "2*pi*(v)/(sqrt(m_1*(g)/(x*(m_1 + m_2))))",
            "2*pi*(v)/(sqrt((m_1*(g)/(x))/(m_2 + m_1)))",
            "2*pi*v*sqrt((m_1 + m_2)/(((m_1*g)/(x))))",
            "2*pi*v*sqrt((m_1 + m_2)/(m_1*(g)/(x)))",
            "2*pi*v*sqrt((m_1 + m_2)/(m_1)) * sqrt((x)/(g))",
            "2*pi*v*sqrt(((m_1 + m_2) * x)/(g*m_1))",
            "2*pi*v*(sqrt((m_1 + m_2) * (x)/(m_1*g)))",
            "2*pi*v*sqrt(((m_1 + m_2) * x)/(m_1*g))",
            "2*pi*v*sqrt((m_1 + m_2) * (x)/(m_1*g))",
            "2*(pi) * v*sqrt(((m_1 + m_2) * x)/(m_1*g))",
            "2*(pi) * (v) * sqrt(((m_1 + m_2) * x)/((m_1) * g))",
            "((2*pi*v) * (sqrt((m_1 + m_2) * x)))/(sqrt(m_1*g))",
            "2*pi*v*(sqrt((m_1 + m_2) * x))/(sqrt((m_1) * g))",
            "2*pi*v*sqrt(((m_2 + m_1) * x)/(m_1*g))",
            "2*pi*v*sqrt((x)/(g) * (1 + (m_2)/(m_1)))",
            "2*pi*v*sqrt(((x*(m_1 + m_2))/(g*m_1)))",
            "2*pi*v*sqrt(x*(m_1 + m_2)/(g*m_1))",
            "(2*pi*v) * sqrt((x*(m_1 + m_2))/(m_1*g))",
            "2*pi*v*(sqrt(x*(m_1 + m_2)/(m_1*g)))",
            "2*pi*v*sqrt(((x) * (m_1 + m_2))/(m_1*g))",
            "2*pi*v*sqrt((x*(m_1 + m_2))/(m_1*g))",
            "2*pi*v*sqrt((x*(m_1 + m_2)/(m_1*g)))",
            "2*pi*v*sqrt(x*(m_1 + m_2)/(m_1*g))",
            "2*(pi) * v*(sqrt((x*(m_1 + m_2))/(m_1*(g))))",
            "2*(pi) * v*sqrt(x*((m_1) + (m_2))/((m_1) * g))",
            "(2*pi*v) * sqrt(x*(m_2 + m_1)/(m_1*g))",
            "2*pi*v*sqrt((x*(m_2 + m_1)/(m_1*g)))",
            "(2*pi*v*sqrt(x) * sqrt(m_1 + m_2))/(sqrt(m_1*g))",
            "2*pi*v*((x*(m_1 + m_2))/(m_1*g))**((1)/(2))",
            "2*pi*v*(x*(m_1 + m_2)/(m_1*g))**((1)/(2))",
            "(2*v*pi)/(sqrt((m_1*g)/(x*(m_1 + m_2))))",
            "(2*v*pi)/(sqrt(m_1*(g)/(x*(m_1 + m_2))))",
            "(2*v*pi) * sqrt(((m_1 + m_2) * x)/(m_1*g))",
            "2*v*pi*(sqrt(((m_1 + m_2) * x)/(m_1*g)))",
            "2*v*pi*sqrt(((m_1 + m_2) * x)/(m_1*g))",
            "2*v*pi*sqrt((x*(m_1 + m_2))/(g*m_1))",
            "2*v*pi*sqrt(x*(m_1 + m_2)/(m_1*g))",
            "(((m_1 + m_2) * x)/(g*m_1))**((1)/(2)) * v*2*pi",
            "sqrt((4*pi**(2)*v**(2)*x*(m_1 + m_2))/(m_1*g))",
            "((sqrt((m_1*g)/(x*(m_1 + m_2))))/(2*pi*v))**( - 1)",
            "v*2*(pi)/((m_1*(g)/(x*(m_1 + m_2)))**((1)/(2)))",
            "v*2*pi*((m_1 + m_2)/((m_1*g)/(x)))**((1)/(2))",
            "v*2*pi*((m_1 + m_2) * (x)/(m_1*g))**((1)/(2))",
            "v*(2*pi)/(sqrt((m_1*g)/((x) * (m_1 + m_2))))",
            "v*(2*pi)/(sqrt((m_1*g)/(x*(m_1 + m_2))))",
            "v*(2*pi)/(sqrt(m_1*(g)/(x*(m_1 + m_2))))",
            "v*2*(pi)/(sqrt(m_1*(g)/(x*(m_1 + m_2))))",
            "v*2*pi*sqrt((m_1 + m_2)/(m_1*(g)/(x)))",
            "v*(2*pi*sqrt(((m_1 + m_2) * x)/(m_1*g)))",
            "v*2*pi*sqrt(((m_1 + m_2) * x)/(m_1*g))",
            "v*2*pi*sqrt((m_1 + m_2) * (x)/(m_1*g))",
            "v*2*pi*sqrt(x*(m_1 + m_2)/((g) * m_1))",
            "(v*2*pi) * sqrt((x*(m_1 + m_2))/(m_1*g))",
            "v*2*pi*sqrt((x*(m_1 + m_2))/(m_1*g))",
            "v*2*pi*sqrt(x*(m_1 + m_2)/(m_1*g))",
            "v*2*pi*sqrt((x*(m_2 + m_1)/(m_1*g)))",
            "v*(m_1*(g)/(x*(m_1 + m_2)))**( - (1)/(2)) * (2*pi)",
            "v*sqrt(4*pi**(2)*(m_1 + m_2) * (x)/(m_1*g))"
        ]
    },
    "d == 2*pi*v*sqrt(((x*(m_1+m_2))/(m_1*g)))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "d == 2*pi*sqrt(((m_1 + m_2) * x)/(m_1*g)) * v",
            "d == 2*pi*sqrt((x*(m_1 + m_2))/(g*m_1)) * v",
            "d == 2*pi*(v)/(((m_1*(g))/((m_1 + m_2) * x))**((1)/(2)))",
            "d == 2*pi*v*((m_1 + m_2)/(m_1*(g)/(x)))**((1)/(2))",
            "d == 2*pi*(v)/(sqrt(m_1*(g)/(x*(m_1 + m_2))))",
            "d == 2*pi*v*sqrt((m_1 + m_2)/((g*m_1)/(x)))",
            "d == 2*pi*v*sqrt((m_1 + m_2)/(((m_1*g)/(x))))",
            "d == 2*pi*v*sqrt((m_1 + m_2)/((m_1*g)/(x)))",
            "d == 2*pi*v*sqrt((m_1 + m_2)/(m_1*g) * x)",
            "d == 2*pi*v*sqrt((m_1 + m_2)/(m_1) * (x)/(g))",
            "d == 2*pi*v*sqrt(((m_1 + m_2) * (x))/(g*m_1))",
            "d == 2*pi*v*sqrt(((m_1 + m_2) * x)/(g*m_1))",
            "d == (2*pi*v) * sqrt(((m_1 + m_2) * x)/(m_1*g))",
            "d == 2*pi*v*(sqrt(((m_1 + m_2) * x)/(m_1*g)))",
            "d == 2*pi*v*sqrt(((m_1 + m_2) * x)/(m_1*g))",
            "d == 2*pi*v*sqrt((m_1 + m_2) * (x)/(m_1*g))",
            "d == 2*pi*v*sqrt((m_2 + m_1) * (x)/(g*m_1))",
            "d == 2*pi*v*sqrt(((m_2 + m_1) * x)/(m_1*g))",
            "d == 2*pi*v*sqrt(((m_2) * x + (m_1) * x)/((m_1) * g))",
            "d == 2*pi*v*sqrt((x*(1 + (m_2)/(m_1)))/(g))",
            "d == 2*pi*v*sqrt(((x*(m_1 + m_2))/(g*(m_1))))",
            "d == 2*pi*v*sqrt((x*(m_1 + m_2))/(g*m_1))",
            "d == 2*pi*v*sqrt(x*(m_1 + m_2)/(g*m_1))",
            "d == 2*pi*v*sqrt(((x*(m_1 + m_2))/(m_1*g)))",
            "d == 2*pi*v*sqrt((x*(m_1 + m_2))/(m_1*g))",
            "d == 2*pi*v*sqrt((x*(m_1 + m_2)/(m_1*g)))",
            "d == 2*pi*v*sqrt(x*(m_1 + m_2)/(m_1*g))",
            "d == 2*pi*v*sqrt(x*(m_1 + m_2)/((m_1) * g))",
            "d == (2*pi*v*sqrt(x*(m_1 + m_2)))/(sqrt(m_1*g))",
            "d == 2*pi*v*sqrt((x*(m_2 + m_1))/(m_1*g))",
            "d == 2*pi*v*sqrt(x*(m_2 + m_1)/(m_1*g))",
            "d == 2*pi*v*(x*(m_1 + m_2)/(g*m_1))**((1)/(2))",
            "d == 2*pi*v*(x*(m_1 + m_2)/(m_1*g))**((1)/(2))",
            "d == 2*pi*v*(x*((m_1 + m_2)/(m_1))/(g))**((1)/(2))",
            "d == (2*v*pi) * sqrt(((m_1 + m_2) * x)/(m_1*g))",
            "d == 2*v*pi*sqrt(((m_1 + m_2) * x)/(m_1*g))",
            "d == 2*v*pi*sqrt((m_1 + m_2) * (x)/(m_1*g))",
            "d == 2*v*pi*sqrt((x*(m_1 + m_2))/(m_1*g))",
            "d == 2*v*pi*sqrt((x*(m_2 + m_1))/(m_1*g))",
            "d == ((4*pi**(2)*v**(2)*x*(m_1 + m_2))/(g*m_1))**((1)/(2))",
            "d == sqrt((4*pi**(2)*v**(2)*(m_1 + m_2) * x)/(m_1*g))",
            "d == sqrt(((m_1 + m_2) * x)/(m_1*g)) * (2*pi*v)",
            "d == (v*2*pi) * (((m_1 + m_2) * x)/(m_1*g))**((1)/(2))",
            "d == (v*(2*pi))/(sqrt((g*m_1)/(x*(m_1 + m_2))))",
            "d == v*2*(pi)/(sqrt((m_1*(g)/(x))/(m_1 + m_2)))",
            "d == v*(2*pi) * sqrt((m_1 + m_2)/((m_1*g)/(x)))",
            "d == v*(2*pi*sqrt((m_1 + m_2)/((m_1*g)/(x))))",
            "d == v*(2*pi*sqrt(((m_1 + m_2) * x)/(m_1*g)))",
            "d == v*(2*pi*sqrt((m_2 + m_1)/((m_1*g)/(x))))",
            "d == v*(2*pi) * (sqrt((x*(m_1 + m_2))/(m_1*g)))",
            "d == v*2*pi*sqrt(x*(m_1 + m_2)/(m_1*g))",
            "d == v*(2*pi) * ((x*(m_1 + m_2))/(m_1*g))**((1)/(2))",
            "d == v*2*pi*((x*(m_1 + m_2))/(m_1*g))**((1)/(2))",
            "d == v*sqrt((4*pi**(2)*x*(m_1 + m_2))/(m_1*g))",
            "d == (v)/((sqrt((((m_1*g)/(x))/(m_1 + m_2))))/(2*pi))"
        ]
    },
    "- ((x)/(sigma**(2)))*e**( - ((x**(2))/(2*sigma**(2))))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "- (1)/(sigma**(2)) * e**( - (x**(2))/(2*sigma**(2)))*x",
            "- (1)/(sigma**(2)) * x*e**( - (1)/(2*sigma**(2)) * x**(2))",
            "( - (1)/(sigma**(2))) * x*e**(( - x**(2))/(2*sigma**(2)))",
            "(( - (1)/(sigma**(2))) * x) * e**( - (x**(2))/(2*sigma**(2)))",
            "- (1)/(sigma**(2)) * x*e**( - (x**(2))/(2*sigma**(2)))",
            "- (1)/(sigma**(2)) * x*e**(( - x**(2))/(2*sigma**(2)))",
            "- (2)/(2*sigma**(2)) * x*e**( - (1)/(2*sigma**(2)) * x**(2))",
            "( - (2)/(2*sigma**(2))) * x*e**( - (x**(2))/(2*sigma**(2)))",
            "- (2)/(2*sigma**(2)) * x*e**( - (x**(2))/(2*sigma**(2)))",
            "- 2*x*(2*sigma**(2))**(-1) * e**( - x**(2)*(2*sigma**(2))**(-1))",
            "( - 2*x)/(2*sigma**(2)) * e**( - (x**(2))/(2*sigma**(2)))",
            "( - 2*x)/(2*sigma**(2)) * e**(( - x**(2))/(2*sigma**(2)))",
            "(( - 2*x)/(2*sigma**(2))) * e**(( - x**(2))/(2*sigma**(2)))",
            "- (2*x)/(2*sigma**(2)) * e**( - ((x**(2))/(2*sigma**(2))))",
            "- (2*x)/(2*sigma**(2)) * e**( - (x**(2))/(2*sigma**(2)))",
            "- (2*x)/(2*sigma**(2)) * e**(( - x**(2))/(2*sigma**(2)))",
            "( - 2*(x)/(2*sigma**(2))) * e**( - (x**(2))/(2*sigma**(2)))",
            "- (2*(x)/(2*sigma**(2))) * e**( - ((x**(2))/(2*sigma**(2))))",
            "- (2*x)/(2*sigma**(2)) * e**( - (x**(2))/(2*(sigma)**(2)))",
            "- 2*(x)/(2*sigma**(2)) * e**( - ((x**(2))/(2*sigma**(2))))",
            "- 2*(x)/(2*sigma**(2)) * e**( - (x**(2))/(2*sigma**(2)))",
            "- (2*x)/(2*(sigma)**(2)) * e**( - (x**(2))/(2*(sigma)**(2)))",
            "- 2*x*(e**( - (x**(2))/(2*sigma**(2))))/(2*sigma**(2))",
            "(e**(( - x**(2))/(2*sigma**(2)))) * ( - 1)/(sigma**(2)) * x",
            "( - e**(( - x**(2))/(2*sigma**(2)))*2*x)/(2*sigma**(2))",
            "e**(( - x**(2))/(2*sigma**(2)))*(( - 2*x)/(2*sigma**(2)))",
            "e**( - ((x**(2))/(2*sigma**(2))))*( - 2*(x)/(2*sigma**(2)))",
            "( - e**( - (x**(2))/(2*sigma**(2)))) * (x)/(sigma**(2))",
            "(e**(( - x**(2))/(2*sigma**(2)))*( - x))/(sigma**(2))",
            "- ((e**( - (x**(2))/(2*sigma**(2)))) * x)/(sigma**(2))",
            "- (e**( - (x**(2))/(2*sigma**(2)))*x)/(sigma**(2))",
            "e**( - (x**(2))/(2*sigma**(2)))*( - (x)/(sigma**(2)))",
            "e**( - (x**(2))/(2*sigma**(2)))*( - x)/(sigma**(2))",
            "e**(( - x**(2))/(2*sigma**(2)))*( - (x)/(sigma**(2)))",
            "( - sigma**( - 2)) * e**(( - x**(2)*sigma**( - 2))/(2))*x",
            "- sigma**( - 2)*x*e**( - (x**(2))/(2*sigma**(2)))",
            "(( - x)/(1*sigma**(2))) * e**(( - (1)/(2*sigma**(2))) * x**(2))",
            "( - x)/(e**((x**(2))/(2*sigma**(2)))*sigma**(2))",
            "( - x*(e**(( - x**(2))/(2*sigma**(2))))/(sigma**(2)))",
            "( - x*e**( - (x**(2))/(2*sigma**(2))))/(sigma**(2))",
            "( - x*e**(( - x**(2))/(2*sigma**(2))))/(sigma**(2))",
            "- (x)/(e**((x**(2))/(2*sigma**(2)))*sigma**(2))",
            "- (x*(e**( - ((x**(2))/(2*sigma**(2)))))/(sigma**(2)))",
            "- (x*e**( - (x**(2))/(2*sigma**(2))))/(sigma**(2))",
            "- (x*e**(( - x**(2))/(2*sigma**(2))))/(sigma**(2))",
            "- x*(e**( - ((x**(2))/(2*sigma**(2)))))/(sigma**(2))",
            "- x*(e**( - (x**(2))/(2*sigma**(2))))/(sigma**(2))",
            "( - (x)/((sigma)**(2))) * e**( - (x**(2))/(2*sigma**(2)))",
            "( - (x)/(sigma**(2))) * e**( - (x**(2))/(2*sigma**(2)))",
            "( - (x)/(sigma**(2))) * e**(( - x**(2))/(2*sigma**(2)))",
            "( - x)/(sigma**(2)) * e**( - (x**(2))/(2*sigma**(2)))",
            "( - x)/(sigma**(2)) * e**(( - x**(2))/(2*sigma**(2)))",
            "(( - x)/(sigma**(2))) * e**( - (x**(2))/(2*sigma**(2)))",
            "(( - x)/(sigma**(2))) * e**(( - x**(2))/(2*sigma**(2)))",
            "- ((x)/(sigma**(2))) * e**( - ((x**(2))/(2*sigma**(2))))",
            "- ((x)/(sigma**(2))) * e**( - (x**(2))/(2*sigma**(2)))",
            "- (x)/((sigma)**(2)) * e**( - (x**(2))/(2*sigma**(2)))",
            "- (x)/(sigma**(2)) * (e**( - (x**(2))/(2*sigma**(2))))",
            "- (x)/(sigma**(2)) * e**( - ((x**(2))/(2*sigma**(2))))",
            "- (x)/(sigma**(2)) * e**( - (x**(2))/(2*sigma**(2)))",
            "- (x)/(sigma**(2)) * e**(( - x**(2))/(2*sigma**(2)))",
            "- (x)/(sigma**(2)*e**((x**(2))/(2*sigma**(2))))",
            "( - (x)/((sigma)**(2))) * (e**( - (x**(2))/(2*(sigma)**(2))))",
            "- (x)/((sigma)**(2)) * e**( - ((x**(2))/(2*(sigma)**(2))))",
            "- (x)/(sigma**(2)) * e**( - ((x**(2))/(2))/(sigma**(2)))"
        ]
    },
    "((a_1)/(u_1**(2)+2*d*a_1))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(1)/(2) * ((1)/(d + ((u_1**(2))/(2*a_1))))",
            "(1)/(2) * ((1)/(d + (u_1**(2))/(2*a_1)))",
            "(1)/(2) * ((1)/((((u_1)**(2))/(2*a_1)) + d))",
            "(1)/(2) * ((1)/(((u_1**(2))/(2*a_1)) + d))",
            "(1)/(2*d + (2*u_1**(2))/(2*a_1))",
            "(1)/(2*(d + (((u_1)**(2))/(2*a_1))))",
            "(1)/(2*(d + ((u_1)**(2))/(2*a_1)))",
            "(1)/(2*(d + ((u_1**(2))/(2*a_1))))",
            "(1)/(2*(d + (u_1**(2))/(2*a_1)))",
            "(1)/((2*d + (u_1**(2))/(a_1)))",
            "(1)/(2*d + ((u_1)**(2))/(a_1))",
            "(1)/(2*d + ((u_1**(2))/(a_1)))",
            "(1)/(2*d + (u_1**(2))/(a_1))",
            "(1)/((2*u_1**(2))/(2*a_1) + 2*d)",
            "((1)/(2))/(((u_1**(2))/(2*a_1)) + d)",
            "(1)/(2*(((u_1)**(2))/(2*a_1) + d))",
            "(1)/(2*(((u_1**(2))/(2*a_1)) + d))",
            "(1)/(2*((u_1**(2))/(2*a_1) + d))",
            "- (1)/(2*( - (u_1**(2))/(2*a_1) - d))",
            "((1)/(2))/((((u_1)**(2))/(2))/(a_1) + d)",
            "((1)/(2))/(((u_1**(2))/(2))/(a_1) + d)",
            "(1)/(2*(((u_1)**(2))/(2*(a_1)) + d))",
            "(1)/((d + (u_1**(2))/(2*a_1)) * 2)",
            "(1)/(((u_1**(2))/(2*a_1) + d) * 2)",
            "( - 1)/(( - u_1**(2))/(a_1) - 2*d)",
            "((1)/((u_1**(2))/(a_1) + 2*d))",
            "(1)/((((u_1)**(2))/(a_1)) + 2*d)",
            "(1)/(((u_1)**(2))/(a_1) + 2*d)",
            "(1)/(((u_1**(2))/(a_1) + 2*d))",
            "(1)/(((u_1**(2))/(a_1)) + 2*d)",
            "(1)/((u_1**(2))/(a_1) + 2*d)",
            "(1)/((u_1*u_1)/(a_1) + 2*d)",
            "(2*a_1)/(2*(u_1**(2) + 2*a_1*d))",
            "(2*a_1)/(2*u_1**(2) + 4*a_1*d)",
            "(2*a_1)/(2*u_1**(2) + 4*d*a_1)",
            "(2*a_1)/(4*a_1*d + 2*u_1**(2))",
            "((a_1)/(2*a_1*d + u_1**(2)))",
            "(a_1)/(2*a_1*d + (u_1)**(2))",
            "(a_1)/(2*a_1*d + u_1**(2))",
            "a_1*(2*a_1*d + u_1**(2))**( - 1)",
            "(a_1)/(2*a_1*d + u_1*u_1)",
            "(a_1)/(2*d*(a_1) + (u_1)**(2))",
            "(a_1)/(2*d*a_1 + (u_1)**(2))",
            "(a_1)/(2*d*a_1 + u_1**(2))",
            "((a_1)/(u_1**(2) + 2*a_1*d))",
            "(a_1)/(((u_1)**(2)) + 2*a_1*d)",
            "(a_1)/((u_1)**(2) + (2*a_1*d))",
            "(a_1)/((u_1)**(2) + 2*a_1*d)",
            "(a_1)/((u_1**(2)) + 2*a_1*d)",
            "(a_1)/(u_1**(2) + 2*a_1*d)",
            "(a_1)/((u_1)**(2) + (2*a_1) * d)",
            "(a_1)/((u_1)**(2) + 2*(a_1) * d)",
            "(a_1)/(u_1**(2) + 2*(a_1) * d)",
            "(a_1)/(((u_1)**(2)) + 2*d*a_1)",
            "(a_1)/((u_1)**(2) + (2*d*a_1))",
            "(a_1)/((u_1)**(2) + 2*d*(a_1))",
            "(a_1)/((u_1)**(2) + 2*d*a_1)",
            "(a_1)/(u_1**(2) + 2*d*(a_1))",
            "(a_1)/(u_1**(2) + 2*d*a_1)",
            "(a_1)/(u_1**(2) + d*2*a_1)",
            "((u_1**(2))/(a_1) + 2*d)**( - 1)"
        ]
    },
    "k==((a_1)/(u_1**(2)+2*d*a_1))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "k == (1)/(2*(d + ((u_1**(2))/(2*a_1))))",
            "k == (1)/(2*(d + (u_1**(2))/(2*a_1)))",
            "k == (1)/(2*d + ((u_1**(2))/(a_1)))",
            "k == (1)/(2*d + (u_1**(2))/(a_1))",
            "k == (1)/(2*(((u_1)**(2))/(2*a_1) + d))",
            "k == (1)/(2*((u_1**(2))/(2*a_1) + d))",
            "k == (1)/(((u_1**(2))/(a_1)) + 2*d)",
            "k == (1)/((u_1**(2))/(a_1) + 2*d)",
            "k == (a_1)/(2*a_1*d + (u_1)**(2))",
            "k == (a_1)/(2*a_1*d + u_1**(2))",
            "k == (a_1)/(2*d*a_1 + u_1**(2))",
            "k == (a_1)/((u_1)**(2) + 2*a_1*d)",
            "k == (a_1)/(u_1**(2) + 2*a_1*d)",
            "k == (a_1)/(u_1**(2) + 2*(a_1) * d)",
            "k == (a_1)/((u_1)**(2) + 2*d*a_1)",
            "k == (a_1)/((u_1**(2)) + 2*d*a_1)",
            "k == (a_1)/(u_1**(2) + 2*d*a_1)"
        ]
    },
    "T==(T_0+(T_1-T_0)*(e**(-(k*t)/C)))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "T_0 + ((T_1 - T_0) * (e**( - k*(t)/(C)))) == T",
            "T_0 + (T_1 - T_0) * e**( - (k*t)/(C)) == T",
            "T_0 + (T_1 - T_0) * e**( - k*(t)/(C)) == T",
            "T == (1 - e**( - (k)/(C) * t)) * T_0 + e**( - (k)/(C) * t)*T_1",
            "(T_1 - T_0) * e**( - (k)/(C) * t) + T_0 == T",
            "(T_1 - T_0) * (e**( - k*(t)/(C))) + T_0 == T",
            "(T_1 - T_0) * e**( - k*(t)/(C)) + T_0 == T",
            "(T_1 - T_0) * e**(( - k*t)/(C)) + T_0 == T",
            "T == (e**(( - (k)/(C)) * t)*(T_1 - T_0)) + T_0",
            "T == e**( - (k)/(C) * t)*(T_1 - T_0) + T_0",
            "T == e**(( - (k)/(C)) * t)*(T_1 - T_0) + T_0",
            "T == e**(( - k)/(C) * t)*(T_1 - T_0) + T_0",
            "T == e**(( - k*t)/(C) + log(T_1 - T_0, e)) + T_0",
            "T == (e**( - ((k*t)/(C)))) * (T_1 - T_0) + T_0",
            "T == (e**( - k*(t)/(C))) * (T_1 - T_0) + T_0",
            "T == e**( - ((k*t)/(C)))*(T_1 - T_0) + T_0",
            "T == e**( - (k*(t)/(C)))*(T_1 - T_0) + T_0",
            "T == e**( - (k*t)/(C))*(T_1 - T_0) + T_0",
            "T == e**( - k*(t)/(C))*(T_1 - T_0) + T_0",
            "T == e**(( - k*t)/(C))*(T_1 - T_0) + T_0",
            "T == e**((k*t)/( - C))*(T_1 - T_0) + T_0",
            "T == e**( - t*(k)/(C))*(T_1 - T_0) + T_0",
            "T == e**(( - t*k)/(C))*(T_1 - T_0) + T_0",
            "T == T_0*(1 - e**( - k*(t)/(C))) + T_1*e**( - k*(t)/(C))",
            "T == T_0*(1 - e**( - k*(t)/(C))) + T_1*(e**( - k*(t)/(C)))",
            "T == T_0 + e**( - (k)/(C) * t)*(T_1 - T_0)",
            "T == (T_0*(e**(k*(t)/(C)) - 1) + T_1) * e**( - k*(t)/(C))",
            "T == T_0 - e**( - (k*t)/(C))*(T_0 - T_1)",
            "T == T_0 - e**(( - k*t)/(C))*(T_0 - T_1)",
            "T == T_0 + (e**( - k*(t)/(C))) * (T_1 - T_0)",
            "T == T_0 + e**( - (k*t)/(C))*(T_1 - T_0)",
            "T == T_0 + e**( - k*(t)/(C))*(T_1 - T_0)",
            "T == T_0 + e**(( - k*t)/(C))*(T_1 - T_0)",
            "T == T_0 + e**((k*t)/( - C))*(T_1 - T_0)",
            "T == ((T_0) * e**(k*(t)/(C)) + T_1 - T_0)/(e**(k*(t)/(C)))",
            "T == T_0 - (T_0 - T_1) * e**( - (k)/(C) * t)",
            "T == T_0 - (T_0 - T_1) * e**( - (k*t)/(C))",
            "T == T_0 - (T_0 - T_1) * e**( - k*(t)/(C))",
            "T == T_0 - (T_0 - T_1) * e**(( - k*t)/(C))",
            "T == T_0 - (T_0 - T_1)/(e**((k*t)/(C)))",
            "T == T_0 - (T_0 - T_1)/(e**(k*(t)/(C)))",
            "T == T_0 + (T_1 - T_0) * (e**( - (k)/(C) * t))",
            "T == T_0 + (T_1 - T_0) * (e**(( - (k)/(C)) * t))",
            "T == T_0 + (T_1 - T_0) * e**( - (k)/(C) * t)",
            "T == T_0 + (T_1 - T_0) * e**(( - (k)/(C)) * t)",
            "T == T_0 + (T_1 - T_0) * e**(( - k)/(C) * t)",
            "T == T_0 + (T_1 - T_0) * e**((( - k)/(C)) * t)",
            "T == T_0 + (T_1 - T_0)/(e**((k)/(C) * t))",
            "T == (T_0 + (T_1 - T_0) * e**( - k*(t)/(C)))",
            "T == T_0 + ((T_1 - T_0) * e**( - ((k*t)/(C))))",
            "T == T_0 + (T_1 - T_0) * (e**( - k*(t)/(C)))",
            "T == T_0 + (T_1 - T_0) * (e**(( - k*t)/(C)))",
            "T == T_0 + (T_1 - T_0) * e**( - (k*(t)/(C)))",
            "T == T_0 + (T_1 - T_0) * e**( - (k*t)/(C))",
            "T == T_0 + (T_1 - T_0) * e**( - k*(t)/(C))",
            "T == T_0 + (T_1 - T_0) * e**(( - k*t)/(C))",
            "T == T_0 + (T_1 - T_0) * e**((k*t)/( - C))",
            "T == T_0 + (T_1 - T_0) * e**(k*(t)/( - C))",
            "T == T_0 + (T_1 - T_0)/(e**((k*t)/(C)))",
            "T == T_0 + (T_1 - T_0)/(e**(k*(t)/(C)))",
            "T == T_0 + (T_1 - T_0) * e**( - (t*(k)/(C)))",
            "T == T_0 + (T_1 - T_0) * e**( - (t*k)/(C))",
            "T == T_0 + (T_1 - T_0) * e**( - t*(k)/(C))",
            "T == T_0 + (T_1 - T_0)/(e**((t*k)/(C)))",
            "T == T_1*e**( - (k)/(C) * t) + T_0*(1 - e**( - (k)/(C) * t))",
            "T == T_1*e**( - k*(t)/(C)) + T_0*(1 - e**( - k*(t)/(C)))",
            "T == T_1*e**(( - k*t)/(C)) + T_0*(1 - e**(( - k*t)/(C)))",
            "T == T_1*e**( - (t*k)/(C)) + T_0 - T_0*e**( - (t*k)/(C))",
            "T == (T_1 - T_0) * (e**( - (k)/(C) * t)) + T_0",
            "T == (T_1 - T_0) * e**( - ((k)/(C) * t)) + T_0",
            "T == (T_1 - T_0) * e**( - ((k)/(C)) * t) + T_0",
            "T == (T_1 - T_0) * e**( - (k)/(C) * t) + T_0",
            "T == (T_1 - T_0) * e**(( - (k)/(C)) * t) + T_0",
            "T == (T_1 - T_0) * e**(( - k)/(C) * t) + T_0",
            "T == (T_1 - T_0) * e**((k)/( - C) * t) + T_0",
            "T == (T_1 - T_0)/(e**((k)/(C) * t)) + T_0",
            "T == (T_1 + T_0*(e**((k*t)/(C)) - 1))/(e**((k*t)/(C)))",
            "T == (T_1 + T_0*(e**(k*(t)/(C)) - 1))/(e**(k*(t)/(C)))",
            "T == ((T_1 - T_0) * e**(( - k*t)/(C)) + T_0)",
            "T == ((T_1 - T_0)/(e**(k*(t)/(C)))) + T_0",
            "T == (T_1 - T_0) * (e**(( - k*t)/(C))) + (T_0)",
            "T == (T_1 - T_0) * (e**(( - k*t)/(C))) + T_0",
            "T == (T_1 - T_0) * e**( - ((k*t)/(C))) + T_0",
            "T == (T_1 - T_0) * e**( - (k*(t)/(C))) + T_0",
            "T == (T_1 - T_0) * e**( - (k*t)/(C)) + T_0",
            "T == (T_1 - T_0) * e**( - k*(t)/(C)) + T_0",
            "T == (T_1 - T_0) * e**(( - k*t)/(C)) + T_0",
            "T == (T_1 - T_0) * e**((k*t)/( - C)) + T_0",
            "T == (T_1 - T_0)/(e**((k*t)/(C))) + T_0",
            "T == (T_1 - T_0)/(e**(k*(t)/(C))) + T_0",
            "T == (T_1 + T_0*e**((k*t)/(C)) - T_0) * e**(( - k*t)/(C))",
            "T == (T_1 - T_0) * (e**((t)/( - C)))**(k) + T_0",
            "T == (T_1 + T_0*(e**((t*k)/(C)) - 1))/(e**((t*k)/(C)))",
            "T == ((T_1 - T_0) * e**(( - t*k)/(C))) + T_0",
            "T == (T_1 - T_0) * e**( - (t*k)/(C)) + T_0",
            "T == (T_1 - T_0) * e**( - t*(k)/(C)) + T_0",
            "T == (T_1 - T_0) * e**(t*( - (k)/(C))) + T_0",
            "T == (T_1 - T_0 + T_0*e**((k*t)/(C)))/(e**((k*t)/(C)))",
            "T == (T_1 - T_0 + T_0*e**(k*(t)/(C)))/(e**(k*(t)/(C)))"
        ]
    },
    "sqrt(((mu**(2)+1)/(mu**(2)-1)))((m*g)/(2))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "((1)/(2)) * m*g*sqrt((mu**(2) + 1)/(mu**(2) - 1))",
            "(g*m)/(2) * sqrt((2)/(mu**(2) - 1) + 1)",
            "(g*m)/(2*sqrt(mu**(2) - 1)) * sqrt((mu**(2)) + 1)",
            "(g*m)/(2*sqrt(mu**(2) - 1)) * sqrt(mu**(2) + 1)",
            "(g*m*sqrt(mu**(2) + 1))/(2*sqrt(mu**(2) - 1))",
            "((m*g) * (1 + mu**(2))**((1)/(2)))/(2*(mu**(2) - 1)**((1)/(2)))",
            "(m*(g)/(2)) * ((mu**(2) + 1)/(mu**(2) - 1))**((1)/(2))",
            "(m*g)/(2*((mu**(2) - 1)/(mu**(2) + 1))**((1)/(2)))",
            "m*(g)/(2) * ((mu**(2) + 1)/(mu**(2) - 1))**((1)/(2))",
            "(m*(g)/(2)) * (sqrt((1 + mu**(2))/(mu**(2) - 1)))",
            "(m*g)/(2) * sqrt((2)/(mu**(2) - 1) + 1)",
            "((m*g)/(2)) * (sqrt((mu**(2) + 1)/(mu**(2) - 1)))",
            "((m*g)/(2)) * sqrt((mu**(2) + 1)/(mu**(2) - 1))",
            "(m*(g)/(2)) * sqrt((mu**(2) + 1)/(mu**(2) - 1))",
            "(m*g)/(2) * sqrt((mu**(2) + 1)/(mu**(2) - 1))",
            "m*(g)/(2) * (sqrt((mu**(2) + 1)/(mu**(2) - 1)))",
            "m*(g)/(2) * sqrt((mu**(2) + 1)/(mu**(2) - 1))",
            "(m*g)/(2*sqrt(mu**(2) - 1)) * sqrt(1 + mu**(2))",
            "m*(g)/(2*sqrt(mu**(2) - 1)) * sqrt(mu**(2) + 1)",
            "m*(g)/(2) * ((sqrt(mu**(2) + 1))/(sqrt(mu**(2) - 1)))",
            "m*(g)/(2) * (sqrt(mu**(2) + 1))/(sqrt(mu**(2) - 1))",
            "(m*g*mu)/(2) * sqrt(((1)/(mu**(2)) + 1)/(mu**(2) - 1))",
            "m*g*sqrt((1)/(2) * (1)/(mu**(2) - 1) + (1)/(4))",
            "m*g*sqrt((1)/(2*mu**(2) - 2) + (1)/(4))",
            "m*g*sqrt((1)/(4) + (1)/(2*(mu**(2) - 1)))",
            "(m*g) * (sqrt(1 + mu**(2)))/(2*mu*sqrt(1 - (1)/(mu**(2))))",
            "(m*g) * (sqrt(1 + mu**(2)))/(2*sqrt(( - 1 + mu**(2))))",
            "(m*g) * (sqrt(1 + mu**(2)))/(2*sqrt(mu**(2) - 1))",
            "(m*g*sqrt(1 + mu**(2)))/(2*sqrt(mu**(2) - 1))",
            "m*g*(sqrt(1 + mu**(2)))/(2*sqrt(mu**(2) - 1))",
            "m*g*sqrt(2*((1)/(sqrt(4*mu**(2) - 4)))**(2) + (1)/(4))",
            "(m*g*sqrt(mu**(2) + 1))/(2*mu*sqrt(1 - (1)/(mu**(2))))",
            "((m*g) * sqrt(mu**(2) + 1))/(2*sqrt(mu**(2) - 1))",
            "(m*g*sqrt(mu**(2) + 1))/(2*sqrt(mu**(2) - 1))",
            "m*g*(sqrt(mu**(2) + 1))/(2*sqrt(mu**(2) - 1))",
            "m*g*sqrt((mu**(2) + 1)/(4*mu**(2) - 4))",
            "m*g*sqrt((mu**(2) + 1)/(mu**(2) - 1)) * (1)/(2)",
            "(m*g*sqrt((mu**(2) + 1)/(mu**(2) - 1)))/(2)",
            "(mu*m*g)/(2*sqrt(mu**(2) - 1)) * sqrt(1 + (1)/(mu**(2)))",
            "sqrt((1 + mu**(2)) * m**(2)*(g**(2))/(4*mu**(2) - 4))",
            "sqrt(1 + (mu)**(2)) * (m*(g)/(2*(sqrt((mu)**(2) - 1))))",
            "sqrt(2*((m*g)/(sqrt(4*mu**(2) - 4)))**(2) + (m**(2)*g**(2))/(4))",
            "sqrt(2*((m*g)/(sqrt(4*mu**(2) - 4)))**(2) + m**(2)*(g**(2))/(4))",
            "sqrt((m**(2)*g**(2)*(mu**(2) + 1))/(4*(mu**(2) - 1)))",
            "sqrt((m**(2)*g**(2) + mu**(2)*m**(2)*g**(2))/(4*mu**(2) - 4))",
            "sqrt(((m*g)**(2))/(4*(mu**(2) - 1)) * (mu**(2) + 1))",
            "sqrt((((m*g)**(2) * (mu**(2) + 1))/((4) * (mu**(2) - 1))))",
            "sqrt(((m*g)/(sqrt(2) * sqrt(mu**(2) - 1)))**(2) + ((m*g)/(2))**(2))",
            "sqrt(mu**(2) + 1) * (m*g)/(2*sqrt(mu**(2) - 1))",
            "sqrt((mu**(2) + 1)/(mu**(2) - 1)) * (m*g)/(2)",
            "sqrt(((mu**(2)*m**(2)*g**(2)) + (m**(2)*g**(2)))/(4*(mu**(2) - 1)))",
            "sqrt((mu**(2)*(m*g)**(2))/(4*(mu**(2) - 1)) + ((m*g)**(2))/(4*(mu**(2) - 1)))",
            "sqrt(mu**(2)*((m*g)**(2))/(4*(mu**(2) - 1)) + ((m*g)**(2))/(4*(mu**(2) - 1)))"
        ]
    },
    "((V)/(R_1 +((1)/(((1)/(R_2)) +((1)/(R_3)) +((1)/(R_4))))))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "((R_2*R_3 + R_2*R_4 + R_3*R_4) * V)/(R_1*(R_3*R_2 + R_2*R_4 + R_3*R_4) + R_4*R_3*R_2)",
            "((R_3*R_4 + R_2*(R_3 + R_4)) * V)/(R_2*R_3*R_4 + R_1*(R_3*R_4 + R_2*(R_3 + R_4)))",
            "(R_3*R_4*V + R_2*R_4*V + V*R_2*R_3)/(R_2*R_3*R_4 + R_1*R_2*R_3 + R_1*R_3*R_4 + R_1*R_2*R_4)",
            "(V)/((1)/((1)/(R_2) + (1)/(R_3) + (1)/(R_4)) + R_1)",
            "(V)/(((1)/(((1)/(R_3) + (1)/(R_2) + (1)/(R_4))) + R_1))",
            "(V)/((((1)/(R_2) + (1)/(R_3) + (1)/(R_4))**( - 1) + R_1))",
            "(V)/((((1)/(R_2)) + ((1)/(R_3)) + ((1)/(R_4)))**( - 1) + R_1)",
            "(V)/(((1)/(R_2) + (1)/(R_3) + (1)/(R_4))**( - 1) + R_1)",
            "(V)/(R_1 + ((1)/(((1)/(R_2)) + ((1)/(R_3)) + ((1)/(R_4)))))",
            "(V)/(R_1 + ((1)/((1)/(R_2) + (1)/(R_3) + (1)/(R_4))))",
            "(V)/(R_1 + (1)/(((1)/(R_2) + (1)/(R_3) + (1)/(R_4))))",
            "(V)/(R_1 + (1)/((1)/(R_2) + (1)/(R_3) + (1)/(R_4)))",
            "(V)/((R_1 + ((1)/(R_2) + (1)/(R_3) + (1)/(R_4))**(-1)))",
            "(V)/((R_1) + ((1)/(R_2) + (1)/(R_3) + (1)/(R_4))**( - 1))",
            "(V)/(R_1 + (((1)/(R_2) + (1)/(R_3) + (1)/(R_4))**( - 1)))",
            "(V)/(R_1 + (((1)/(R_2)) + ((1)/(R_3)) + ((1)/(R_4)))**( - 1))",
            "(V)/(R_1 + ((1)/(R_2) + (1)/(R_3) + (1)/(R_4))**( - 1))",
            "(V)/(R_1 + ((1)/(R_2) + (1)/(R_3) + (1)/(R_4))**(-1))",
            "(V)/(R_1 + ((1)/(R_2) + (1)/(R_4) + (1)/(R_3))**( - 1))",
            "(V)/(R_1 + ((1)/(R_4) + (1)/(R_3) + (1)/(R_2))**( - 1))",
            "(V)/(R_1 + (R_2**( - 1) + R_3**( - 1) + R_4**( - 1))**( - 1))",
            "(V)/(R_1 + ((R_2*R_3*R_4)/(R_2*R_3 + R_2*R_4 + R_3*R_4)))",
            "(V)/(R_1 + (R_2*R_3*R_4)/(R_2*R_3 + R_2*R_4 + R_3*R_4))",
            "(V)/(R_1 + (R_2*R_3*R_4)/(R_2*R_3 + R_2*R_4 + R_4*R_3))",
            "(V)/(R_1 + (R_2*R_3*(R_4)/(R_2*R_3 + R_3*R_4 + R_2*R_4)))",
            "(V)/(R_1 + (R_2*R_3*R_4)/(R_3*R_4 + R_2*R_3 + R_2*R_4))",
            "(V)/(R_1 + ((R_2*R_3*R_4)/(R_3*R_4 + R_2*R_4 + R_2*R_3)))",
            "(V)/(R_1 + (R_2*R_3*R_4)/(R_3*R_4 + R_2*R_4 + R_2*R_3))",
            "(V)/(R_1 + (R_3**( - 1) + R_2**( - 1) + R_4**( - 1))**( - 1))",
            "(V)/((R_2**( - 1) + R_3**( - 1) + R_4**( - 1))**( - 1) + R_1)",
            "(V*(R_2*R_3 + R_2*R_4 + R_3*R_4))/(R_1*R_2*R_3 + R_1*R_2*R_4 + R_1*R_3*R_4 + R_2*R_3*R_4)",
            "V*(R_2*R_3 + R_2*R_4 + R_3*R_4)/(R_1*R_2*R_3 + R_1*R_2*R_4 + R_1*R_3*R_4 + R_2*R_3*R_4)",
            "(V*(R_2*R_3 + R_2*R_4 + R_3*R_4))/(R_1*(R_2*R_3 + R_2*R_4 + R_3*R_4) + R_2*R_3*R_4)",
            "V*(R_2*R_3 + R_2*R_4 + R_3*R_4)/(R_1*(R_2*R_3 + R_2*R_4 + R_3*R_4) + R_2*R_3*R_4)",
            "(V*(R_2*R_3 + R_2*R_4 + R_3*R_4))/(R_2*R_3*R_4 + R_1*(R_2*R_3 + R_2*R_4 + R_3*R_4))",
            "V*(R_2*R_3 + R_2*R_4 + R_3*R_4)/(R_2*R_3*R_4 + R_1*(R_2*R_3 + R_2*R_4 + R_3*R_4))",
            "(V*(R_2*R_3 + R_2*R_4 + R_3*R_4))/(R_3*R_4*R_2 + R_1*R_2*R_3 + R_1*R_2*R_4 + R_1*R_3*R_4)",
            "(V*(R_2*R_3 + R_3*R_4 + R_4*R_2))/(R_1*R_2*R_3 + R_2*R_3*R_4 + R_3*R_4*R_1 + R_4*R_1*R_2)",
            "(V)/((R_2*R_3*R_4)/(R_2*R_3 + R_2*R_4 + R_3*R_4) + R_1)",
            "(V)/(((R_2*R_3*R_4)/(R_2*R_3 + R_3*R_4 + R_2*R_4) + R_1))",
            "(V)/((R_2*R_3*R_4)/(R_2*R_3 + R_3*R_4 + R_2*R_4) + R_1)",
            "(V)/((R_2*R_3*R_4)/(R_2*(R_3 + R_4) + R_3*R_4) + R_1)",
            "(V)/(((R_2*R_3*R_4)/(R_2*R_4 + R_2*R_3 + R_4*R_3) + R_1))",
            "(V)/(((R_2*R_3*R_4)/(R_3*R_4 + R_2*R_3 + R_2*R_4) + R_1))",
            "(V)/((R_2*R_3*R_4)/(R_3*R_4 + R_2*R_3 + R_4*R_2) + R_1)",
            "(V*R_2*R_3 + V*R_2*R_4 + V*R_3*R_4)/(R_1*R_2*R_3 + R_1*R_2*R_4 + R_1*R_3*R_4 + R_2*R_3*R_4)",
            "(V)/(((R_3**( - 1) + R_4**( - 1)) + R_2**( - 1))**( - 1) + R_1)",
            "V*(R_3*R_2 + R_2*R_4 + R_3*R_4)/(R_2*R_3*R_4 + R_1*R_3*R_4 + R_1*R_2*R_4 + R_1*R_2*R_3)",
            "(V)/((R_3*R_4*R_2)/(R_3*R_4 + R_2*R_4 + R_2*R_3) + R_1)",
            "(V*(R_3*R_4 + R_2*R_4 + R_2*R_3))/(R_1*R_3*R_4 + R_1*R_2*R_4 + R_1*R_2*R_3 + R_2*R_3*R_4)",
            "(V*(R_3*R_4 + R_2*R_4 + R_2*R_3))/(R_2*R_3*R_4 + R_1*R_3*R_4 + R_1*R_2*R_4 + R_1*R_2*R_3)",
            "(V*(R_3*R_4 + R_2*R_4 + R_2*R_3))/(R_2*R_3*R_4 + R_1*(R_3*R_4 + R_2*R_4 + R_2*R_3))",
            "(V)/((((R_3*R_4)/(R_3 + R_4)) * R_2)/(((R_3*R_4)/(R_3 + R_4)) + R_2) + R_1)",
            "(V*R_3*R_4 + V*R_2*R_4 + V*R_2*R_3)/(R_2*R_3*R_4 + R_1*R_3*R_4 + R_1*R_2*R_4 + R_1*R_2*R_3)",
            "(V*R_3*R_4 + V*R_4*R_2 + V*R_2*R_3)/(R_4*R_3*R_1 + R_4*R_2*R_1 + R_2*R_3*R_1 + R_2*R_3*R_4)"
        ]
    },
    "I == ((V)/(R_1 +((1)/(((1)/(R_2)) +((1)/(R_3)) +((1)/(R_4))))))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "I == (V)/(((1)/(((1)/(R_2) + (1)/(R_3) + (1)/(R_4)))) + R_1)",
            "I == (V)/(((1)/(((1)/(R_2)) + ((1)/(R_3)) + ((1)/(R_4)))) + R_1)",
            "I == (V)/(((1)/((1)/(R_2) + (1)/(R_3) + (1)/(R_4))) + R_1)",
            "I == (V)/((1)/(((1)/(R_2)) + ((1)/(R_3)) + ((1)/(R_4))) + R_1)",
            "I == (V)/((1)/((1)/(R_2) + (1)/(R_3) + ((1)/(R_4))) + R_1)",
            "I == (V)/((1)/((1)/(R_2) + (1)/(R_3) + (1)/(R_4)) + R_1)",
            "I == (V)/((1)/(((1)/(R_4)) + ((1)/(R_2)) + ((1)/(R_3))) + R_1)",
            "I == (V)/((1)/((1)/(R_4) + (1)/(R_2) + (1)/(R_3)) + R_1)",
            "I == V*(1)/(R_1 + (1)/((1)/(R_2) + (1)/(R_3) + (1)/(R_4)))",
            "I == (V)/(((1)/(R_2) + (1)/(R_3) + (1)/(R_4))**( - 1) + R_1)",
            "I == (V)/(((1)/(R_2) + (1)/(R_3) + (1)/(R_4))**(-1) + R_1)",
            "I == (V)/(((((1)/(R_4)) + ((1)/(R_3)) + ((1)/(R_2)))**( - 1)) + R_1)",
            "I == (V)/((R_1 + (1)/(((1)/(R_2) + (1)/(R_3) + (1)/(R_4)))))",
            "I == (V)/(R_1 + ((1)/(((1)/(R_2)) + ((1)/(R_3)) + ((1)/(R_4)))))",
            "I == (V)/(R_1 + ((1)/((1)/(R_2) + (1)/(R_3) + (1)/(R_4))))",
            "I == (V)/(R_1 + (1)/((1)/(R_2) + (1)/(R_3) + (1)/(R_4)))",
            "I == (V)/(R_1 + ((1)/(R_2) + (1)/(((1)/(R_3) + (1)/(R_4))**( - 1)))**( - 1))",
            "I == (V)/((R_1 + ((1)/(R_2) + (1)/(R_3) + (1)/(R_4))**( - 1)))",
            "I == (V)/(R_1 + (((1)/(R_2) + (1)/(R_3) + (1)/(R_4))**( - 1)))",
            "I == (V)/(R_1 + (((1)/(R_2)) + ((1)/(R_3)) + ((1)/(R_4)))**( - 1))",
            "I == (V)/(R_1 + ((1)/(R_2) + (1)/(R_3) + (1)/(R_4))**( - 1))",
            "I == (V)/(R_1 + ((1)/(R_2) + (1)/(R_3) + (1)/(R_4))**(-1))",
            "I == (V)/(R_1 + (R_2**( - 1) + R_3**( - 1) + R_4**( - 1))**( - 1))",
            "I == (V)/(R_1 + ((R_2*R_3*R_4)/(R_2*R_3 + R_2*R_4 + R_3*R_4)))",
            "I == (V)/(R_1 + (R_2*R_3*R_4)/(R_2*R_3 + R_2*R_4 + R_3*R_4))",
            "I == (V)/((R_1 + (R_2*R_3*R_4)/((R_2*R_3 + R_3*R_4 + R_2*R_4))))",
            "I == (V)/(R_1 + (R_2*R_3*R_4)/(R_2*R_3 + R_3*R_4 + R_2*R_4))",
            "I == (V)/(R_1 + (R_2*R_3*R_4)/(R_2*R_4 + R_2*R_3 + R_3*R_4))",
            "I == (V)/(R_1 + ((R_2*R_3*R_4)/(R_2*R_4 + R_3*R_4 + R_2*R_3)))",
            "I == (V)/(R_1 + (R_2*R_3*R_4)/(R_3*R_2 + R_2*R_4 + R_3*R_4))",
            "I == (V)/(R_1 + (R_2*R_3*R_4)/(R_3*R_2 + R_4*R_2 + R_3*R_4))",
            "I == (V)/(R_1 + (R_2*R_3*R_4)/(R_3*R_4 + R_2*R_3 + R_2*R_4))",
            "I == (V)/(R_1 + ((R_2*R_3*R_4)/(R_3*R_4 + R_2*R_4 + R_2*R_3)))",
            "I == (V)/(R_1 + (R_2*R_3*R_4)/(R_3*R_4 + R_2*R_4 + R_2*R_3))",
            "I == ((V))/(R_1 + (R_2*R_3*R_4)/(R_3*R_4 + R_2*R_4 + R_3*R_2))",
            "I == (V)/((((R_2)**( - 1)) + ((R_3)**( - 1)) + ((R_4)**( - 1)))**( - 1) + R_1)",
            "I == (V)/(((R_2**( - 1)) + (R_3**( - 1)) + (R_4**( - 1)))**( - 1) + R_1)",
            "I == (V)/((R_2**( - 1) + R_3**( - 1) + R_4**( - 1))**( - 1) + R_1)",
            "I == V*(R_2*R_3 + R_3*R_4 + R_2*R_4)/(R_1*R_2*R_3 + R_2*R_3*R_4 + R_1*R_2*R_4 + R_1*R_3*R_4)",
            "I == (V)/(((R_2*R_3*R_4)/(R_2*R_3 + R_2*R_4 + R_3*R_4) + R_1))",
            "I == (V)/(((R_2*R_3*R_4)/(R_2*R_3 + R_3*R_4 + R_2*R_4)) + R_1)",
            "I == (V)/((R_2*R_3*R_4)/(R_2*(R_3 + R_4) + R_3*R_4) + R_1)",
            "I == (V)/((R_2*R_3*R_4)/(R_4*(R_2 + R_3) + R_2*R_3) + R_1)",
            "I == (V*R_2*R_3 + V*R_2*R_4 + V*R_3*R_4)/(R_2*R_3*R_4 + R_1*R_3*R_4 + R_1*R_2*R_4 + R_1*R_2*R_3)",
            "I == (V)/((R_2*R_4*R_3)/((R_2*R_4) + (R_3*R_2) + (R_3*R_4)) + R_1)",
            "I == (V*(R_3*R_4 + R_2*R_4 + R_2*R_3))/(R_1*(R_3*R_4 + R_2*R_4 + R_2*R_3) + R_2*R_3*R_4)",
            "I == V*(R_3*R_4 + R_2*R_4 + R_2*R_3)/(R_1*(R_3*R_4 + R_2*R_4 + R_2*R_3) + R_2*R_3*R_4)",
            "I == (V*(R_3*R_4 + R_2*R_4 + R_2*R_3))/(R_2*R_3*R_4 + R_1*(R_3*R_4 + R_2*R_4 + R_2*R_3))",
            "I == (V)/(((R_4*R_2*R_3)/(R_4*R_3 + R_4*R_2 + R_2*R_3)) + R_1)",
            "(V)/(((1)/(R_2) + (1)/(R_3) + (1)/(R_4))**( - 1) + R_1) == I",
            "(V)/(R_1 + ((1)/(((1)/(R_2)) + ((1)/(R_3)) + ((1)/(R_4))))) == I",
            "(V)/(R_1 + (1)/((1)/(R_2) + (1)/(R_3) + (1)/(R_4))) == I",
            "(V*(R_2*R_3 + R_3*R_4 + R_2*R_4))/(R_1*(R_2*R_3 + R_2*R_4 + R_3*R_4) + R_2*R_3*R_4) == I"
        ]
    },
    "((a*x**(a-1)-a*x**(-a-1))/(x**(a)+x**(-a)))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(1)/(x**(a) + x**( - a)) * (a*x**( - 1 + a) - a*x**( - a - 1))",
            "((1)/(x**(a) + x**( - a))) * (a*x**(a - 1) - a*x**( - a - 1))",
            "(1)/(x**(a) + x**( - a)) * (a*x**(a - 1) - a*x**( - (a + 1)))",
            "(1)/(x**(a) + x**( - a)) * (a*x**(a - 1) - a*x**( - a - 1))",
            "(1)/(x**(a) + x**( - a)) * a*(x**(a - 1) - x**( - a - 1))",
            "(2*a*x**(2*a - 1))/(x**(2*a) + 1) - (a)/(x)",
            "2*a*(x**(2*a - 1))/(x**(2*a) + 1) - (a)/(x)",
            "(a*x**( - 1) - a*x**( - 2*a - 1))/(1 + x**( - 2*a))",
            "(a*(x**( - 1) - x**( - 2*a - 1)))/(1 + x**( - 2*a))",
            "(a*x**(-1)*(x**(2*a) - 1))/(x**(2*a) + 1)",
            "(a*x**( - 1)*(x**(a) - x**( - a)))/((x**(a) + x**( - a)))",
            "(a*x**( - 1)*(x**(a) - x**( - a)))/(x**(a) + x**( - a))",
            "a*x**( - 1)*((x**(a) - x**( - a))/(x**(a) + x**( - a)))",
            "a*x**( - 1)*(x**(a) - x**( - a))/(x**(a) + x**( - a))",
            "(a*x**(2*a - 1) - a*x**( - 1))/(1 + x**(2*a))",
            "(a*(x**(2*a - 1) - x**( - 1)))/(x**(2*a) + 1)",
            "a*((x**(2*a - 1) - x**( - 1)))/(x**(2*a) + 1)",
            "(a*(x**(2*a) - 1))/(x**(2*a + 1) + x)",
            "a*(x**(2*a) - 1)/(x**(2*a + 1) + x)",
            "((a) * (x**(2*a) - 1))/((x) * (x**(2*a) + 1))",
            "(a*(x**(2*a) - 1))/(x*(x**(2*a) + 1))",
            "(a*(x**(2*a) - 1)/(x*(x**(2*a) + 1)))",
            "a*(x**(2*a) - 1)/(x*(x**(2*a) + 1))",
            "(a*x**(2*a) - a)/(x**((2*a + 1)) + x)",
            "(a*x**(2*a) - a)/(x**(2*a + 1) + x)",
            "(a*x**(2*a) - a)/(x*(x**(2*a) + 1))",
            "- (a)/(x) + 2*a*(x**(2*a - 1))/(x**(2*a) + 1)",
            "(a*x**(a - 1) - a*x**( - 1 - a))/(x**(a) + x**( - a))",
            "(a*x**(a - 1) - a*x**( - a - 1)) * ((1)/(x**(a) + x**( - a)))",
            "(a*x**(a - 1) - a*x**( - a - 1)) * (1)/(x**(a) + x**( - a))",
            "((a*x**(a - 1) - a*x**( - a - 1))/(x**(a) + x**( - a)))",
            "((a*x**(a - 1)) + ( - a*x**( - a - 1)))/(x**(a) + x**( - a))",
            "((a*x**(a - 1)) - (a*x**( - a - 1)))/((x**(a)) + (x**( - a)))",
            "((a*x**(a - 1)) - (a*x**( - a - 1)))/(x**(a) + x**( - a))",
            "((a*x**(a - 1)) - a*x**( - a - 1))/(x**(a) + x**( - a))",
            "(a*(x**(a - 1)) - a*(x**( - a - 1)))/(x**(a) + x**( - a))",
            "(a*x**((a - 1)) - a*x**(( - a - 1)))/(x**(a) + x**( - a))",
            "(a*x**(a - 1) +  - a*x**( - a - 1))/(x**(a) + x**( - a))",
            "(a*x**(a - 1) + ( - a*x**( - a - 1)))/(x**(a) + x**( - a))",
            "(a*x**(a - 1) - a*x**( - (a + 1)))/(x**(a) + x**( - a))",
            "(a*x**(a - 1) - a*x**( - a - 1))/(x**(a) + x**( - a))",
            "(a*(x**(a - 1) - x**( - 1 - a)))/(x**(a) + x**( - a))",
            "a*(x**(a - 1) - x**( - 1 - a))/(x**(a) + x**( - a))",
            "(a*((x**(a - 1)) - (x**( - a - 1))))/(x**(a) + x**( - a))",
            "(a*(x**(a - 1) - x**( - (a + 1))))/(x**(a) + x**( - a))",
            "(a*(x**(a - 1) - x**( - a - 1)))/((x**(a) + x**( - a)))",
            "(a*(x**(a - 1) - x**( - a - 1)))/(x**(a) + x**( - a))",
            "(a*(x**(a - 1) - x**( - a - 1))/(x**(a) + x**( - a)))",
            "a*((x**(a - 1) - x**( - a - 1))/(x**(a) + x**( - a)))",
            "a*(x**(a - 1) - x**( - (a + 1)))/(x**(a) + x**( - a))",
            "a*(x**(a - 1) - x**( - a - 1))/(x**(a) + x**( - a))",
            "((a)/(x**(a) + x**( - a))) * (x**(a - 1) - x**( - a - 1))",
            "(a)/(x**(a) + x**( - a)) * (x**(a - 1) - x**( - a - 1))",
            "(a*(x**(a) - x**( - a)))/(x**(a + 1) + x**( - a + 1))",
            "a*(x**(a) - x**( - a))/(x**(a + 1) + x**( - a + 1))",
            "(a*(x**(a) - x**( - a)))/(x*(x**(a) + x**( - a)))",
            "a*(x**(a) - x**( - a))/(x*(x**(a) + x**( - a)))",
            "(a)/(x) * ((x**(2*a) - 1)/(x**(2*a) + 1))",
            "(a)/(x) * (x**(2*a) - 1)/(x**(2*a) + 1)",
            "(((a)/(x)) * (x**(a) - x**( - a)))/(x**(a) + x**( - a))",
            "((a)/(x) * (x**(a) - x**( - a)))/(x**(a) + x**( - a))",
            "((a)/(x)) * ((x**(a) - x**( - a))/(x**(a) + x**( - a)))",
            "((a)/(x)) * (x**(a) - x**( - a))/(x**(a) + x**( - a))",
            "(a)/(x) * ((x**(a) - x**( - a))/(x**(a) + x**( - a)))",
            "(a)/(x) * (x**(a) - x**( - a))/(x**(a) + x**( - a))",
            "((x**(2*a) - 1) * a)/((x**(2*a) + 1) * x)",
            "(x**(a) + x**( - a))**( - 1) * (a*x**(a - 1) - a*x**( - a - 1))",
            "(x**(a) - x**( - a))/(x**(a) + x**( - a)) * (a)/(x)"
        ]
    },
    "(((u+v)/(2))) t": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "((1)/(2) * u + (1)/(2) * v) * t",
            "(1)/(2) * (u + v) * t",
            "(1)/(2) * v*t + (1)/(2) * u*t",
            "(1)/(2) * (v + u) * t",
            "((t)/(2)) * (u + v)",
            "(t)/(2) * (u + v)",
            "(t*(u + v))/(2)",
            "t*((u + v)/(2))",
            "t*((v + u)/(2))",
            "t*(v + u)/(2)",
            "((u)/(2) + (v)/(2)) * t",
            "u*t + (1)/(2) * (v - u) * t",
            "u*t + (1)/(2) * ((v - u)/(t)) * t**(2)",
            "(u*t + v*t)/(2)",
            "((u + v))/(2) * t",
            "((u + v)/(2)) * t",
            "(u + v)/(2) * t",
            "((u + v) * t)/(2)",
            "(u + v) * (t)/(2)",
            "((v + u)/(2)) * t",
            "(v + u)/(2) * (t)",
            "(v + u)/(2) * t",
            "((v + u) * t)/(2)",
            "(v + u) * (t)/(2)"
        ]
    },
    "s == (((u+v)/(2))) t": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "s == ((1)/(2)) * t*(u + v)",
            "s == (1)/(2) * t*(u + v)",
            "s == (1)/(2) * t*v + (1)/(2) * t*u",
            "s == (1)/(2) * t*(v + u)",
            "s == (1)/(2) * u*t + (1)/(2) * v*t",
            "s == ((1)/(2)) * (u + v) * t",
            "s == (1)/(2) * (u + v) * t",
            "s == (1)/(2) * v*t + (1)/(2) * u*t",
            "s == ((1)/(2)) * (v + u) * t",
            "s == (1)/(2) * (v + u) * t",
            "s == (1)/(2) * (v - u) * t + u*t",
            "s == t*((1)/(2) * v + (1)/(2) * u)",
            "s == (t)/(2) * (u + v)",
            "s == (t)/(2) * v + (t)/(2) * u",
            "s == (t)/(2) * (v + u)",
            "s == (t*(u + v))/(2)",
            "s == t*((u + v)/(2))",
            "s == t*(u + v)/(2)",
            "s == (t*v**(2) - t*u**(2))/(2*v - 2*u)",
            "s == (t*(v + u))/(2)",
            "s == t*((v + u)/(2))",
            "s == t*(v + u)/(2)",
            "s == ((u)/(2) + (v)/(2)) * t",
            "s == u*t + (1)/(2) * (v - u) * t",
            "s == u*t + ((1)/(2)) * ((v - u)/(t)) * t**(2)",
            "s == u*t + (1)/(2) * ((v - u)/(t)) * t**(2)",
            "s == u*t + (1)/(2) * (v - u)/(t) * (t)**(2)",
            "s == u*t + (1)/(2) * (v - u)/(t) * t**(2)",
            "s == u*t + (t)/(2) * (v - u)",
            "s == (u*t + v*t)/(2)",
            "s == u*t + ((v*t - u*t))/(2)",
            "s == u*t + (v*t - u*t)/(2)",
            "s == u*t + (v - u)/(2) * t",
            "s == u*t + (v - u)/(2*t) * t**(2)",
            "s == u*t + ((v - u) * t)/(2)",
            "s == ((u + v))/(2) * t",
            "s == ((u + v)/(2)) * (t)",
            "s == ((u + v)/(2)) * t",
            "s == (u + v)/(2) * (t)",
            "s == (u + v)/(2) * t",
            "s == ((u + v) * t)/(2)",
            "s == (u + v) * (t)/(2)",
            "s == (u + (v - u)/(2)) * t",
            "s == (v**(2) - u**(2))/((2*v - 2*u)/(t))",
            "s == (v**(2) - u**(2))/((2*v - 2*u) * t**( - 1))",
            "s == (v**(2) - u**(2))/(2*(v - u)/(t))",
            "s == ((v)/(2) + (u)/(2)) * t",
            "s == v*t - ((1)/(2)) * ((v - u)/(t)) * t**(2)",
            "s == v*t - (1)/(2) * ((v - u)/(t)) * t**(2)",
            "s == (v*t + u*t)/(2)",
            "s == ((v + u))/(2) * t",
            "s == ((v + u)/(2)) * t",
            "s == (v + u)/(2) * (t)",
            "s == (v + u)/(2) * t",
            "s == ((v + u) * t)/(2)",
            "s == (v + u) * (t)/(2)",
            "s == ((v - u) * t)/(2) + u*t",
            "(t*v + t*u)/(2) == s",
            "((u + v)/(2)) * t == s",
            "((u + v) * t)/(2) == s",
            "((v + u)/(2)) * t == s",
            "(v + u)/(2) * t == s"
        ]
    },
    "s == u*t+((1)/(2))*a*t**(2)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(2*t*u + (t**(2)) * a)/(2) == s",
            "((2*u + a*t)/(2)) * t == s",
            "s == (1)/(2) * (2*u + a*t) * t",
            "s == (1)/(2) * (a*t**(2) + 2*u*t)",
            "s == (1)/(2) * (a*t + 2*u) * t",
            "s == (1)/(2) * a*t**(2) + u*t",
            "s == (1)/(2) * (a*t) * t + u*t",
            "s == (1)/(2) * (u + u + a*t) * t",
            "s == (2*a*t*u + (a*t)**(2))/(2*a)",
            "s == ((2*u + a*t)/(2)) * t",
            "s == (2*u + a*t)/(2) * t",
            "s == (2*u*a*t + (a*t)**(2))/(2*a)",
            "s == ((2*u + a*t) * t)/(2)",
            "s == (2*u + a*t) * (t)/(2)",
            "s == (2*u*t + a*t**(2))/(2)",
            "s == (a)/(2) * t**(2) + u*t",
            "s == (a*t**(2))/(2) + u*t",
            "s == ((a*t + 2*u)/(2)) * t",
            "s == (a*t + 2*u)/(2) * t",
            "s == ((a*t)/(2) + u) * t",
            "s == ((a*t + u)**(2) - u**(2))/(2*a)",
            "s == t*((1)/(2) * a*t + u)",
            "s == ((t*a + 2*u) * t)/(2)",
            "s == (t*(a*t + 2*u))/(2)",
            "s == t*(a*t + 2*u)/(2)",
            "s == t*u + (1)/(2) * a*t**(2)",
            "s == (u*t) + ((1)/(2) * a*t**(2))",
            "s == (u*t) + (1)/(2) * a*t**(2)",
            "s == u*t + ((1)/(2) * a*t**(2))",
            "s == u*t + ((1)/(2)) * (a) * t**(2)",
            "s == u*t + ((1)/(2)) * a*t**(2)",
            "s == u*t + (1)/(2) * (a) * (t)**(2)",
            "s == u*t + (1)/(2) * (a) * t**(2)",
            "s == u*t + (1)/(2) * (a*t**(2))",
            "s == u*t + (1)/(2) * a*t**((2))",
            "s == u*t + (1)/(2) * a*t**(2)",
            "s == u*t + ((1)/(2)) * a*t*t",
            "s == u*t + (1)/(2) * a*t*(t)",
            "s == u*t + (1)/(2) * a*t*t",
            "s == u*t**(1) + a*(t**(2))/(2)",
            "s == u*t + (a)/(2) * t**(2)",
            "s == (u*t) + (a*t**(2))/(2)",
            "s == u*t + (a*(t)**(2))/(2)",
            "s == u*t + (a*t**(2))/(2)",
            "s == u*t + a*(t**(2))/(2)",
            "s == u*t + a*t*t*(1)/(2)",
            "s == u*t + (a*t*t)/(2)",
            "s == u*t + a*t*(t)/(2)",
            "s == u*t + (t)/(2) * ((u + t*a) - u)",
            "s == ((u + (u + a*t))/(2)) * t",
            "s == ((u + u + a*t)/(2) * t)",
            "u*t + ((1)/(2)) * a*t**(2) == s",
            "u*t + a*(t**(2))/(2) == s"
        ]
    },
    "s == v*t-((1)/(2))*a*t**(2)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "((2*v - a*t)/(2)) * t == s",
            "(2*v*t - a*(t**(2)))/(2) == s",
            "s == (1)/(2) * (2*v - a*t) * t",
            "s == (1)/(2) * (2*v*t - a*t**(2))",
            "s ==  - (1)/(2) * a*t**(2) + v*t",
            "s == (1)/(2) * a*t**(2) + v*t - a*t**(2)",
            "s == (1)/(2) * ((v - a*t) + v) * t",
            "s == (1)/(2) * (v - a*t + v) * t",
            "s == (((2*v) - (a*t))/(2)) * t",
            "s == ((2*v - a*t))/(2) * t",
            "s == ((2*v - a*t)/(2)) * t",
            "s == (2*v - a*t)/(2) * t",
            "s == ((2*v - a*t) * t)/(2)",
            "s == (2*v - a*t) * (t)/(2)",
            "s == (2*v*t - a*t**(2))/(2)",
            "s == (a*t**(2))/(2) + v*t - a*t**(2)",
            "s == (( - a*t + 2*v)/(2)) * t",
            "s == ((a*t - v) * ( - 1) + v)/(2) * t",
            "s == (t*(2*v - a*t))/(2)",
            "s == t*(v - (1)/(2) * a*t)",
            "s == t*v - (1)/(2) * a*t**(2)",
            "s == t*(v - a*t) + (1)/(2) * (a*t**(2))",
            "s == t*(v - a*t) + (1)/(2) * a*t**(2)",
            "s == (v - (1)/(2) * a*t) * t",
            "s == (v**(2) - ( - a*t + v)**(2))/(2*a)",
            "s == (v**(2) - (v - a*t)**(2))/(2*a)",
            "s == (v - (a*t)/(2)) * t",
            "s == (v - (a*t)) * t + (1)/(2) * a*t**(2)",
            "s == (v - a*t) * t + (1)/(2) * a*t**(2)",
            "s == (v - a*t) * t + (a*t**(2))/(2)",
            "s == (((v - a*t) + v)/(2)) * t",
            "s == ((v - a*t + v))/(2) * t",
            "s == ((v - a*t) + (v - (v - a*t))/(2)) * t",
            "s == (v*t) - ((1)/(2) * a*t**(2))",
            "s == (v*t) - (1)/(2) * a*t**(2)",
            "s == v*t - ((1)/(2) * a*t**(2))",
            "s == v*t - ((1)/(2)) * a*(t)**(2)",
            "s == v*t - ((1)/(2)) * a*t**(2)",
            "s == v*t - (1)/(2) * (a) * (t)**(2)",
            "s == v*t - (1)/(2) * (a*t**(2))",
            "s == v*t - (1)/(2) * a*t**((2))",
            "s == v*t - (1)/(2) * a*t**(2)",
            "s == v*t - ((1)/(2)) * a*t*t",
            "s == v*t - (1)/(2) * a*t*(t)",
            "s == v*t - (1)/(2) * a*t*t",
            "s == v*t - (1)/(2) * t**(2)*a",
            "s == v*t - (a)/(2) * t**(2)",
            "s == (v*t - a*t**(2)) + (1)/(2) * a*t**(2)",
            "s == v*t - a*t**(2) + (1)/(2) * a*t**(2)",
            "s == (v*t) - (a*t**(2))/(2)",
            "s == v*t - (a*t**(2))/(2)",
            "s == v*t - a*(t**(2))/(2)",
            "s == v*t - a*t**(2) + (t)/(2) * (v - (v - a*t))",
            "s == v*t - a*t*t*(1)/(2)",
            "s == v*t - (a*t*t)/(2)",
            "s == v*t - a*t*(t)/(2)",
            "s == (v + (v - (a*t)))/(2) * t",
            "s == (v + (v - a*t))/(2) * t",
            "s == (v + v - a*t)/(2) * t",
            "v*t - (1)/(2) * a*t**(2) == s",
            "v*t - (a*(t**(2)))/(2) == s"
        ]
    },
    "v == ((((k)/(m))) (x_0**(2) -x**(2)) )**(((1)/(2)))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "sqrt((k)/(m) * (x_0**(2) - x**(2))) == v",
            "sqrt((k*(x_0**(2) - x**(2)))/(m)) == v",
            "v == (1)/(sqrt(m)) * (sqrt( - k*x**(2) + k*(x_0)**(2)))",
            "v == ((k)/(m))**((1)/(2)) * sqrt(x_0**(2) - x**(2))",
            "v == (((k)/(m)) * ((x_0)**(2) - x**(2)))**((1)/(2))",
            "v == (((k)/(m)) * (x_0**(2) - x**(2)))**((1)/(2))",
            "v == ((k)/(m) * (x_0**(2) - x**(2)))**((1)/(2))",
            "v == ( - (k)/(m) * (x**(2)) + (k)/(m) * (x_0)**(2))**((1)/(2))",
            "v == ( - (k)/(m) * (x**(2) - x_0**(2)))**((1)/(2))",
            "v == ((k*(x_0)**(2) - k*x**(2))/(m))**((1)/(2))",
            "v == (k*(x_0**(2))/(m) - k*(x**(2))/(m))**((1)/(2))",
            "v == ((k*(x_0**(2) - x**(2)))/(m))**((1)/(2))",
            "v == (k*(x_0**(2) - x**(2))/(m))**((1)/(2))",
            "v == ((m*( - k*x**(2) + x_0**(2)*k))**((1)/(2)))/(m)",
            "v == sqrt(2*(( - k*x**(2))/(2*m) + (k*x_0**(2))/(2*m)))",
            "v == sqrt((k)/(m)) * (sqrt(x_0**(2) - x**(2)))",
            "v == sqrt((k)/(m)) * sqrt(x_0**(2) - x**(2))",
            "v == sqrt((k)/(m)) * sqrt( - x**(2) + x_0**(2))",
            "v == sqrt(((k)/(m) * x_0**(2) - (k)/(m) * x**(2)))",
            "v == sqrt((k)/(m) * x_0**(2) - (k)/(m) * x**(2))",
            "v == sqrt(((k)/(m)) * ((x_0)**(2) - x**(2)))",
            "v == sqrt(((k)/(m)) * (x_0**(2) - x**(2)))",
            "v == sqrt((k)/(m) * ((x_0)**(2) - x**(2)))",
            "v == sqrt((k)/(m) * (x_0**(2) - x**(2)))",
            "v == sqrt( - (k)/(m) * x**(2) + (k)/(m) * x_0**(2))",
            "v == sqrt(( - (k)/(m)) * x**(2) + ((k)/(m)) * (x_0)**(2))",
            "v == sqrt( - (k)/(m) * (x**(2) - x_0**(2)))",
            "v == sqrt(( - k)/(m) * (x**(2) - x_0**(2)))",
            "v == sqrt((k*(x_0)**(2) - k*(x**(2)))/(m))",
            "v == sqrt((k*x_0**(2) - k*x**(2))/(m))",
            "v == sqrt((k*x_0**(2))/(m) - (k*x**(2))/(m))",
            "v == sqrt((k*((x_0)**(2) - x**(2)))/(m))",
            "v == sqrt((k*((x_0)**(2) - x**(2))/(m)))",
            "v == sqrt((k*(x_0**(2) - x**(2)))/(m))",
            "v == sqrt((k*(x_0**(2) - x**(2))/(m)))",
            "v == sqrt(k*(x_0**(2) - x**(2))/(m))",
            "v == (sqrt(k*(x_0**(2) - x**(2))))/(sqrt(m))",
            "v == sqrt(( - k*x**(2) + k*x_0**(2))/(m))",
            "v == sqrt( - k*(x**(2))/(m) + k*(x_0**(2))/(m))",
            "v == sqrt(( - k*x**(2))/(m) + (k*x_0**(2))/(m))",
            "v == sqrt( - k*(x**(2) - x_0**(2))/(m))",
            "v == sqrt(( - k) * (x**(2) - (x_0)**(2))/(m))",
            "v == sqrt(( - k*(x**(2) - x_0**(2)))/(m))",
            "v == sqrt(k*( - x**(2) + x_0**(2))/(m))",
            "v == sqrt((x_0**(2)*k - k*x**(2))/(m))"
        ]
    },
    "v**2 == ((((k)/(m))) (x_0**(2) -x**(2)) )": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
              "(k)/(m) * (x_0**(2) - x**(2)) == v**(2)",
              "v**(2) == (k)/(m) * x_0**(2) - (k)/(m) * x**(2)",
              "v**(2) == (k)/(m) * (x_0**(2) - x**(2))",
              "v**(2) ==  - (k)/(m) * x**(2) + (k)/(m) * (x_0)**(2)",
              "v**(2) ==  - (k)/(m) * x**(2) + (k)/(m) * x_0**(2)",
              "v**(2) ==  - (k)/(m) * (x**(2) - x_0**(2))",
              "v**(2) == ( - (k)/(m)) * (x**(2) - x_0**(2))",
              "v**(2) == (k*x_0**(2) - k*x**(2))/(m)",
              "v**(2) == (k*x_0**(2))/(m) - (k*x**(2))/(m)",
              "v**(2) == (k*((x_0)**(2) - (x)**(2)))/(m)",
              "v**(2) == k*(x_0**(2) - x**(2))/(m)",
              "v**(2) ==  - (k*x**(2))/(m) + (k*x_0**(2))/(m)",
              "v**(2) ==  - k*(x**(2))/(m) + k*(x_0**(2))/(m)",
              "v**(2) == ( - k*x**(2))/(m) + (k*x_0**(2))/(m)",
              "v**(2) == ( - k*x**(2))/(m) - ( - k*x_0**(2))/(m)",
              "v**(2) == ( - k*(x**(2) - x_0**(2)))/(m)"
        ]
    },
    "A == b*sqrt((p**(2))/(4) - p*b)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "A=b(p^2/4-pb)^(1/2)",
            "(1)/(2) * (sqrt(p**(2) - 4*b*p)) * b == A",
            "A == (((1)/(2) * b*p)**(2) - p*b**(3))**((1)/(2))",
            "A == ((1)/(2)) * b*(p*(p - 4*b))**((1)/(2))",
            "A == (1)/(2) * b*(sqrt(p**(2) - 4*b*p))",
            "A == (1)/(2) * b*(sqrt(p**(2) - 4*p*b))",
            "A == (1)/(2) * sqrt(b**(2)*p**(2) - 4*b**(3)*p)",
            "A == (2*b*(sqrt(((p)/(2) - b)**(2) - b**(2))))/(2)",
            "A == (2*b*sqrt(((p)/(2) - b)**(2) - b**(2)))/(2)",
            "A == b*((1)/(4) * p**(2) - b*p)**((1)/(2))",
            "A == (b)/(2) * sqrt(p**(2) - 4*b*p)",
            "A == (b)/(2) * sqrt((p**(2) - 4*p*b))",
            "A == (b)/(2) * sqrt(p**(2) - 4*p*b)",
            "A == (b)/(2) * sqrt((p - 2*b)**(2) - 4*b**(2))",
            "A == b*(((p - 2*b)/(2))**(2) - b**(2))**((1)/(2))",
            "A == b*((((p)/(2)) - b)**(2) - b**(2))**((1)/(2))",
            "A == b*(((p)/(2) - b)**(2) - b**(2))**((1)/(2))",
            "A == (b*((p*(p - 4*b))**((1)/(2)))/(2))",
            "A == b*sqrt((1)/(4) * p**(2) - b*p)",
            "A == b*(sqrt((1)/(4) * p**(2) - p*b))",
            "A == b*sqrt(((1)/(4)) * p**(2) - p*b)",
            "A == b*sqrt((1)/(4) * p**(2) - p*b)",
            "A == (b*sqrt( - 4*b*p + p**(2)))/(2)",
            "A == b*sqrt( - b**(2) + ((p)/(2) - b)**(2))",
            "A == b*(sqrt((((p**(2))/(4)) - b*p)))",
            "A == b*sqrt(((p**(2))/(4) - b*p))",
            "A == b*sqrt((p**(2))/(4) - b*p)",
            "A == (b*sqrt(p**(2) - 4*b*p))/(2)",
            "A == b*(sqrt(p**(2) - 4*b*p))/(2)",
            "A == b*sqrt((p**(2) - 4*b*p)/(4))",
            "A == b*sqrt((((p**(2))/(4)) - p*b))",
            "A == b*sqrt(((p**(2))/(4)) - p*b)",
            "A == b*sqrt((p**(2))/(4) - p*b)",
            "A == (b*(sqrt(p**(2) - 4*p*b)))/(2)",
            "A == (b*(sqrt(p**(2) - 4*p*b))/(2))",
            "A == (b*sqrt(p**(2) - 4*p*b))/(2)",
            "A == b*((sqrt(p**(2) - 4*p*b))/(2))",
            "A == b*(sqrt(p**(2) - 4*p*b))/(2)",
            "A == b*(sqrt((p**(2) - 4*p*b)/(4)))",
            "A == b*sqrt((p**(2) - 4*p*b)/(4))",
            "A == b*(sqrt((p**(2) - 4*p*b + 4*b**(2))/(4) - b**(2)))",
            "A == b*(sqrt(((p - 2*b)/(2))**(2) - b**(2)))",
            "A == b*sqrt(((p - 2*b)/(2))**(2) - b**(2))",
            "A == (b*sqrt((p - 2*b)**(2) - 4*b**(2)))/(2)",
            "A == b*(sqrt((((p)/(2) - b)**(2) - b**(2))))",
            "A == b*(sqrt(((p)/(2) - b)**(2) - b**(2)))",
            "A == b*sqrt(((((p)/(2)) - b)**(2)) - b**(2))",
            "A == b*sqrt((((p)/(2) - b)**(2)) - b**(2))",
            "A == b*sqrt((((p)/(2)) - b)**(2) - b**(2))",
            "A == b*sqrt(((p)/(2) - b)**(2) - b**(2))",
            "A == ((b*sqrt(p))/(2)) * sqrt(p - 4*b)",
            "A == b*sqrt(p*((p)/(4) - b))",
            "A == (b*sqrt(p*(p - 4*b)))/(2)",
            "A == b*sqrt((p*(p - 4*b))/(4))",
            "A == (((p**(2)*b**(2))/(4)) - (p*b**(3)))**((1)/(2))",
            "A == sqrt(b**(2)*((p**(2))/(4) - (2*b*p)/(2)))",
            "A == sqrt(b**(2)*((p**(2))/(4) - 2*b*(p)/(2)))",
            "A == sqrt(((b**(2)*p**(2))/(4)) - b**(3)*p)",
            "A == sqrt((b**(2)*(p**(2))/(4)) - (b**(3)*p))",
            "A == sqrt((b**(2)*(p**(2))/(4)) - b**(3)*p)",
            "A == sqrt((b**(2)*p**(2))/(4) - b**(3)*p)",
            "A == sqrt(b**(2)*((p**(2))/(4) - b*p))",
            "A == (sqrt(b**(2)*(p**(2) - 4*b*p)))/(2)",
            "A == (sqrt(b**(2)*p**(2) - 4*p*b**(3)))/(2)",
            "A == sqrt(b**(2)*((p - 2*b)/(2))**(2) - b**(4))",
            "A == sqrt(b**(2)*(((p)/(2) - b)**(2) - b**(2)))",
            "A == sqrt((p**(2))/(4) - p*b) * b",
            "A == sqrt(p**(2) - 4*p*b) * (b)/(2)",
            "A == sqrt(((p - 2*b)/(2))**(2) - b**(2)) * b",
            "A == sqrt((p**(2)*b**(2))/(4) - ((2*b**(3)*p)/(2)))",
            "A == sqrt(p**(2)*(b**(2))/(4) - 2*b**(3)*(p)/(2))",
            "A == sqrt((p**(2)*b**(2))/(4) - b**(3)*p)",
            "A == (sqrt(p*b**(2)*(p - 4*b)))/(2)",
            "A == sqrt(p*((p)/(4) - b)) * b",
            "(b*sqrt(p**(2) - 4*b*p))/(2) == A",
            "b*sqrt((((p - 2*b))/(2))**(2) - b**(2)) == A",
            "(sqrt((p**(2))/(4) - b*p)) * b == A",
            "sqrt(((p)/(2) - b)**(2) - b**(2)) * b == A"
        ]
    },
    "sqrt(V/c)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(1)/(sqrt((V)/(c))) * (V)/(c)",
            "(sqrt(c*V))/(c)",
            "(sqrt(c) * V)/(sqrt(V) * c)",
            "(sqrt((V)/(c)))",
            "sqrt((V)/(c))",
            "(sqrt(V*c))/(c)",
            "(sqrt(V))/(sqrt(c))",
            "(V**((1)/(2)))/(c**((1)/(2)))",
            "V**((1)/(2))*c**( - ((1)/(2)))",
            "V**((1)/(2))*c**( - (1)/(2))",
            "(V*(2*c)**((1)/(2)))/(c*(2*V)**((1)/(2)))",
            "((V)/(c))**((1)/(2))",
            "(V)/(c*(sqrt((2*V)/(2*c))))",
            "(V)/(c*sqrt((2*V)/(2*c)))",
            "((V)/(c)) * sqrt((c)/(V))",
            "(V)/(c) * sqrt((c)/(V))",
            "((V)/(c))/(sqrt((V)/(c)))",
            "(V)/((c) * (sqrt((V)/(c))))",
            "(V)/(c*(sqrt((V)/(c))))",
            "(V)/(c*sqrt((V)/(c)))",
            "(V + c*sqrt(V*c))/(sqrt(c*V) + c**(2))",
            "(V)/(c*((V)/(c))**((1)/(2)))",
            "(V*sqrt(2*c))/(c*sqrt(2*V))",
            "(V)/((sqrt((2*V)/(2*c))) * c)",
            "(V)/(sqrt((2*V)/(2*c)) * c)",
            "(V*sqrt(c))/(c*sqrt(V))",
            "V*(sqrt(c))/(c*(sqrt(V)))",
            "(V*sqrt(c))/(sqrt(V) * c)",
            "(V)/(sqrt(c*V))",
            "(V)/(sqrt(V*c))",
            "(V)/((sqrt((V)/(c))) * c)",
            "(V)/(sqrt(((V)/(c))) * c)",
            "(V)/(sqrt((V)/(c)) * c)",
            "(V)/(V**((1)/(2))*c**((1)/(2)))"
        ]
    },
    "b==sqrt(V/c)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "b == sqrt((c)/(V)) * (V)/(c)",
            "b == sqrt((V)/(c))",
            "b == (V**((1)/(2)))/(c**((1)/(2)))",
            "b == ((V)/(c))**((1)/(2))",
            "b == ((V*c**((1)/(2)))/(c*V**((1)/(2))))",
            "b == ((V)/(c)) * ((1)/(sqrt((V)/(c))))",
            "b == ((V)/(c)) * ((2*V)/(2*c))**( - (1)/(2))",
            "b == (V)/(c*(sqrt((V)/(c))))",
            "b == (V)/(c*sqrt((V)/(c)))",
            "b == (V*sqrt(2*c))/(c*sqrt(2*V))",
            "b == (V)/((sqrt((2*V)/(2*c))) * c)",
            "b == ((V) * (sqrt(c)))/((c) * (sqrt(V)))",
            "b == (V*sqrt(c))/(c*sqrt(V))",
            "b == (V*sqrt(c))/(sqrt(V) * c)",
            "b == (V)/(sqrt(V*c))",
            "b == (V)/(sqrt(V*c**( - 1)) * c)",
            "b == (V)/(sqrt((V)/(c)) * c)",
            "(sqrt(V))/(sqrt(c)) == b"
        ]
    },
    "2*((V)/(c) + 2*sqrt(V*c))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "2*(2*c*sqrt((V)/(c)) + (V)/(c))",
            "2*(2*sqrt(c*V) + (V)/(c))",
            "2*(2*sqrt(V*c) + (V)/(c))",
            "2*c*sqrt((V)/(c)) + (2*V)/(c) + (2*V)/(sqrt((V)/(c)))",
            "2*c*(sqrt((V)/(c))) + 2*(V)/(sqrt((V)/(c))) + 2*(V)/(c)",
            "2*c*sqrt((V)/(c)) + 2*(V)/(sqrt((V)/(c))) + 2*(V)/(c)",
            "2*(c*sqrt((V)/(c)) + (V)/(c) + (V)/(sqrt((V)/(c))))",
            "2*(c*sqrt((V)/(c)) + (V)/(sqrt((V)/(c))) + (V)/(c))",
            "(2*c*sqrt(V))/(sqrt(c)) + (2*V*sqrt(c))/(sqrt(V)) + (2*V)/(c)",
            "2*(c*((V)/(c))/(sqrt((V)/(c))) + ((V)/(c))/(sqrt((V)/(c))) * sqrt((V)/(c)) + c*sqrt((V)/(c)))",
            "2*sqrt((2*V)/(2*c)) * c + (2*V)/(c) + (2*V)/(sqrt((2*V)/(2*c)))",
            "2*(sqrt((2*V)/(2*c))) * (V*sqrt(2*c))/(c*sqrt(2*V)) + 2*(V*sqrt(2*c))/(c*sqrt(2*V)) * c + 2*c*(sqrt((2*V)/(2*c)))",
            "(2*sqrt(c) * sqrt(V) * (sqrt((V)/(c)) + 2*c))/(c)",
            "2*sqrt((V)/(c)) * c + (2*V)/(sqrt((V)/(c))) + 2*(V)/(c)",
            "2*sqrt((V)/(c)) * (sqrt((V)/(c)) + 2*c)",
            "2*(sqrt((V)/(c)) * (V)/(c*sqrt((V)/(c))) + (V)/(sqrt((V)/(c))) + c*sqrt((V)/(c)))",
            "(2*sqrt(V) * (sqrt(V) + 2*c**((3)/(2))))/(c)",
            "2*V**((1)/(2))*c**((1)/(2)) + 2*V*c**( - 1) + 2*V**((1)/(2))*c**((1)/(2))",
            "2*((V + 2*c*sqrt(c*V))/(c))",
            "(2*V + 4*c*sqrt(c*V))/(c)",
            "(2*V + 4*c*sqrt(V*c))/(c)",
            "2*V*c**( - 1)*(1 + 2*V**( - (1)/(2))*c**((3)/(2)))",
            "2*(V*c**( - 1) + 2*sqrt(V*c))",
            "2*(V*c**( - 1) + 2*V**((1)/(2))*c**((1)/(2)))",
            "2*V*c**( - 1) + ((2*V*(sqrt(c)))/(sqrt(V))) + 2*c*sqrt((V)/(c))",
            "2*V*c**( - 1) + 2*V*sqrt((c)/(V)) + 2*c*sqrt((V)/(c))",
            "2*V*c**( - 1) + 2*V*(sqrt((V)/(c))**( - 1)) + 2*c*(sqrt((V)/(c)))",
            "2*V*c**( - 1) + (2*V)/(sqrt((V)/(c))) + 2*c*sqrt((V)/(c))",
            "2*V*c**( - 1) + 4*sqrt(V*c)",
            "2*(V*c**( - 1) + (sqrt((V)/(c)) * c) + V*(sqrt((V)/(c)))**( - 1))",
            "2*(V*c**( - 1) + V*sqrt((V)/(c))**( - 1) + c*sqrt((V)/(c)))",
            "((2*(V)/(c)) + (2*c*(sqrt((2*V)/(2*c)))) + (2*V*(sqrt((2*c)/(2*V)))))",
            "(2*V)/(c) + 2*c*sqrt((2*V)/(2*c)) + (2*V)/(sqrt((2*V)/(2*c)))",
            "2*(V)/(c) + 2*c*sqrt((2*V)/(2*c)) + 2*(V)/(sqrt((2*V)/(2*c)))",
            "2*(((V)/(c)) + 2*c*sqrt((V)/(c)))",
            "2*((V)/(c) + 2*c*sqrt((V)/(c)))",
            "(2*V)/(c) + 2*c*sqrt((V)/(c)) + 2*c*sqrt((V)/(c))",
            "2*(V)/(c) + 2*c*sqrt((V)/(c)) + 2*(V*sqrt(c))/(sqrt(V))",
            "(2*V)/(c) + 2*c*(sqrt((V)/(c))) + (2*V)/(sqrt((V)/(c)))",
            "(2*V)/(c) + 2*c*sqrt((V)/(c)) + (2*V)/(sqrt((V)/(c)))",
            "2*((V)/(c)) + 2*c*(sqrt((V)/(c))) + (2*V)/(sqrt((V)/(c)))",
            "(2*V)/(c) + (2*c*sqrt(V))/(sqrt(c)) + (2*V*c)/(sqrt(V*c))",
            "(2*V)/(c) + (2*c*sqrt(V))/(sqrt(c)) + (2*V*sqrt(c))/(sqrt(V))",
            "2*(V)/(c) + 2*c*((V)/(c))**((1)/(2)) + 2*(V)/(((V)/(c))**((1)/(2)))",
            "(2*V)/(c) + 2*(sqrt((2*V)/(2*c)) * c) + (2*V)/(sqrt((2*V)/(2*c)))",
            "2*((V)/(c) + 2*sqrt(c*V))",
            "(2*V)/(c) + 2*sqrt(c*V) + (2*V)/(sqrt((V)/(c)))",
            "(2*(V)/(c)) + (2*sqrt(c) * V)/(sqrt(V)) + (2*sqrt(V) * c)/(sqrt(c))",
            "2*((V)/(c) + 2*sqrt(V*c))",
            "2*(V)/(c) + 2*sqrt(V*c) + 2*c*sqrt((V)/(c))",
            "2*(V)/(c) + 2*sqrt(V*c) + 2*sqrt(V*c)",
            "2*(V)/(c) + 2*sqrt(V*c) + 2*(V)/(sqrt((V)/(c)))",
            "2*((V)/(c) + 2*sqrt((V)/(c)) * c)",
            "2*(V)/(c) + 2*sqrt((V)/(c)) * c + 2*V*sqrt((c)/(V))",
            "(2*V)/(c) + 2*sqrt((V)/(c)) * c + (2*V)/(sqrt((V)/(c)))",
            "2*(V)/(c) + 2*sqrt((V)/(c)) * c + 2*((V)/(sqrt((V)/(c))))",
            "2*(V)/(c) + 2*sqrt((V)/(c)) * c + 2*(V)/(sqrt((V)/(c)))",
            "(2*V)/(c) + (2*sqrt(V) * c)/(sqrt(c)) + (2*V*sqrt(c))/(sqrt(V))",
            "2*((V)/(c) + 2*(V*c)**((1)/(2)))",
            "2*(V)/(c) + 2*V*((c)/(V))**((1)/(2)) + 2*c*((V)/(c))**((1)/(2))",
            "(2*V)/(c) + (2*V*sqrt(2*c))/(sqrt(2*V)) + (2*c*sqrt(2*V))/(sqrt(2*c))",
            "2*(V)/(c) + 2*(V*sqrt(c))/(sqrt(V)) + 2*(c*sqrt(V))/(sqrt(c))",
            "2*(V)/(c) + 2*V*(sqrt(c))/(sqrt(V)) + (2*sqrt(V) * c)/(sqrt(c))",
            "(2*V)/(c) + 2*V*sqrt((c)/(V)) + 2*c*sqrt((V)/(c))",
            "(2*V)/(c) + (2*V)/(sqrt((V)/(c))) + 2*c*sqrt((V)/(c))",
            "2*(V)/(c) + 2*(V)/(sqrt((V)/(c))) + 2*c*(sqrt((V)/(c)))",
            "2*(V)/(c) + 2*(V)/(sqrt((V)/(c))) + 2*c*sqrt((V)/(c))",
            "2*(V)/(c) + 2*(V)/(sqrt((V)/(c))) + 2*sqrt(V*c)",
            "((2*V)/(c)) + ((2*V)/(sqrt((V)/(c)))) + (2*sqrt((V)/(c)) * c)",
            "(2*V)/(c) + (2*V)/(sqrt((V)/(c))) + 2*sqrt((V)/(c)) * c",
            "2*((V)/(c)) + 2*((V)/(sqrt((V)/(c)))) + 2*sqrt((V)/(c)) * c",
            "2*(V)/(c) + 2*(V)/(sqrt((V)/(c))) + 2*sqrt((V)/(c)) * c",
            "2*(V)/(c) + 2*(V)/(sqrt((V)/(c))) + 2*(sqrt((V)/(c))) * c",
            "(2*V)/(c) + (2*V)/(V**((1)/(2))*c**( - (1)/(2))) + 2*V**((1)/(2))*c**((1)/(2))",
            "(2*V)/(c) + (4*c*sqrt((V)/(c)))",
            "(2*V)/(c) + 4*c*sqrt((V)/(c))",
            "2*(V)/(c) + 4*c*sqrt((V)/(c))",
            "(2*V)/(c) + (4*c*sqrt(V))/(sqrt(c))",
            "(2*V)/(c) + 4*(c*V)**((1)/(2))",
            "(2*V)/(c) + (4*c*V**((1)/(2)))/(c**((1)/(2)))",
            "(2*V)/(c) + 4*c*((V)/(c))**((1)/(2))",
            "(2*V)/(c) + 4*sqrt(c*V)",
            "2*(V)/(c) + 4*sqrt(c*V)",
            "((2*V)/(c)) + 4*sqrt(V*c)",
            "(2*V)/(c) + 4*sqrt(V*c)",
            "(2*(V)/(c)) + 4*sqrt(V*c)",
            "(2*V)/(c) + 4*(sqrt(V*c))",
            "2*((V)/(c)) + 4*sqrt(V*c)",
            "2*(V)/(c) + 4*sqrt(V*c)",
            "2*(V)/(c) + 4*sqrt((V)/(c)) * c",
            "(2*V)/(c) + (4*sqrt(V) * c)/(sqrt(c))",
            "2*(V)/(c) + 4*sqrt(V) * sqrt(c)",
            "(2*V)/(c) + 4*V**((1)/(2))*c**((1)/(2))",
            "(2*(V)/(c)) + 4*V**((1)/(2))*c**((1)/(2))",
            "2*((V)/(c)) + 4*V**((1)/(2))*c**((1)/(2))",
            "2*(V)/(c) + 4*V**((1)/(2))*c**((1)/(2))",
            "(2*V)/(c) + 4*(V*c)**((1)/(2))",
            "2*((V)/(c)) + 4*(V*c)**((1)/(2))",
            "2*(V)/(c) + 4*(V*c)**((1)/(2))",
            "2*(((V)/(c)) + (c*sqrt((V)/(c))) + ((V)/(sqrt((V)/(c)))))",
            "2*((V)/(c) + c*sqrt((V)/(c)) + (V)/(sqrt((V)/(c))))",
            "2*((V)/(c) + (c*sqrt(V))/(sqrt(c)) + (V*sqrt(c))/(sqrt(V)))",
            "(2*V)/(c) + sqrt(16*c*V)",
            "2*(V)/(c) + sqrt(16*V*c)",
            "(2*V)/(c) + sqrt(4*c*V) + 2*c*sqrt((V)/(c))",
            "(2*V)/(c) + sqrt(4*c*V) + sqrt(4*c*V)",
            "(2*V)/(c) + sqrt(4*V*c) + 2*c*sqrt((2*V)/(2*c))",
            "(2*V)/(c) + sqrt((8*V)/(2*c)) * c + (2*V)/(sqrt((2*V)/(2*c)))",
            "2*((V)/(c) + sqrt((V)/(c)) * c + (V)/(sqrt((V)/(c))))",
            "2*((V)/(c) + sqrt(V*c) + sqrt(V*c))",
            "2*((V)/(c) + (V)/(sqrt((V)/(c))) + c*sqrt((V)/(c)))",
            "2*((V)/(c) + (V)/(sqrt((V)/(c))) + (sqrt((V)/(c))) * c)",
            "2*((V)/(c) + (V)/(sqrt((V)/(c))) + sqrt((V)/(c)) * c)",
            "(2*V)/(sqrt((2*V)/(2*c))) + (2)/((c*sqrt((2*V)/(2*c)))**( - 1)) + 2*(V)/(c)",
            "(2*V*(sqrt((V)/(c)) + 2*c))/(c*(sqrt((V)/(c))))",
            "(2*V)/(sqrt((V)/(c))) + 2*c*sqrt((V)/(c)) + (2*V)/(c)",
            "2*((V)/(sqrt((V)/(c))) + (V)/(c) + c*sqrt((V)/(c)))",
            "4*c*sqrt((V)/(c)) + (2*V)/(c)",
            "4*c*sqrt((V)/(c)) + 2*(V)/(c)",
            "(4*c*V + 2*V*(sqrt((V)/(c))))/(c*sqrt((V)/(c)))",
            "(4*c*V + 2*V*sqrt((V)/(c)))/(c*sqrt((V)/(c)))",
            "4*sqrt(c*V) + (2*V)/(c)",
            "4*sqrt(V*c) + (2*V)/(c)",
            "4*sqrt(V*c) + 2*(V)/(c)",
            "4*(sqrt(V*c)) + 2*(V)/(c)",
            "(4*V*c + 2*V*sqrt((V)/(c)))/(c*sqrt((V)/(c)))"
        ]
    },
    "(4*c**((3)/(2)))/(V**((1)/(2)))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(4*c**(2))/(sqrt(V*c))",
            "(4*c**(2)*sqrt((V)/(c)))/(V)",
            "(4*c**(2))/(V) * sqrt((V)/(c))",
            "(4*c**((3)/(2)))/(sqrt(V))",
            "4*(c**((3)/(2)))/(sqrt(V))",
            "(4*c**((3)/(2)))/(V**((1)/(2)))",
            "4*c**((3)/(2))*V**( - (1)/(2))",
            "4*(c**((3)/(2)))/(V**((1)/(2)))",
            "(4*c**(3)*sqrt((V)/(c))**(3))/(V**(2))",
            "4*((c**(3))/(V))**((1)/(2))",
            "(4*c*sqrt(2*c))/(sqrt(2*V))",
            "(4*c*sqrt(c))/(sqrt(V))",
            "4*c*(sqrt(c))/(sqrt(V))",
            "4*c*sqrt((c)/(V))",
            "(4*c*sqrt(c*V))/(V)",
            "4*c*(sqrt(c*V))/(V)",
            "((4*c)/(sqrt((V)/(c))))",
            "(4*c)/(sqrt((V)/(c)))",
            "4*(c)/(sqrt((V)/(c)))",
            "(4*c*sqrt(V*c))/(V)",
            "4*((c)/(V))**((1)/(2)) * c",
            "4*(c)/(V) * sqrt((V) * (c))",
            "(4*sqrt(c)**(3))/(sqrt(V))",
            "4*(sqrt(c**(3)))/(sqrt(V))",
            "(4*sqrt((c**(3))/(V)))",
            "4*sqrt((c**(3))/(V))",
            "4*(sqrt((c**(3))/(V)))",
            "(4)/(sqrt((V)/(c**(3))))",
            "(4)/(sqrt(V) * c**( - (3)/(2)))",
            "(4*V**( - (1)/(2)))/(c**( - (3)/(2)))",
            "4*V**( - ((1)/(2)))*c**((3)/(2))",
            "4*V**( - (1)/(2))*c**((3)/(2))",
            "4*V**(( - 1)/(2))*c**((3)/(2))",
            "4*V*(1)/((V)/(c) * sqrt((V)/(c)))",
            "4*V*((2*c)/(2*V) * sqrt((2*c)/(2*V)))",
            "(4*V*(2*c)**((3)/(2)))/((2*V)**((3)/(2)))",
            "4*V*((2*V)/(2*c))**( - (3)/(2))",
            "(4*V*c**(2))/(V*sqrt(c) * sqrt(V))",
            "(4*V*c*sqrt(c))/(V*sqrt(V))",
            "(4*V) * ((c)/(V))**((3)/(2))",
            "4*V*((c)/(V))**((3)/(2))",
            "(4*V)/(sqrt((2*V)/(2*c)) * (2*V)/(2*c))",
            "4*V*(sqrt((2*V)/(2*c)))**( - 3)",
            "4*V*sqrt((2*V)/(2*c))**( - 3)",
            "(4*V)/(sqrt((V**(3))/(c**(3))))",
            "(4*V)/((sqrt((V)/(c)))**(3))",
            "(4*V)/(sqrt((V)/(c))**(3))",
            "4*V*(sqrt((V)/(c)))**( - 3)",
            "4*V*(sqrt((V)/(c)))**(-3)",
            "4*V*(sqrt((V)/(c))**( - 3))",
            "4*V*sqrt((V)/(c))**( - 3)",
            "(4*(V)/(sqrt((V)/(c))**(3)))",
            "4*((V)/(sqrt((V)/(c))**(3)))",
            "4*(V)/((sqrt((V)/(c)))**(3))",
            "4*(V)/(sqrt((V)/(c))**(3))",
            "(4*V)/(V**((3)/(2))*c**( - (3)/(2)))",
            "(4*V)/(((V)/(c))**((3)/(2)))",
            "4*V*((V)/(c))**( - ((3)/(2)))",
            "4*V*((V)/(c))**( - (3)/(2))",
            "4*(V)/(((V)/(c))**((3)/(2)))",
            "(4*V)/(((V)/(c))**((3)/(2))) * (sin(c)**(2) + cos(c)**(2))",
            "(4*V)/(((V)/(c)) * (sqrt((V)/(c))))",
            "(4*V)/((V)/(c) * (sqrt((V)/(c))))",
            "4*(V)/((V)/(c) * sqrt((V)/(c)))",
            "sqrt(16*(c**(3))/(V))"
        ]
    },
    "A == 2*((V)/(c) + (V)/(a) + a*c)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "2*(a*c + (V)/(a) + (V)/(c)) == A",
            "(2*a*V)/(a*c) + 2*a*c + (2*c*V)/(a*c) == A",
            "((2*V)/(c)) + 2*a*c + ((2*V)/(a)) == A",
            "(2*V)/(c) + 2*a*c + (2*V)/(a) == A",
            "(2*(V)/(c)) + 2*a*c + (2*(V)/(a)) == A",
            "2*(V)/(c) + 2*a*c + 2*(V)/(a) == A",
            "(2*V)/(c) + (2*V)/(a) + 2*a*c == A",
            "2*(V)/(c) + 2*(V)/(a) + 2*a*c == A",
            "2*(((V)/(c)) + ((V)/(a)) + a*c) == A",
            "2*((V)/(c) + (V)/(a) + a*c) == A",
            "A == 2*((a**(2)*c**(2) + V*c + V*a)/(a*c))",
            "A == ((2)/(a) + (2)/(c)) * V + 2*a*c",
            "A == 2*a*c + 2*((a + c) * V)/(a*c)",
            "A == 2*a*c + (2*a*V + 2*c*V)/(a*c)",
            "A == 2*a*c + (2*a*V + 2*V*c)/(a*c)",
            "A == 2*a*c + 2*a*((V)/(a*c)) + 2*c*((V)/(a*c))",
            "A == 2*a*c + (2*a*V)/(a*c) + (2*V*c)/(a*c)",
            "A == 2*a*c + (2*V)/(a) + (2*V)/(c)",
            "A == 2*a*c + 2*(V)/(a) + 2*(V)/(c)",
            "A == 2*a*c + (2*V*a + 2*V*c)/(c*a)",
            "A == 2*a*c + 2*V*c**( - 1) + 2*V*a**( - 1)",
            "A == 2*a*c + ((2*V)/(c)) + ((2*V)/(a))",
            "A == 2*a*c + (2*V)/(c) + (2*V)/(a)",
            "A == 2*a*c + (2*(V)/(c)) + (2*(V)/(a))",
            "A == 2*a*c + 2*(V)/(c) + 2*(V)/(a)",
            "A == 2*a*c + 2*((V*c + a*V)/(a*c))",
            "A == 2*((a + c)/(a*c) * V + a*c)",
            "A == 2*(a*c + V*(((1)/(a)) + ((1)/(c))))",
            "A == 2*a*c + (V*(2*c + 2*a))/(a*c)",
            "A == 2*a*c + (V)/(a*c) * (2*a + 2*c)",
            "A == 2*(a*c + ((V)/(a)) + ((V)/(c)))",
            "A == 2*(a*c + (V)/(a) + (V)/(c))",
            "A == 2*((a*c) + ((V)/(c)) + ((V)/(a)))",
            "A == 2*(a*c + (V)/(c) + (V)/(a))",
            "A == (2*a*V + 2*c*V + 2*a**(2)*c**(2))/(a*c)",
            "A == 2*a*((V)/(a*c)) + 2*a*c + 2*c*((V)/(a*c))",
            "A == 2*a*((V)/(a*c)) + 2*a*c + 2*((V)/(a*c)) * c",
            "A == (2*a*V)/(a*c) + 2*a*c + (2*V*c)/(a*c)",
            "A == (2*a*V)/(a*c) + 2*c*a + (2*c*V)/(a*c)",
            "A == 2*a*((V)/(a*c)) + 2*c*a + 2*c*((V)/(a*c))",
            "A == 2*a*((V)/(a*c)) + 2*((V)/(a*c)) * c + 2*a*c",
            "A == 2*(a) * ((V)/(a*c)) + 2*((V)/(a*c)) * (c) + 2*a*c",
            "A == 2*((a*(V)/(a*c)) + (c*(V)/(a*c)) + a*c)",
            "A == 2*(a*((V)/(a))/(c) + ((V)/(a))/(c) * c + a*c)",
            "A == 2*(a*(V)/(a*c) + (V)/(a*c) * c + c*a)",
            "A == 2*((a*V)/(c*a) + (c*V)/(c*a) + a*c)",
            "A == 2*c*a + (2*(V)/(a)) + (2*(V)/(c))",
            "A == 2*c*a + 2*(V)/(a) + 2*(V)/(c)",
            "A == 2*(c*a + (V)/(c) + (V)/(a))",
            "A == (2*c*V + 2*a*V + 2*(a*c)**(2))/(a*c)",
            "A == 2*V*((1)/(a) + (1)/(c)) + 2*a*c",
            "A == 2*V*((1)/(c) + (1)/(a)) + 2*a*c",
            "A == (2*V)/(a) + 2*a*c + (2*V)/(c)",
            "A == 2*(V)/(a) + 2*a*c + 2*(V)/(c)",
            "A == (2*V)/(a) + (2*V)/(c) + 2*a*c",
            "A == 2*((V)/(a)) + 2*((V)/(c)) + 2*a*c",
            "A == 2*(V)/(a) + 2*(V)/(c) + 2*a*c",
            "A == 2*(V)/(a) + 2*(V)/(c) + 2*c*a",
            "A == 2*V*(a + c)/(a*c) + 2*a*c",
            "A == 2*((V)/(a*c) * (a + c) + c*a)",
            "A == 2*((V)/(a*c) * a + (V)/(a*c) * c + c*a)",
            "A == 2*(((V)/(a)) + ((V)/(c)) + a*c)",
            "A == 2*((V)/(a) + (V)/(c) + a*c)",
            "A == 2*((V)/(a) + (V)/(c) + c*a)",
            "A == (2*V*c**( - 1)) + (2*V*a**( - 1)) + 2*a*c",
            "A == 2*(V*c**( - 1) + V*a**( - 1) + a*c)",
            "A == 2*(V*c**( - 1) + V*a**( - 1) + c*a)",
            "A == ((2*V)/(c)) + 2*a*c + ((2*V)/(a))",
            "A == (2*V)/(c) + 2*a*c + (2*V)/(a)",
            "A == (2*V)/(c) + 2*a*c + 2*(V)/(a)",
            "A == (2*(V)/(c)) + 2*a*c + (2*(V)/(a))",
            "A == 2*((V)/(c)) + 2*a*c + 2*((V)/(a))",
            "A == 2*(V)/(c) + 2*a*c + 2*(V)/(a)",
            "A == 2*((V)/(c)) + 2*(a*c) + 2*((V)/(a))",
            "A == (2*V)/(c) + (2*V)/(a) + 2*a*c",
            "A == (2*V)/(c) + 2*(V)/(a) + 2*a*c",
            "A == (2*(V)/(c)) + (2*(V)/(a)) + (2*a*c)",
            "A == (2*(V)/(c)) + (2*(V)/(a)) + 2*a*c",
            "A == 2*((V)/(c)) + 2*((V)/(a)) + 2*a*c",
            "A == 2*(V)/(c) + 2*(V)/(a) + 2*a*c",
            "A == (2*V)/(c) + (2*V)/(a) + 2*c*a",
            "A == (2*(V)/(c)) + (2*(V)/(a)) + 2*c*a",
            "A == 2*(V)/(c) + 2*(V)/(a) + 2*c*a",
            "A == 2*(V)/(c) + 2*(V)/(a) + a*c*2",
            "A == 2*(((V)/(c)) + a*c + ((V)/(a)))",
            "A == 2*((V)/(c) + a*c + (V)/(a))",
            "A == 2*((V)/(c) + (V)/(a)) + 2*c*a",
            "A == 2*(((V)/(c)) + ((V)/(a)) + (a*c))",
            "A == 2*(((V)/(c)) + ((V)/(a)) + a*c)",
            "A == 2*(((V)/(c)) + (V)/(a) + a*c)",
            "A == 2*((V)/(c) + (V)/(a) + a*c)",
            "A == 2*(((V)/(c)) + ((V)/(a)) + c*a)",
            "A == 2*((V)/(c) + (V)/(a) + c*a)",
            "A == V*(2)/(c) + 2*(V)/(a) + 2*a*c",
            "A == (V)/(a*c) * (2*a + 2*c) + 2*a*c"
        ]
    },
    "y == 2*(e + e**(-1)) x - 2*e**(-1)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(2*e + (2)/(e)) * x - (2)/(e) == y",
            "2*e*x + (2*x - 2)/(e) == y",
            "(2*e*x + 2*x*e**( - 1)) - 2*e**( - 1) == y",
            "y == (2 + 2*e**(2))/(e) * x + ( - 2)/(e)",
            "y == (2*e**(1) + 2*e**( - 1)) * x - 2*e**( - 1)",
            "y == 2*(e**(1) + e**( - 1)) * x - 2*e**( - 1)",
            "y == 2*(e + (1)/(e)) * (x - (1)/(2)) + e - (1)/(e)",
            "y == 2*(e + (1)/(e)) * x - (2)/(e)",
            "y == 2*((e + (1)/(e)) * x - e**( - 1))",
            "y == (2*e**(1)*x + (2*e**( - 1)*x)) - 2*e**( - 1)",
            "y == 2*((e**(2) + 1)/(e)) * x - (2)/(e)",
            "y == (2*(e**(2) + 1) * x - 2)/(e)",
            "y == (2*e**(2) + 2)/(e) * (x - (1)/(2)) + ((e**(2) - 1)/(e))",
            "y == (2*e**(2) + 2)/(e) * (x) - (2)/(e)",
            "y == (2*e**(2) + 2)/(e) * x - ((2)/(e))",
            "y == (2*e**(2) + 2)/(e) * x - (2)/(e)",
            "y == (2*e**(2) + 2)/(e) * (x) - 2*e**( - 1)",
            "y == (2*e**(2) + 2)/(e) * x - 2*e**( - 1)",
            "y == ((2*e**(2) + 2) * x - 2)/(e)",
            "y == ((2*e**(2) + 2) * (x))/(e) - (2)/(e)",
            "y == (2*e + 2*e**( - 1)) * (x - (1)/(2)) + (e - e**( - 1))",
            "y == (2*e + 2*e**( - 1)) * (x - (1)/(2)) + e - e**( - 1)",
            "y == (2*e + 2*e**( - 1)) * x - (2)/(e)",
            "y == (2*e + 2*e**( - 1)) * x - 2*e**( - 1)",
            "y == (2*e + 2*e**(-1)) * x - 2*e**(-1)",
            "y == (2*e + 2*e**( - 1)) * x + ((e**(2) - 1)/(e) - (2*e + 2*e**( - 1))/(2))",
            "y == (2*e + 2*e**( - 1)) * x + (e - e**( - 1)) - (1)/(2) * (2*e + 2*e**( - 1))",
            "y == (2*e + (2)/(e)) * (x - (1)/(2)) + e - (1)/(e)",
            "y == ((2)/(e) + 2*e) * x - (2)/(e)",
            "y == (2*e + (2)/(e)) * x - ((2)/(e))",
            "y == (2*e + (2)/(e)) * x - (2)/(e)",
            "y == ((2)/(e) + 2*e) * x + e - (1)/(e) + (1)/(2) * ( - (2)/(e) - 2*e)",
            "y == ((2)/(e) + 2*e) * x + e - (1)/(e) + (1)/(2) * (( - 2)/(e) - 2*e)",
            "y == (2*e + (2)/(e)) * x + e + ( - 2*e**(2) - 4)/(2*e)",
            "y == (2*e + (2)/(e)) * x + e + (( - 2*e**(2) - 4)/(2*e))",
            "y == (2*e**(2)*x + 2*x - 2)/(e)",
            "y == 2*(e + e**( - 1)) * x - 2*e**( - 1)",
            "y == 2*e*x*(1 + e**( - 2)) - 2*e**( - 1)",
            "y == 2*e*x - 2*e**( - 1) + 2*x*e**( - 1)",
            "y == 2*e*x + 2*e**( - 1)*x - 2*e**( - 1)",
            "y == 2*e*x + (2*x - 2)/(e)",
            "y == 2*e*x + 2*x*e**( - 1) - 2*e**( - 1)",
            "y == 2*e*x + (2*x)/(e) - (2)/(e)",
            "y == 2*e*x + (2*(x)/(e)) - (2)/(e)",
            "y == 2*e*x + 2*(x)/(e) - (2)/(e)",
            "y == 2*(e*x + e**( - 1)*x - e**( - 1))",
            "y == 2*x*(e + (1)/(e)) - 2*e**( - 1)",
            "y == 2*x*((e**(2) + 1)/(e)) - (2)/(e)",
            "y == 2*x*(e**(2) + 1)/(e) - (2)/(e)",
            "y == 2*x*e + 2*x*e**( - 1) - 2*e**( - 1)",
            "y == 2*x*e + 2*(x)/(e) - (2)/(e)",
            "y == 2*x*(e + e**( - 1)) - 2*e**( - 1)",
            "y == 2*(x*e + (x - 1)/(e))",
            "y == e - (1)/(e) + (2*e + (2)/(e)) * (x - (1)/(2))",
            "y == e - e**( - 1) + (2*e + 2*e**( - 1)) * (x - (1)/(2))",
            "y == x*((2*e**(2) + 2)/(e)) - (2)/(e)",
            "y == x*(2*e + 2*e**( - 1)) - 2*e**( - 1)"
        ]
    },
    "(((1)/(R_1))+((1)/(R_2))) ((Q_0)/(C))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(((1)/(R_1) + (1)/(R_2)) * (Q_0)/(C))",
            "((1)/(R_1) + (1)/(R_2)) * (Q_0)/(C)",
            "(Q_0)/((1)/(((1)/(R_1)) + ((1)/(R_2))) * C)",
            "(Q_0)/((1)/((1)/(R_1) + (1)/(R_2)) * C)",
            "(Q_0)/((((1)/(R_1) + (1)/(R_2))**( - 1)) * C)",
            "(Q_0)/(((1)/(R_1) + (1)/(R_2))**( - 1) * C)",
            "(Q_0) * ((1)/(R_1) + (1)/(R_2))/(C)",
            "(Q_0*((1)/(R_1) + (1)/(R_2)))/(C)",
            "Q_0*(((1)/(R_1) + (1)/(R_2))/(C))",
            "Q_0*(((1)/(R_1)) + ((1)/(R_2)))/(C)",
            "Q_0*((1)/(R_1) + (1)/(R_2))/(C)",
            "((Q_0)/(C))/((1)/((1)/(R_1) + (1)/(R_2)))",
            "(Q_0)/(C*((1)/((1)/(R_1) + (1)/(R_2))))",
            "(Q_0)/(C*(1)/((1)/(R_1) + (1)/(R_2)))",
            "((Q_0)/(C))/((1)/((1)/(R_2) + (1)/(R_1)))",
            "((Q_0)/(C)) * (((1)/(R_1)) + ((1)/(R_2)))",
            "((Q_0)/(C)) * ((1)/(R_1) + (1)/(R_2))",
            "(Q_0)/(C) * ((1)/(R_1) + (1)/(R_2))",
            "(((Q_0)/(C)))/(((1)/(R_1) + (1)/(R_2))**( - 1))",
            "((Q_0)/(C))/(((1)/(R_1) + (1)/(R_2))**( - 1))",
            "((Q_0)/(C))/(((1)/(R_1) + (1)/(R_2))**(-1))",
            "(Q_0)/(C) * ((1)/(R_1) + (1)/(R_2)) * 1",
            "(Q_0)/(C*((((1)/(R_1)) + ((1)/(R_2)))**( - 1)))",
            "(Q_0)/(C*((1)/(R_1) + (1)/(R_2))**( - 1))",
            "(Q_0)/(C) * (R_1**(-1) + R_2**(-1))",
            "((Q_0)/(C))/(((R_1)**( - 1) + (R_2)**( - 1))**( - 1))",
            "((Q_0)/(C))/((R_1**( - 1) + R_2**( - 1))**( - 1))",
            "(Q_0)/(C*((R_1**( - 1) + R_2**( - 1))**( - 1)))",
            "(Q_0)/(C*(R_1**(-1) + R_2**(-1))**(-1))",
            "(Q_0)/(C*R_1) + (Q_0)/(C*R_2)",
            "((Q_0)/(C)) * ((R_1 + R_2)/(R_1*R_2))",
            "((Q_0)/(C)) * (R_1 + R_2)/(R_1*R_2)",
            "((Q_0)/(C))/((R_1*R_2)/(R_1 + R_2))",
            "(Q_0)/(C) * ((R_1 + R_2)/(R_1*R_2))",
            "(Q_0)/(C) * (R_1 + R_2)/(R_1*R_2)",
            "(Q_0)/(C*((R_1*R_2)/(R_1 + R_2)))",
            "(Q_0)/(C*(R_1*R_2)/(R_1 + R_2))",
            "(Q_0)/(C*R_1*R_2) * (R_1 + R_2)",
            "((Q_0)/(C))/(R_1*(R_2)/(R_1 + R_2))",
            "(Q_0)/(C) * ((R_1 + R_2)/(R_1))/(R_2)",
            "(Q_0)/(C*(R_1*(R_2)/(R_1 + R_2)))",
            "(Q_0*(R_1**( - 1) + R_2**( - 1)))/(C)",
            "(Q_0)/(R_1*C) + (Q_0)/(R_2*C)",
            "((Q_0)/(R_1) + (Q_0)/(R_2))/(C)",
            "((Q_0) * (R_1 + R_2))/(C*(R_1*R_2))",
            "((Q_0) * (R_1 + R_2))/(C*R_1*R_2)",
            "(Q_0) * (R_1 + R_2)/(C*(R_1*R_2))",
            "(Q_0*(R_1 + R_2))/(C*(R_1*R_2))",
            "(Q_0*(R_1 + R_2))/(C*R_1*R_2)",
            "Q_0*(R_1 + R_2)/(C*(R_1*R_2))",
            "Q_0*(R_1 + R_2)/(C*R_1*R_2)",
            "((Q_0) * (R_1 + R_2))/(C*(R_1) * (R_2))",
            "(Q_0) * (R_1 + R_2)/(C*(R_1) * R_2)",
            "(Q_0*(R_1 + R_2))/((C) * (R_1) * (R_2))",
            "(Q_0*(R_1 + R_2))/(C*(R_1) * (R_2))",
            "Q_0*(R_1 + R_2)/(C*(R_1) * (R_2))",
            "(Q_0*(R_1 + R_2))/(R_1*R_2*C)",
            "Q_0*(R_1 + R_2)/(R_1*R_2*C)",
            "(Q_0)/(((R_1*R_2)/(R_1 + R_2)) * C)",
            "(Q_0*(R_1 + R_2))/((R_1*R_2) * C)",
            "(Q_0)/((R_1*(R_2)/(R_1 + R_2)) * C)",
            "(Q_0*R_2 + Q_0*R_1)/(C*R_1*R_2)",
            "(Q_0) * (R_2 + R_1)/(C*R_1*R_2)",
            "Q_0*(R_2 + R_1)/(C*(R_1*R_2))",
            "(Q_0*(R_2 + R_1))/(R_2*R_1*C)",
            "((R_1 + R_2) * Q_0)/(C*R_1*R_2)",
            "(R_1 + R_2) * (Q_0)/(C*R_1*R_2)",
            "((R_1 + R_2) * Q_0)/(R_1*R_2*C)",
            "(R_1 + R_2) * (Q_0)/(R_1*R_2*C)",
            "((R_1 + R_2) * Q_0)/(R_2*C*R_1)",
            "((R_1 + R_2)/(R_1*R_2)) * ((Q_0)/(C))"
        ]
    },
    "(((Q_0**(2) - Q**(2)) R_1 )/(2*C*(R_1 + R_2)))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(1)/(2*C) * (Q_0**(2) - Q**(2)) * ((1)/((1)/(R_1) + (1)/(R_2)))/(R_2)",
            "(1)/(2*C) * (Q_0**(2) - Q**(2)) * (1 + (R_2)/(R_1))**( - 1)",
            "(1)/(2*C) * (Q_0**(2) - Q**(2)) * (1 - (R_2)/(R_1 + R_2))",
            "((1)/(2*C) * (Q_0**(2) - Q**(2)) * R_1)/(R_1 + R_2)",
            "(1)/(2*C) * ((Q_0)**(2) - (Q)**(2)) * ((R_1)/(R_1 + R_2))",
            "(1)/(2*C) * ((Q_0)**(2) - Q**(2)) * ((R_1)/(R_1 + R_2))",
            "(1)/(2*C) * (Q_0**(2) - Q**(2)) * ((R_1)/(R_1 + R_2))",
            "(1)/(2*C) * (Q_0**(2) - Q**(2)) * (R_1)/(R_1 + R_2)",
            "((1)/(2*C)) * (Q_0**(2) - Q**(2)) * ((R_1)/(R_2 + R_1))",
            "(1)/(2*C) * ((R_1)/(R_1 + R_2)) * (Q_0**(2) - Q**(2))",
            "(1)/(2*C) * ((R_1)/(R_2 + R_1)) * ((Q_0)**(2) - Q**(2))",
            "(1)/(2*C) * (R_1*R_2)/(R_2*(R_1 + R_2)) * (Q_0**(2) - Q**(2))",
            "((1)/(2) * (Q_0**(2))/(C) - (1)/(2) * (Q**(2))/(C)) * ((1)/(R_2))/((1)/(R_1) + (1)/(R_2))",
            "(((1)/(2) * (Q_0**(2))/(C)) - ((1)/(2) * (Q**(2))/(C))) * (R_1)/(R_1 + R_2)",
            "(((1)/(2) * Q_0**(2))/(C) - ((1)/(2) * Q**(2))/(C)) * ((R_1)/(R_1 + R_2))",
            "((1)/(2) * (Q_0**(2))/(C) - (1)/(2) * (Q**(2))/(C)) * (R_1)/(R_1 + R_2)",
            "(((1)/(2) * (Q_0**(2))/(C)) - ((1)/(2) * (Q**(2))/(C)))/(R_1 + R_2) * R_1",
            "((1)/(2) * ((Q_0)**(2))/(C) - (1)/(2) * ((Q)**(2))/(C)) * ((R_1)/(R_2 + R_1))",
            "((1)/(2) * (Q_0**(2))/(C) - (1)/(2) * (Q**(2))/(C)) * (R_1)/(R_2 + R_1)",
            "(((1)/(2) * (Q_0**(2))/(C) - (1*Q**(2))/(2*C)) * R_1)/(R_1 + R_2)",
            "(1)/(2) * ((Q_0**(2))/(C) - (Q**(2))/(C)) * ((R_1)/(R_1 + R_2))",
            "(1)/(2) * ((Q_0**(2))/(C) - (Q**(2))/(C)) * (R_1)/(R_1 + R_2)",
            "(1)/(2) * ((Q_0**(2))/(C) - (Q**(2))/(C)) * (R_1)/(R_2 + R_1)",
            "(1)/(2) * (((Q_0)**(2) - Q**(2))/(C)) * ((R_1)/(R_1 + R_2))",
            "(1)/(2) * ((Q_0**(2) - Q**(2))/(C)) * ((R_1)/(R_1 + R_2))",
            "(1)/(2) * (Q_0**(2) - Q**(2))/(C) * (R_1)/(R_1 + R_2)",
            "(1)/(2) * (Q_0**(2) - Q**(2)) * ((R_1)/(R_1 + R_2))/(C)",
            "(1)/(2) * (R_1)/(R_1 + R_2) * (Q_0**(2) - Q**(2))/(C)",
            "((1*Q_0**(2))/(2*C) - (1*Q**(2))/(2*C)) * (R_1)/(R_1 + R_2)",
            "(1)/((R_1 + R_2)/(R_1)) * ((Q_0)**(2) - (Q)**(2))/(2*C)",
            "((1)/(R_2))/((1)/(R_2) + (1)/(R_1)) * ((1)/(2) * (Q_0**(2))/(C) - (1)/(2) * (Q**(2))/(C))",
            "(1)/((R_2)/(R_1) + 1) * (1)/(2*C) * (Q_0**(2) - Q**(2))",
            "(Q_0**(2)*(1)/((1)/(R_1) + (1)/(R_2)))/(2*R_2*C) * (1 - (Q**(2))/(Q_0**(2)))",
            "(((Q_0**(2))/(2*C) - (Q**(2))/(2*C)) * (1)/(R_2))/((1)/(R_1) + (1)/(R_2))",
            "((Q_0**(2))/(2*C) - (Q**(2))/(2*C)) * ((R_1)/(R_1 + R_2))",
            "((Q_0**(2))/(2*C) - (Q**(2))/(2*C)) * (R_1)/(R_1 + R_2)",
            "((Q_0**(2))/(2*(C)) - (Q**(2))/(2*C)) * (R_1)/(R_1 + R_2)",
            "(((Q_0)**(2))/(2*C) - ((Q)**(2))/(2*C))/(R_1 + R_2) * R_1",
            "((Q_0**(2))/(2*C) - (Q**(2))/(2*C)) * (R_1)/(R_2 + R_1)",
            "(Q_0**(2))/(2*C*R_2) * (1)/((1)/(R_1) + (1)/(R_2)) * (1 - ((Q)/(Q_0))**(2))",
            "(Q_0**(2))/(2*C*R_2*((1)/(R_1) + (1)/(R_2))) * (1 - (Q**(2))/(Q_0**(2)))",
            "(Q_0**(2) - Q**(2)) * (((1)/(R_1) + (1)/(R_2))**( - 1))/(2*R_2*C)",
            "(Q_0**(2) - Q**(2))/(2*C) * ((1)/(R_2))/((1)/(R_1) + (1)/(R_2))",
            "(Q_0**(2) - Q**(2))/((2*C) * (1 + (R_2)/(R_1)))",
            "(Q_0**(2) - Q**(2))/(2*C*(1 + (R_2)/(R_1)))",
            "(((Q_0**(2)) - (Q**(2)))/(2*C)) * ((R_1)/(R_1 + R_2))",
            "((Q_0)**(2) - (Q)**(2))/(2*C) * (R_1)/(R_1 + R_2)",
            "((Q_0)**(2) - Q**(2))/(2*C) * (R_1)/(R_1 + R_2)",
            "((Q_0**(2) - Q**(2))/(2*C)) * ((R_1)/(R_1 + R_2))",
            "((Q_0**(2) - Q**(2))/(2*C)) * (R_1)/(R_1 + R_2)",
            "((Q_0**(2)) - Q**(2))/(2*C) * ((R_1)/(R_1 + R_2))",
            "(Q_0**(2) - Q**(2))/(2*C) * ((R_1)/(R_1 + R_2))",
            "(Q_0**(2) - Q**(2))/(2*C) * (R_1)/(R_1 + R_2)",
            "((Q_0)**(2) - Q**(2))/(2*C) * (R_1)/(R_2 + R_1)",
            "(Q_0**(2) - Q**(2))/(2*C) * ((R_1)/(R_2 + R_1))",
            "(Q_0**(2) - Q**(2))/(2*C) * (R_1)/(R_2 + R_1)",
            "(Q_0**(2) - Q**(2))/(2*C) * (((R_1*R_2)/(R_1 + R_2))/(R_2))",
            "((Q_0**(2) - Q**(2)) * R_1)/((2*C) * (R_1 + R_2))",
            "((Q_0**(2) - Q**(2)) * R_1)/(2*C*(R_1 + R_2))",
            "(Q_0**(2) - Q**(2)) * ((R_1)/(2*C*(R_1 + R_2)))",
            "(Q_0**(2) - Q**(2)) * (R_1)/(2*C*(R_1 + R_2))",
            "((Q_0**(2) - Q**(2)) * R_1)/(2*C*(R_2 + R_1))",
            "((Q_0**(2) - Q**(2)) * R_1)/(2*(R_1 + R_2) * C)",
            "(Q_0**(2) - Q**(2)) * (R_1)/(2*(R_1 + R_2) * C)",
            "((Q_0**(2) - Q**(2)) * (R_1)/(R_1 + R_2))/(2*C)",
            "(Q_0**(2) - Q**(2)) * ((R_1)/(R_1 + R_2))/(2*C)",
            "(Q_0**(2) - Q**(2)) * (R_1)/((R_1 + R_2) * 2*C)",
            "Q_0**(2)*R_1*(1 - ((Q)/(Q_0))**(2))/(2*C*(R_1 + R_2))",
            "(Q_0**(2)*R_1)/(2*C*(R_1 + R_2)) * (1 - (Q**(2))/(Q_0**(2)))",
            "Q_0**(2)*(R_1)/(2*C*(R_1 + R_2)) * (1 - (Q**(2))/(Q_0**(2)))",
            "(Q_0**(2)*R_1)/(2*C*(R_1 + R_2)) * (1 - ((Q)/(Q_0))**(2))",
            "- ((Q_0**(2)*R_1)/(2*C*(R_1 + R_2))) * (((Q_0)/(Q))**( - 2) - 1)",
            "(( - Q**(2) + Q_0**(2)) * R_1)/(2*C*(R_1 + R_2))",
            "(R_1*(1)/(2) * ((Q_0**(2))/(C) - (Q**(2))/(C)))/(R_1 + R_2)",
            "(R_1)/(2*C) * (Q_0**(2) - Q**(2))/(R_1 + R_2)",
            "((R_1)/(2*C*(R_1 + R_2))) * (Q_0**(2) - Q**(2))",
            "(R_1)/((2*C) * (R_1 + R_2)) * ((Q_0)**(2) - (Q)**(2))",
            "(R_1)/((2*C) * (R_1 + R_2)) * (Q_0**(2) - Q**(2))",
            "(R_1)/(2*C*(R_1 + R_2)) * (Q_0**(2) - Q**(2))",
            "(R_1)/(2*(R_1 + R_2) * C) * (Q_0**(2) - Q**(2))",
            "((R_1) * (Q_0**(2) - Q**(2)))/(2*C*(R_1 + R_2))",
            "(R_1) * (Q_0**(2) - Q**(2))/(2*C*(R_1 + R_2))",
            "(R_1*((Q_0)**(2) - Q**(2)))/(2*C*(R_1 + R_2))",
            "(R_1*(Q_0**(2) - Q**(2)))/(2*C*(R_1 + R_2))",
            "R_1*((Q_0)**(2) - Q**(2))/(2*C*(R_1 + R_2))",
            "R_1*(Q_0**(2) - Q**(2))/((2*C) * (R_1 + R_2))",
            "R_1*(Q_0**(2) - Q**(2))/(2*C*(R_1 + R_2))",
            "(R_1*(Q_0**(2) - Q**(2)))/(2*C*(R_2 + R_1))",
            "(R_1*(Q_0**(2) - Q**(2)))/(2*(R_1 + R_2) * C)",
            "(R_1*(Q_0**(2) - Q**(2)))/(2*(R_2 + R_1) * C)",
            "(R_1*(Q_0 + Q) * (Q_0 - Q))/(2*C*(R_1 + R_2))",
            "(((R_1)/(R_1 + R_2)) * (1)/(2*C) * (Q_0**(2) - Q**(2)))",
            "((R_1)/(R_1 + R_2)) * ((1)/(2*C) * (Q_0**(2) - Q**(2)))",
            "((R_1)/(R_1 + R_2)) * ((1)/(2*C)) * ((Q_0)**(2) - Q**(2))",
            "((R_1)/(R_1 + R_2)) * ((1)/(2*C)) * (Q_0**(2) - Q**(2))",
            "((R_1)/(R_1 + R_2)) * (1)/(2*C) * ((Q_0)**(2) - (Q)**(2))",
            "((R_1)/(R_1 + R_2)) * (1)/(2*C) * (Q_0**(2) - Q**(2))",
            "(R_1)/(R_1 + R_2) * (1)/(2*C) * (Q_0**(2) - Q**(2))",
            "((R_1)/(R_1 + R_2)) * ((1)/(2) * (Q_0**(2))/(C) - (1)/(2) * (Q**(2))/(C))",
            "(R_1)/(R_1 + R_2) * (((1)/(2) * (Q_0**(2))/(C)) - ((1)/(2) * (Q**(2))/(C)))",
            "(R_1)/(R_1 + R_2) * ((1)/(2) * ((Q_0)**(2))/(C) - (1)/(2) * ((Q)**(2))/(C))",
            "(R_1)/(R_1 + R_2) * ((1)/(2) * ((Q_0)**(2))/(C) - (1)/(2) * (Q**(2))/(C))",
            "(R_1)/(R_1 + R_2) * ((1)/(2) * ((Q_0**(2))/(C)) - (1)/(2) * (Q**(2))/(C))",
            "(R_1)/(R_1 + R_2) * ((1)/(2) * (Q_0**(2))/(C) - (1)/(2) * (Q**(2))/(C))",
            "(R_1)/(R_1 + R_2) * (1)/(2) * (Q_0**(2) - Q**(2))/(C)",
            "(R_1)/((R_1 + R_2) * (2*C)) * (Q_0**(2) - Q**(2))",
            "(R_1)/(R_1 + R_2) * ((Q_0**(2))/(2*C) - (1)/(2) * (Q**(2))/(C))",
            "((R_1)/(R_1 + R_2)) * ((Q_0**(2))/(2*C)) * (1 - ((Q**(2))/(Q_0**(2))))",
            "(R_1)/(R_1 + R_2) * (Q_0**(2))/(2*C) * (1 - ((Q)/(Q_0))**(2))",
            "((R_1)/(R_1 + R_2)) * ((Q_0**(2))/(2*C) - (Q**(2))/(2*C))",
            "((R_1)/((R_1) + (R_2))) * ((Q_0**(2) - Q**(2))/(2*C))",
            "((R_1)/(R_1 + R_2) * (Q_0**(2) - Q**(2)))/(2*C)",
            "((R_1)/(R_1 + R_2)) * (Q_0**(2) - Q**(2))/(2*C)",
            "(R_1)/(R_1 + R_2) * ((Q_0)**(2) - Q**(2))/(2*C)",
            "(R_1)/(R_1 + R_2) * ((Q_0**(2) - Q**(2))/(2*C))",
            "(R_1)/(R_1 + R_2) * (Q_0**(2) - Q**(2))/(2*C)",
            "(R_1)/(R_1 + R_2) * (((Q_0)**(2) - Q**(2))/(C))/(2)",
            "(R_1)/(R_2 + R_1) * ((1)/(2*C) * (Q_0**(2) - Q**(2)))",
            "((R_1)/(R_2 + R_1)) * ((1)/(2) * (Q_0**(2))/(C) - (1)/(2) * (Q**(2))/(C))",
            "(R_1)/(R_2 + R_1) * ((1)/(2) * ((Q_0)**(2))/(C) - (1)/(2) * ((Q)**(2))/(C))",
            "(R_1)/(R_2 + R_1) * ((Q_0**(2) - Q**(2))/(2*C))",
            "(((R_1*R_2)/(R_1 + R_2)) * (Q_0**(2) - Q**(2)))/(2*R_2*C)",
            "((R_1*R_2)/(R_2*(R_1 + R_2))) * ((Q_0**(2) - Q**(2))/(2*C))"
        ]
    },
    "((R_1*R_2)/(R_1 + R_2))*C*ln(((Q_0)/(Q)))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "0 - (ln((Q)/(Q_0)) * C)/((1)/(R_1) + (1)/(R_2))",
            "- (1)/(1) * (C*(R_1**( - 1) + R_2**( - 1))**( - 1)) * ln(Q*(1)/(Q_0))",
            "((1)/(((1)/(R_1)) + ((1)/(R_2)))) * C*ln((Q_0)/(Q))",
            "(1)/((1)/(R_1) + (1)/(R_2)) * (C) * ln((Q_0)/(Q))",
            "- ((1)/((1)/(R_1) + (1)/(R_2))) * C*(ln(Q) - ln(Q_0))",
            "- ((1)/((1)/(R_1) + (1)/(R_2)) * (C) * ln((Q)/(Q_0)))",
            "- ((1)/((1)/(R_1) + (1)/(R_2))) * C*ln((Q)/(Q_0))",
            "- (1)/(((1)/(R_1)) + ((1)/(R_2))) * C*ln((Q)/(Q_0))",
            "- (1)/((1)/(R_1) + (1)/(R_2)) * C*ln((Q)/(Q_0))",
            "((1)/(R_1) + (1)/(R_2))**( - 1) * C*(ln(Q_0) - ln(Q))",
            "(((1)/(R_1) + (1)/(R_2))**( - 1)) * C*ln((Q_0)/(Q))",
            "((1)/(R_1) + (1)/(R_2))**( - 1) * C*ln((Q_0)/(Q))",
            "- ((1)/(R_1) + (1)/(R_2))**( - 1) * C*ln((Q)/(Q_0))",
            "- ((1)/(R_1) + (1)/(R_2))**(-1) * C*ln((Q)/(Q_0))",
            "- (1)/(R_1 + R_2) * (R_1*R_2) * C*ln((Q)/(Q_0))",
            "C*((1)/(((1)/(R_1)) + (1)/(R_2))) * ln((Q_0)/(Q))",
            "- C*((1)/((1)/(R_1) + (1)/(R_2))) * ln((Q)/(Q_0))",
            "- C*((1)/(R_1) + (1)/(R_2))**( - 1) * ln((Q)/(Q_0))",
            "(C)/(((1)/(R_1)) + ((1)/(R_2))) * (ln(Q_0) - ln(Q))",
            "(C)/((1)/(R_1) + (1)/(R_2)) * ln((Q_0)/(Q))",
            "- ((C)/((1)/(R_1) + (1)/(R_2))) * (ln((Q)/(Q_0)))",
            "- ((C)/((1)/(R_1) + (1)/(R_2))) * ln((Q)/(Q_0))",
            "- (C)/(((1)/(R_1)) + ((1)/(R_2))) * ln((Q)/(Q_0))",
            "- (C)/((1)/(R_1) + (1)/(R_2)) * ln((Q)/(Q_0))",
            "(C*(ln(Q_0) - ln(Q)))/((1)/(R_1) + (1)/(R_2))",
            "(C*ln((Q_0)/(Q)))/(((1)/(R_1) + (1)/(R_2)))",
            "(C*ln((Q_0)/(Q)))/((1)/(R_1) + (1)/(R_2))",
            "C*(ln((Q_0)/(Q)))/(((1)/(R_1)) + ((1)/(R_2)))",
            "C*(ln((Q_0)/(Q)))/((1)/(R_1) + (1)/(R_2))",
            "C*ln((Q_0)/(Q)) * (((1)/(R_1) + (1)/(R_2))**( - 1))",
            "(C*ln((Q_0)/(Q)) * R_1*R_2)/(R_1 + R_2)",
            "C*ln((Q_0)/(Q)) * (R_1*R_2)/(R_1 + R_2)",
            "C*ln((Q_0)/(Q)) * R_1*(R_2)/(R_1 + R_2)",
            "- C*ln((Q)/(Q_0)) * (1)/((1)/(R_1) + (1)/(R_2))",
            "( - C*ln((Q)/(Q_0)))/((1)/(R_1) + (1)/(R_2))",
            "- (C*ln((Q)/(Q_0)))/((1)/(R_1) + (1)/(R_2))",
            "- C*(ln((Q)/(Q_0)))/((1)/(R_1) + (1)/(R_2))",
            "C*(R_1**( - 1) + R_2**( - 1))**( - 1) * ln((Q_0)/(Q))",
            "C*(R_1) * (R_2) * (ln(Q_0) - ln(Q))/(R_1 + R_2)",
            "(C*R_1*R_2*ln((Q_0)/(Q)))/(R_1 + R_2)",
            "C*R_1*R_2*(ln((Q_0)/(Q)))/(R_1 + R_2)",
            "(C*(R_1) * (R_2) * (ln((Q_0)/(Q))))/(R_1 + R_2)",
            "- (C*R_1*R_2*ln((Q)/(Q_0)))/(R_1 + R_2)",
            "C*((R_1*R_2)/(R_1 + R_2)) * (ln(Q_0) - ln(Q))",
            "((C*R_1*R_2)/(R_1 + R_2)) * (ln((Q_0)/(Q)))",
            "((C*R_1*R_2)/(R_1 + R_2)) * ln((Q_0)/(Q))",
            "(C*R_1*R_2)/(R_1 + R_2) * ln((Q_0)/(Q))",
            "C*((R_1*R_2)/(R_1 + R_2)) * ln((Q_0)/(Q))",
            "C*(R_1*R_2)/(R_1 + R_2) * ln((Q_0)/(Q))",
            "C*R_1*(R_2)/(R_1 + R_2) * ln((Q_0)/(Q))",
            "( - C*R_1*R_2)/(R_1 + R_2) * ln((Q)/(Q_0))",
            "- ((C*R_1*R_2)/(R_1 + R_2)) * ln((Q)/(Q_0))",
            "- (C*R_1*R_2)/(R_1 + R_2) * ln((Q)/(Q_0))",
            "- C*((R_1*R_2)/(R_1 + R_2)) * ln((Q)/(Q_0))",
            "- C*(R_1*R_2)/(R_1 + R_2) * ln((Q)/(Q_0))",
            "- C*(R_1*(R_2)/(R_1 + R_2)) * ln((Q)/(Q_0))",
            "- C*R_1*(R_2)/(R_1 + R_2) * ln((Q)/(Q_0))",
            "- (C*R_1*R_2)/(R_2 + R_1) * (ln(Q) - ln(Q_0))",
            "- (C*(R_2*R_1))/(R_1 + R_2) * ln((Q)/(Q_0))",
            "(ln(Q_0) - ln(Q))/((1)/(R_1) + (1)/(R_2)) * C",
            "(ln(Q_0) - ln(Q)) * C*((1)/(R_1) + (1)/(R_2))**( - 1)",
            "(ln(Q_0) - ln(Q)) * R_1*R_2*(C)/(R_1 + R_2)",
            "(ln(Q_0) - ln(Q)) * R_1*(R_2)/(R_1 + R_2) * C",
            "ln((Q_0)/(Q)) * (1)/((1)/(R_1) + (1)/(R_2)) * C",
            "ln((Q_0)/(Q)) * C*(1)/((1)/(R_1) + (1)/(R_2))",
            "ln((Q_0)/(Q)) * (C)/((1)/(R_1) + (1)/(R_2))",
            "ln((Q_0)/(Q)) * C*((1)/(R_1) + (1)/(R_2))**( - 1)",
            "ln((Q_0)/(Q)) * C*((1)/(R_1) + (1)/(R_2))**(-1)",
            "ln((Q_0)/(Q)) * (C) * ((1)/(R_2) + (1)/(R_1))**( - 1)",
            "(ln((Q_0)/(Q)) * C*R_1*R_2)/(R_1 + R_2)",
            "ln((Q_0)/(Q)) * (C*R_1*R_2)/((R_1 + R_2))",
            "ln((Q_0)/(Q)) * C*(R_1*R_2)/(R_1 + R_2)",
            "ln((Q_0)/(Q)) * C*R_1*(R_2)/(R_1 + R_2)",
            "(ln((Q_0)/(Q)) * R_1*R_2*C)/(R_1 + R_2)",
            "ln((Q_0)/(Q)) * ((R_1*R_2*C)/(R_1 + R_2))",
            "ln((Q_0)/(Q)) * (R_1*R_2*C)/(R_1 + R_2)",
            "ln((Q_0)/(Q)) * ((R_1*R_2)/(R_1 + R_2) * C)",
            "ln((Q_0)/(Q)) * ((R_1*R_2)/(R_1 + R_2)) * C",
            "ln((Q_0)/(Q)) * (R_1*R_2)/(R_1 + R_2) * C",
            "ln((Q_0)/(Q)) * R_1*(R_2)/(R_1 + R_2) * C",
            "(ln((Q_0)/(Q)) * ((R_2**( - 1) + R_1**( - 1))**( - 1)) * C)",
            "( - (ln(Q) - ln(Q_0))) * ((1)/(R_1) + (1)/(R_2))**( - 1) * C",
            "- ((ln(Q) - ln(Q_0)) * C*R_1*R_2)/(R_1 + R_2)",
            "- ((ln(Q) - ln(Q_0)) * R_1*R_2*C)/(R_1 + R_2)",
            "- ln((Q)/(Q_0)) * (((1)/((1)/(R_1) + (1)/(R_2))) * C)",
            "- ln((Q)/(Q_0)) * ((1)/((1)/(R_1) + (1)/(R_2))) * C",
            "- ln((Q)/(Q_0)) * (1)/((1)/(R_1) + (1)/(R_2)) * C",
            "- ln((Q)/(Q_0)) * (((1)/(R_1) + (1)/(R_2))**( - 1) * C)",
            "- ln((Q)/(Q_0)) * (((1)/(R_1) + (1)/(R_2))**(-1) * C)",
            "- ln((Q)/(Q_0)) * ((1)/(R_1) + (1)/(R_2))**( - 1) * C",
            "ln((Q)/(Q_0)) * ( - ((1)/(R_1) + (1)/(R_2))**( - 1)) * C",
            "ln((Q)/(Q_0)) * ((1)/(R_1) + (1)/(R_2))**( - 1) * ( - C)",
            "( - ln((Q)/(Q_0)) * C*((1)/((1)/(R_1) + (1)/(R_2))))",
            "- ln((Q)/(Q_0)) * C*((1)/((1)/(R_1) + (1)/(R_2)))",
            "- ln((Q)/(Q_0)) * C*(1)/(((1)/(R_1) + (1)/(R_2)))",
            "- ln((Q)/(Q_0)) * C*(1)/((1)/(R_1) + (1)/(R_2))",
            "- ln((Q)/(Q_0)) * ((C)/((1)/(R_1) + (1)/(R_2)))",
            "- ln((Q)/(Q_0)) * (C)/((1)/(R_1) + (1)/(R_2))",
            "- (ln((Q)/(Q_0)) * (C*((((1)/(R_1)) + ((1)/(R_2)))**( - 1))))",
            "- ln((Q)/(Q_0)) * (C*((1)/(R_1) + (1)/(R_2))**( - 1))",
            "- ln((Q)/(Q_0)) * C*((1)/(R_1) + (1)/(R_2))**( - 1)",
            "(ln((Q)/(Q_0)) * C*((1)/(R_1) + (1)/(R_2))**(-1)) * -1",
            "- (ln((Q)/(Q_0)) * C*((R_1*R_2)/(R_1 + R_2)))",
            "- ln((Q)/(Q_0)) * (C*R_1*R_2)/(R_1 + R_2)",
            "- ln((Q)/(Q_0)) * C*((R_1*R_2)/(R_1 + R_2))",
            "- ln((Q)/(Q_0)) * C*(R_1*R_2)/(R_1 + R_2)",
            "ln((Q)/(Q_0)) * ( - C) * (R_1*R_2)/(R_1 + R_2)",
            "- ln((Q)/(Q_0)) * C*(R_1*(R_2)/(R_1 + R_2))",
            "- (ln((Q)/(Q_0)) * C*((R_2*R_1)/(R_1 + R_2)))",
            "( - ln((Q)/(Q_0)) * R_1*R_2*C)/(R_1 + R_2)",
            "(ln((Q)/(Q_0)) * R_1*R_2*C)/( - (R_1 + R_2))",
            "- (ln((Q)/(Q_0)) * R_1*R_2*C)/(R_1 + R_2)",
            "- ln((Q)/(Q_0)) * R_1*R_2*(C)/(R_1 + R_2)",
            "- ln((Q)/(Q_0)) * ((R_1*R_2)/(R_1 + R_2)) * C",
            "- ln((Q)/(Q_0)) * (R_1*R_2)/(R_1 + R_2) * C",
            "ln((Q)/(Q_0)) * ( - ((R_1*R_2)/(R_1 + R_2)) * C)",
            "- ln((Q)/(Q_0)) * (R_1*(R_2)/(R_1 + R_2)) * C",
            "- ln((Q)/(Q_0)) * (R_2*R_1)/(R_1 + R_2) * C",
            "((R_1**( - 1) + R_2**( - 1))**( - 1)) * C*ln((Q_0)/(Q))",
            "- (((R_1**( - 1)) + (R_2**( - 1)))**( - 1)) * C*ln((Q)/(Q_0))",
            "- ((R_1**( - 1) + R_2**( - 1))**( - 1) * C) * ln((Q)/(Q_0))",
            "(R_1*R_2*C*(ln(Q_0) - ln(Q)))/(R_1 + R_2)",
            "(R_1*R_2*C*(ln((Q_0)/(Q))))/(R_1 + R_2)",
            "(R_1*R_2*C*ln((Q_0)/(Q)))/((R_1 + R_2))",
            "(R_1*R_2*C*ln((Q_0)/(Q)))/(R_1 + R_2)",
            "R_1*R_2*C*(ln((Q_0)/(Q)))/(R_1 + R_2)",
            "( - R_1*R_2*C*ln((Q)/(Q_0)))/(R_1 + R_2)",
            "- (R_1*R_2*C*ln((Q)/(Q_0)))/(R_1 + R_2)",
            "- R_1*R_2*C*(ln((Q)/(Q_0)))/(R_1 + R_2)",
            "- (R_1*R_2) * C*(ln((Q)/(Q_0)))/(R_1 + R_2)",
            "- (R_1*R_2*C*ln((Q)/(Q_0)))/((R_2 + R_1))",
            "(R_1*R_2*C)/(R_1 + R_2) * (ln(Q_0) - ln(Q))",
            "((R_1*R_2*C)/(R_1 + R_2)) * ln((Q_0)/(Q))",
            "(R_1*R_2*C)/(R_1 + R_2) * (ln((Q_0)/(Q)))",
            "(R_1*R_2*C)/(R_1 + R_2) * ln((Q_0)/(Q))",
            "R_1*R_2*(C)/(R_1 + R_2) * ln((Q_0)/(Q))",
            "( - R_1*R_2*C)/(R_1 + R_2) * ln((Q)/(Q_0))",
            "- (R_1*R_2*C)/(R_1 + R_2) * ln((Q)/(Q_0))",
            "- ((R_1*R_2*ln((Q)/(Q_0)) * C)/(R_1 + R_2))",
            "- (R_1*R_2*ln((Q)/(Q_0)) * C)/(R_1 + R_2)",
            "((R_1*R_2)/(R_1 + R_2)) * C*(ln(Q_0) - ln(Q))",
            "(R_1*R_2)/(R_1 + R_2) * C*(ln(Q_0) - ln(Q))",
            "((R_1*R_2)/(R_1 + R_2)) * C*ln((Q_0)/(Q))",
            "(R_1*R_2)/(R_1 + R_2) * C*ln((Q_0)/(Q))",
            "(R_1*(R_2)/(R_1 + R_2)) * C*ln((Q_0)/(Q))",
            "R_1*(R_2)/(R_1 + R_2) * C*ln((Q_0)/(Q))",
            "- (R_1*R_2)/(R_1 + R_2) * C*(ln(Q) - ln(Q_0))",
            "( - (R_1*R_2)/(R_1 + R_2)) * C*ln((Q)/(Q_0))",
            "( - R_1*R_2)/(R_1 + R_2) * C*ln((Q)/(Q_0))",
            "- ((R_1*R_2)/(R_1 + R_2)) * C*(ln((Q)/(Q_0)))",
            "- ((R_1*R_2)/(R_1 + R_2)) * C*ln((Q)/(Q_0))",
            "- (R_1*R_2)/(R_1 + R_2) * C*(ln((Q)/(Q_0)))",
            "- (R_1*R_2)/(R_1 + R_2) * C*ln((Q)/(Q_0))",
            "- (R_1*(R_2)/(R_1 + R_2) * C*ln((Q)/(Q_0)))",
            "- (R_1*(R_2)/(R_1 + R_2)) * C*(ln((Q)/(Q_0)))",
            "- (R_1*(R_2)/(R_1 + R_2)) * C*ln((Q)/(Q_0))",
            "- R_1*(R_2)/(R_1 + R_2) * C*ln((Q)/(Q_0))",
            "((R_1) * (R_2))/(R_1 + R_2) * ln((Q_0)/(Q)) * C",
            "- ((R_1*R_2)/(R_1 + R_2)) * ln((Q)/(Q_0)) * C",
            "- ((R_1*R_2)/(R_2 + R_1)) * C*ln((Q)/(Q_0))",
            "- (R_1*R_2)/(R_2 + R_1) * C*ln((Q)/(Q_0))",
            "- R_2*(R_1)/(R_1 + R_2) * C*ln((Q)/(Q_0))",
            "- ((R_2*R_1)/(R_2 + R_1)) * C*ln((Q)/(Q_0))",
            "- (R_2*R_1)/(R_2 + R_1) * C*ln((Q)/(Q_0))"
        ]
    },
    "t==((R_1*R_2)/(R_1 + R_2))*C*ln(((Q_0)/(Q)))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(C) * ln((Q_0)/(Q)) * ((1)/((1)/(R_1) + (1)/(R_2))) == t",
            "- ln((Q)/(Q_0)) * ((1)/(((1)/(R_1)) + ((1)/(R_2))) * C) == t",
            "- ln((Q)/(Q_0)) * (1)/((1)/(R_2) + (1)/(R_1)) * C == t",
            "- (ln((Q)/(Q_0)) * ((1)/(R_1) + (1)/(R_2))**( - 1) * C) == t",
            "t == ((1)/((1)/(R_1) + (1)/(R_2))) * C*ln((Q_0)/(Q))",
            "t == (1)/((1)/(R_1) + (1)/(R_2)) * C*ln((Q_0)/(Q))",
            "t ==  - (1)/((1)/(R_1) + (1)/(R_2)) * C*ln((Q)/(Q_0))",
            "t == ((1)/(R_1) + (1)/(R_2))**( - 1) * C*ln((Q_0)/(Q))",
            "t ==  - ((1)/(R_1) + (1)/(R_2))**( - 1) * C*ln((Q)/(Q_0))",
            "t ==  - C*((1)/(R_1) + (1)/(R_2))**( - 1) * (ln(Q) - ln(Q_0))",
            "t == (C*ln((Q_0)/(Q)))/(((1)/(R_1)) + ((1)/(R_2)))",
            "t == (C*ln((Q_0)/(Q)))/((1)/(R_1) + (1)/(R_2))",
            "t ==  - C*(ln((Q)/(Q_0)))/((1)/(R_1) + (1)/(R_2))",
            "t ==  - C*ln((Q)/(Q_0)) * ((1)/(R_1) + (1)/(R_2))**( - 1)",
            "t == C*(R_1) * (R_2) * (ln(Q_0) - ln(Q))/(R_1 + R_2)",
            "t == ( - C*R_1*R_2*ln((Q)/(Q_0)))/(R_1 + R_2)",
            "t == (C*R_1*R_2)/(R_1 + R_2) * ln((Q_0)/(Q))",
            "t == C*((R_1*R_2)/(R_1 + R_2)) * ln((Q_0)/(Q))",
            "t ==  - C*((R_1*R_2)/(R_1 + R_2)) * ln((Q)/(Q_0))",
            "t == ln((Q_0)/(Q)) * ((1)/((1)/(R_1) + (1)/(R_2))) * C",
            "t == ln((Q_0)/(Q)) * (1)/((1)/(R_1) + (1)/(R_2)) * C",
            "t == ln((Q_0)/(Q)) * (((1)/(R_1) + (1)/(R_2))**( - 1) * C)",
            "t == (ln((Q_0)/(Q)) * ((R_2**( - 1) + R_1**( - 1))**( - 1)) * C)",
            "t ==  - ln((Q)/(Q_0)) * ((1)/(R_1) + (1)/(R_2))**( - 1) * C",
            "t ==  - ln((Q)/(Q_0)) * C*((1)/(R_1) + (1)/(R_2))**( - 1)",
            "t ==  - ln(((Q)/(Q_0))**(C*(R_1*R_2)/(R_1 + R_2)))",
            "t ==  - ln((Q)/(Q_0)) * (C*(R_1*R_2)/(R_1 + R_2))",
            "t == (R_1**(-1) + R_2**(-1))**(-1) * C*ln((Q_0)/(Q))",
            "t ==  - R_1*C*R_2*(ln((Q)/(Q_0)))/(R_1 + R_2)",
            "t == (R_1*R_2*C*ln((Q_0)/(Q)))/(R_1 + R_2)",
            "t ==  - ((R_1*R_2) * C*ln((Q)/(Q_0)))/(R_1 + R_2)",
            "t == ((R_1*R_2*C)/(R_1 + R_2)) * ln((Q_0)/(Q))",
            "t == (R_1*R_2)/(R_1 + R_2) * C*ln((Q_0)/(Q))",
            "t == (R_1*(R_2)/(R_1 + R_2)) * C*ln((Q_0)/(Q))",
            "t ==  - ((R_1*R_2)/(R_1 + R_2)) * C*ln((Q)/(Q_0))",
            "t ==  - (R_1*R_2)/(R_1 + R_2) * C*ln((Q)/(Q_0))"
        ]
    },
    "((1)/(2))*(T_2 + T_1) (l_2 - l_1)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(1)/(2) * (l_2 - l_1) * (T_1 + T_2)",
            "(1)/(2) * (l_2 - l_1) * (T_2 + T_1)",
            "((1)/(2) * T_1 + (1)/(2) * T_2) * (l_2 - l_1)",
            "- (1)/(2) * (T_1 + T_2) * (l_1 - l_2)",
            "((1)/(2) * (T_1 + T_2)) * (l_2 - l_1)",
            "(1)/(2) * ((T_1 + T_2) * (l_2 - l_1))",
            "(1)/(2) * (T_1 + T_2) * (l_2 - l_1)",
            "(1)/(2) * (T_2*l_2 - T_1*l_1 + (T_1*(T_2*l_1 - T_1*l_2) - T_2*(T_2*l_1 - T_1*l_2))/(T_2 - T_1))",
            "(1)/(2) * (T_2*l_2 + T_1*l_2 - T_1*l_1 - T_2*l_1)",
            "(1)/(2) * (T_2*(l_2 - ( - T_1*l_2 + T_2*l_1)/(T_2 - T_1)) - T_1*(l_1 - ( - T_1*l_2 + T_2*l_1)/(T_2 - T_1)))",
            "((1)/(2)) * ((T_2) + T_1) * (l_2 - l_1)",
            "((1)/(2)) * (T_2 + T_1) * (l_2 - l_1)",
            "(1)/(2) * ((T_2 + T_1) * (l_2 - l_1))",
            "(1)/(2) * (T_2 + T_1) * (l_2 - l_1)",
            "(1)/(2) * ((T_2 + T_1)/(l_2 - l_1)) * (l_2 - l_1)**(2)",
            "(1)/(2) * (T_2 - T_1) * (l_2 - l_1) + (l_2 - l_1) * (T_1)",
            "(1)/(2) * (T_2 - T_1) * (l_2 - l_1) + T_1*(l_2 - l_1)",
            "(l_1 - l_2)/(2*(T_1 - T_2)) * (T_2**(2) - T_1**(2))",
            "( - l_1*T_1 - l_1*T_2 + l_2*T_1 + l_2*T_2)/(2)",
            "(l_2 - l_1)/(2) * (T_1 + T_2)",
            "(l_2 - l_1) * T_1 + ((l_2 - l_1) * (T_2 - T_1))/(2)",
            "(l_2 - l_1) * ((T_1 + T_2)/(2))",
            "(l_2 - l_1) * (T_1 + T_2)/(2)",
            "(l_2 - l_1) * T_1 + ((T_2 - T_1) * (l_2 - l_1))/(2)",
            "(l_2 - l_1) * T_2 - (1)/(2) * (l_2 - l_1) * (T_2 - T_1)",
            "((l_2 - l_1) * (T_2 + T_1))/(2)",
            "(l_2 - l_1) * ((T_2 + T_1)/(2))",
            "(l_2 - l_1) * (T_2 + T_1)/(2)",
            "(l_2 - l_1) * ((T_2 - T_1)/(2) + T_1)",
            "(l_2*T_2 - l_1*T_1 + T_1*l_2 - T_2*l_1)/(2)",
            "T_1*(l_2 - l_1) + (1)/(2) * (l_2 - l_1) * (T_2 - T_1)",
            "T_1*(l_2 - l_1) + (1)/(2) * (T_2 - T_1) * (l_2 - l_1)",
            "T_1*(l_2 - l_1) + (l_2 - l_1) * (T_2 - T_1)/(2)",
            "T_1*(l_2 - l_1) + ((T_2 - T_1) * (l_2 - l_1))/(2)",
            "(((T_1) + (T_2))/(2)) * ((l_2) - (l_1))",
            "((T_1 + T_2)/(2)) * (l_2 - l_1)",
            "(T_1 + T_2)/(2) * (l_2 - l_1)",
            "(T_1 - T_2)/( - 2) * (l_2 - l_1 + (2*T_1*(l_1 - l_2))/(T_1 - T_2))",
            "(T_1 + T_2) * (l_2 - l_1) * (1)/(2)",
            "((T_1 + T_2) * (l_2 - l_1))/(2)",
            "(T_1 + T_2) * (l_2 - l_1)/(2)",
            "(T_1 + ((T_2 - T_1))/(2)) * (l_2 - l_1)",
            "(T_1 + (T_2 - T_1)/(2)) * (l_2 - l_1)",
            "(T_2*l_2 - T_1*l_1 + T_1*l_2 - T_2*l_1)/(2)",
            "((T_2 + T_1))/(2) * (l_2 - l_1)",
            "((T_2 + T_1)/(2)) * (l_2 - l_1)",
            "(T_2 + T_1)/(2) * (l_2 - l_1)",
            "(((T_2 - T_1)/(2)) + T_1) * (l_2 - l_1)",
            "((T_2 + T_1) * ( - l_1 + l_2))/(2)",
            "((T_2 + T_1) * (l_2 - l_1))/(2)",
            "(T_2 + T_1) * (l_2 - l_1)/(2)",
            "((T_2 - T_1) * (l_2 - l_1))/(2) + T_1*(l_2 - l_1)"
        ]
    },
    "N*B*A*omega*sin(omega*t)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "A*N*B*omega*sin(omega*t)",
            "(B*A*N*omega) * (sin(omega*t))",
            "B*A*N*(omega) * (sin((omega) * (t)))",
            "B*A*N*(omega) * (sin(omega*(t)))",
            "B*A*N*(omega) * sin((omega) * t)",
            "B*A*N*(omega) * sin(omega*t)",
            "B*A*N*omega*sin(omega*t)",
            "B*A*N*sin(omega*t) * omega",
            "B*A*omega*N*sin(omega*t)",
            "B*N*A*(omega) * sin(omega*t)",
            "B*N*A*omega*sin(omega*t)",
            "N*A*B*(omega) * sin(omega*t)",
            "N*A*B*omega*sin(omega*t)",
            "N*A*B*(omega*sin(t*(omega)))",
            "N*A*B*omega*sin(t*omega)",
            "N*A*B*sin(omega*t) * omega",
            "(N*B*A*omega) * sin(omega*t)",
            "(N*B*A*omega*sin(omega*t))",
            "N*B*A*(omega) * (sin(omega*t))",
            "N*B*A*(omega) * sin((omega) * t)",
            "N*B*A*(omega) * sin(omega*(t))",
            "N*B*A*(omega) * sin(omega*t)",
            "N*B*A*(omega*(sin(omega*(t))))",
            "N*B*A*omega*sin(omega*t)",
            "N*B*A*omega*sin(t*omega)",
            "N*B*A*(sin(omega*t)) * omega",
            "N*B*A*sin(omega*t) * omega",
            "N*B*omega*A*sin(omega*t)",
            "(N*B*omega*sin(omega*t) * A)",
            "N*B*omega*sin(omega*t) * A",
            "(omega*A*B*N*sin(omega*(t)))",
            "omega*A*B*N*sin(omega*t)",
            "(omega) * B*A*N*sin(omega*t)",
            "(omega*B*A*N*sin(omega*t))",
            "omega*B*A*N*sin(omega*t)",
            "omega*B*N*A*sin(omega*t)",
            "omega*N*A*B*sin(omega*t)",
            "(omega) * N*B*A*(sin((omega) * t))",
            "(omega) * N*B*A*sin((omega) * (t))",
            "(omega*N*B*A) * sin(omega*t)",
            "omega*N*B*A*(sin(omega*t))",
            "omega*N*B*A*sin(omega*t)"
        ]
    },
    "e == N*B*A*omega*sin(omega*t)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "e == B*A*N*omega*sin(omega*t)",
            "e == B*N*A*omega*sin(t*omega)",
            "e == N*B*A*(omega) * sin(omega*t)",
            "e == N*B*A*omega*sin(omega*t)",
            "e == N*B*omega*A*sin(omega*t)",
            "e == N*omega*A*B*sin(omega*t)",
            "e == omega*A*N*B*sin(omega*t)",
            "e == omega*B*A*N*sin(omega*t)",
            "e == omega*N*B*A*sin(t*omega)"
        ]
    },
    "((M)/(2) + (m*x)/(L)) * g*tan(theta)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "((1)/(2)) * g*M*tan(theta) + ((x)/(L)) * g*m*tan(theta)",
            "((1)/(2*L)) * g*((sin(theta))/(cos(theta))) * (2*m*x + M*L)",
            "((1)/(2*L)) * g*tan(theta) * (2*m*x + M*L)",
            "((1)/(2) * L*M*g*sin(theta) + x*m*g*sin(theta))/(L*cos(theta))",
            "((1)/(2) * M*g*L + m*g*x)/(L*cot(theta))",
            "((1)/(2) * M*g*L*sin(theta) + m*g*x*sin(theta))/(L*cos(theta))",
            "((1)/(2) * M*g*L*tan(theta) + m*g*x*tan(theta))/(L)",
            "((1)/(2) * M*g + m*g*(x)/(L)) * tan(theta)",
            "(1)/(2) * M*g*tan(theta) + (m*g*x)/(L) * tan(theta)",
            "(1)/(2) * M*g*tan(theta) + m*g*(x)/(L) * tan(theta)",
            "(1)/(2) * M*g*tan(theta) + (m*g*x*tan(theta))/(L)",
            "(1)/(2) * M*g*tan(theta) + ((x)/(L)) * m*g*tan(theta)",
            "(1)/(2) * M*g*tan(theta) + (x)/(L) * m*g*tan(theta)",
            "(((1)/(2) * M + m) * g - (L - x)/(L) * m*g) * tan(theta)",
            "((1)/(2) * M + (m*x)/(L)) * g*tan(theta)",
            "((1)/(2) * M + m*(x)/(L)) * g*tan(theta)",
            "((1)/(2) * M + (x*m)/(L)) * tan(theta) * g",
            "(1)/(2) * tan(theta) * M*g + (x)/(L) * tan(theta) * m*g",
            "(1)/(L) * ((1)/(2) * M*g*L*tan(theta) + m*g*x*tan(theta))",
            "(1)/(L*cos(theta)) * (M*g*(L)/(2) * sin(theta) + m*g*x*sin(theta))",
            "(((1)/(L)) * (m*g*x) + ((1)/(2)) * (M*g)) * (tan(theta))",
            "(1)/(L) * tan(theta) * (m*g*x + (1)/(2) * M*g*L)",
            "(2*m*x + M*L)/(2*L) * g*tan(theta)",
            "(g)/(2*L) * (2*m*x + M*L) * tan(theta)",
            "(g)/(L) * tan(theta) * ((1)/(2) * M*L + x*m)",
            "(g)/(L) * tan(theta) * (M*(L)/(2) + m*x)",
            "(g)/(L) * tan(theta) * (m*x + M*(L)/(2))",
            "(g)/(L) * tan(theta) * (x*m + (1)/(2) * L*M)",
            "(g)/(L) * tan(theta) * (x*m + (L)/(2) * M)",
            "(g)/(L) * tan(theta) * (x*m + L*(M)/(2))",
            "((g*M)/(2) + (g*m*x)/(L)) * tan(theta)",
            "g*((M)/(2) + (m*x)/(L)) * tan(theta)",
            "(g*(M + m) * L*sin(theta) - ((1)/(2)) * M*g*L*sin(theta) - m*g*(L - x) * sin(theta))/(L*cos(theta))",
            "g*M*(tan(theta))/(2) + g*m*tan(theta) * (x)/(L)",
            "(g*sin(theta) * ((1)/(2) * M*L + m*x))/(cos(theta) * L)",
            "(g*sin(theta))/(L*cos(theta)) * ((M*L)/(2) + x*m)",
            "(g*sin(theta) * (L*M + 2*m*x))/(2*L*cos(theta))",
            "(g*sin(theta)) * (m*x + (1)/(2) * M*L)/(L*cos(theta))",
            "g*sin(theta) * (x*m + L*(M)/(2))/(L*cos(theta))",
            "g*tan(theta) * ((1)/(2) * M*L + m*x)/(L)",
            "g*tan(theta) * ((1)/(2) * M + m*(x)/(L))",
            "g*tan(theta) * (((1)/(2) * M) + (x)/(L) * m)",
            "g*tan(theta) * ((1)/(2) * M + (x)/(L) * m)",
            "(g*(tan(theta))/(2*L)) * (M*L + 2*m*x)",
            "(g*tan(theta) * (2*m*x + M*L))/(2*L)",
            "(g*tan(theta))/(L) * ((1)/(2) * M*L + m*x)",
            "g*(tan(theta))/(L) * ((L)/(2) * M + m*x)",
            "g*(tan(theta))/(L) * (L*(M)/(2) + m*x)",
            "(g*tan(theta) * (L*(M)/(2) + x*m))/(L)",
            "g*(tan(theta))/(L) * (M*(L)/(2) + m*x)",
            "g*(tan(theta))/(L) * (m*x + M*(L)/(2))",
            "(g*tan(theta))/(L) * (x*m + (M*L)/(2))",
            "(g) * (tan(theta)) * ((M)/(2) + m*(x)/(L))",
            "g*tan(theta) * (((M)/(2)) + ((m*x)/(L)))",
            "g*tan(theta) * ((M)/(2) + (m*x)/(L))",
            "g*tan(theta) * ((M)/(2) + m*(x)/(L))",
            "g*tan(theta) * ((M)/(2) + (x)/(L) * m)",
            "g*(tan(theta)) * ((M)/(2) + x*(m)/(L))",
            "g*tan(theta) * ((M)/(2) + (x*m)/(L))",
            "g*tan(theta) * ((M)/(2) + x*(m)/(L))",
            "g*(tan(theta)) * ((M*L + 2*m*x)/(2*L))",
            "(g) * (tan(theta)) * (((M*L)/(2) + m*x)/(L))",
            "g*tan(theta) * (M + m) - g*(tan(theta))/(L) * ((L - x) * m + (L)/(2) * M)",
            "(g*tan(theta) * (m*x + (1)/(2) * M*L))/(L)",
            "(g) * tan(theta) * ((m*x)/(L) + (M)/(2))",
            "g*tan(theta) * ((m*x)/(L) + (M)/(2))",
            "g*tan(theta) * (m*(x)/(L) + (M)/(2))",
            "(g*tan(theta) * (m*x + M*((L)/(2))))/(L)",
            "g*tan(theta) * (m*x + (M*L)/(2))/(L)",
            "g*tan(theta) * ((x)/(L) * m + (1)/(2) * M)",
            "(g*tan(theta) * (x*m + (1)/(2) * L*M))/(L)",
            "g*(tan(theta)) * ((x*m + (1)/(2) * L*M)/(L))",
            "g*tan(theta) * (((x*m)/(L)) + (M)/(2))",
            "g*tan(theta) * ((x*m)/(L) + (M)/(2))",
            "g*tan(theta) * (x*(m)/(L) + (M)/(2))",
            "(g*tan(theta) * (x*m + (L*M)/(2)))/(L)",
            "((L)/(2) * M*g + x*m*g)/(L) * tan(theta)",
            "(((L)/(2) * M*g + x*m*g) * tan(theta))/(L)",
            "(((L)/(2) * M*sin(theta) + m*x*sin(theta))/(L*cos(theta))) * g",
            "(L*M*g*sin(theta) + 2*x*m*g*sin(theta))/(2*L*cos(theta))",
            "(L*sin(theta) * M*g + 2*x*sin(theta) * m*g)/(2*L*cos(theta))",
            "(M)/(2) * g*tan(theta) + m*g*(x)/(L) * tan(theta)",
            "(((M)/(2)) + (m*(x)/(L))) * g*tan(theta)",
            "(((M)/(2)) + (m*x)/(L)) * g*tan(theta)",
            "((M)/(2) + (m*x)/(L)) * g*tan(theta)",
            "((M)/(2) + m*(x)/(L)) * g*(tan(theta))",
            "((M)/(2) + m*(x)/(L)) * g*tan(theta)",
            "(((M)/(2)) + (m*(x)/(L))) * tan(theta) * g",
            "((M)/(2) + m*(x)/(L)) * tan(theta) * g",
            "((M)/(2) + (x)/(L) * m) * g*tan(theta)",
            "((M)/(2) + (x*m)/(L)) * g*tan(theta)",
            "((M*g)/(2) + (m*g*x)/(L)) * tan(theta)",
            "(M*(g)/(2) + m*g*(x)/(L)) * (tan(theta))",
            "M*(g)/(2) * (sin(theta))/(cos(theta)) + m*g*(x)/(L) * (sin(theta))/(cos(theta))",
            "(M*g)/(2) * tan(theta) + (m*g*x)/(L) * tan(theta)",
            "M*(g)/(2) * tan(theta) + m*g*(x)/(L) * tan(theta)",
            "M*(g)/(2) * tan(theta) + m*g*x*(tan(theta))/(L)",
            "(M*g)/(2) * tan(theta) + (m*x*g)/(L) * tan(theta)",
            "(M*(g)/(2) + x*m*(g)/(L)) * (tan(theta))",
            "(M*g*(L)/(2) + m*g*x)/(L) * tan(theta)",
            "(M*g*(L)/(2) + m*g*x) * (tan(theta))/(L)",
            "(M*g*L*sin(theta) + 2*m*g*x*sin(theta))/(2*L*cos(theta))",
            "(M*g*sin(theta) * (L)/(2) + m*g*sin(theta) * x)/(L*cos(theta))",
            "(m*g*sin(theta) * x + M*g*sin(theta) * (L)/(2))/(cos(theta) * L)",
            "(M*g*tan(theta))/(2) + (m*g*tan(theta) * x)/(L)",
            "(M*g*tan(theta))/(2) + (m*g*x*tan(theta))/(L)",
            "M*g*(tan(theta))/(2) + m*g*x*(tan(theta))/(L)",
            "((M*g*tan(theta))/(2) + (x*m*g*tan(theta))/(L))",
            "(M*g*tan(theta))/(2) + (x*m*g*tan(theta))/(L)",
            "(M*g*tan(theta) * (L)/(2) + m*g*tan(theta) * x)/(L)",
            "(m*g*x + (1)/(2) * M*g*L)/(L) * tan(theta)",
            "(m*g*x + (1)/(2) * M*L*g)/(L) * tan(theta)",
            "((m*g*x)/(L) + (1)/(2) * M*g) * tan(theta)",
            "((m*g*x)/(L) + (M*g)/(2)) * tan(theta)",
            "m*g*(x)/(L) * tan(theta) + (1)/(2) * M*g*tan(theta)",
            "(m*g*x)/(L) * tan(theta) + (M*g)/(2) * tan(theta)",
            "m*g*(x)/(L) * tan(theta) + M*(g)/(2) * tan(theta)",
            "(m*g*x*sin(theta) + (1)/(2) * M*g*L*sin(theta))/(L*cos(theta))",
            "(m*g*x*sin(theta) + (L)/(2) * M*g*sin(theta))/(L*cos(theta))",
            "(m*g*x*sin(theta) + M*g*((L)/(2)) * sin(theta))/(L*cos(theta))",
            "(m*g*x*sin(theta) + M*g*(L)/(2) * sin(theta))/(L*cos(theta))",
            "m*g*x*(tan(theta))/(L) + M*(g)/(2) * tan(theta)",
            "(m*g*x*tan(theta))/(L) + (M*g*tan(theta))/(2)",
            "m*g*x*(tan(theta))/(L) + M*g*(tan(theta))/(2)",
            "(M*(L)/(2) + m*x) * (g)/(L) * tan(theta)",
            "(((M*L)/(2) + m*x) * g*sin(theta))/(L*cos(theta))",
            "(((M*L)/(2) + m*x) * g*tan(theta))/(L)",
            "((M + m) * g*L - m*g*(L - x) - M*g*(L)/(2)) * (tan(theta))/(L)",
            "((M + m) * g*sin(theta))/(2*cos(theta)) - (m*g*sin(theta) * ((L)/(2) - x))/(L*cos(theta))",
            "(M + m) * g*tan(theta) - m*g*(L - x)/(L) * tan(theta) - (1)/(2) * M*g*tan(theta)",
            "(M*(tan(theta))/(2) + x*m*(tan(theta))/(L)) * g",
            "((m*x)/(L) + (M)/(2)) * g*tan(theta)",
            "(m*(x)/(L) + (M)/(2)) * g*tan(theta)",
            "((m*x + M*(L)/(2)) * g*sin(theta))/(L*cos(theta))",
            "((m*x + (M*L)/(2)) * g*tan(theta))/(L)",
            "(m*x + M*(L)/(2)) * g*(tan(theta))/(L)",
            "(m*x*(tan(theta))/(L) + (1)/(2) * M*tan(theta)) * g",
            "(sin(theta) * (M*L*g)/(2) + sin(theta) * (m*x*g))/(cos(theta) * (L))",
            "tan(theta) * ((1)/(2) * M*g + (x*m*g)/(L))",
            "tan(theta) * (g)/(L) * ((L*M)/(2) + x*m)",
            "(tan(theta) * g)/(L) * ((M*L)/(2) + m*x)",
            "(tan(theta) * g)/(L) * (x*m + M*(L)/(2))",
            "tan(theta) * g*((M)/(2) + (m*x)/(L))",
            "tan(theta) * g*((M)/(2) + m*(x)/(L))",
            "tan(theta) * g*(M*(L)/(2) + m*x)/(L)",
            "tan(theta) * g*(x*m + (1)/(2) * L*M)/(L)",
            "tan(theta) * g*(x*(m)/(L) + (1)/(2) * M)",
            "(tan(theta))/(L) * (((L)/(2)) * M*g + x*m*g)",
            "(tan(theta))/(L) * (m*g*x + (M*g*L)/(2))",
            "((tan(theta))/(L)) * (x*m*g + M*g*(L)/(2))",
            "(tan(theta))/(L) * (x*m*g + M*g*(L)/(2))",
            "(tan(theta) * M*g)/(2) + (m*g*tan(theta) * x)/(L)",
            "tan(theta) * (M*(g)/(2) + m*g*(x)/(L))",
            "tan(theta) * (M*(g)/(2) + x*m*(g)/(L))",
            "tan(theta) * (m*g*(x)/(L) + (1)/(2) * M*g)",
            "tan(theta) * ((m*g*x)/(L) + (M*g)/(2))",
            "tan(theta) * ((x*m*g)/(L) + M*(g)/(2))",
            "tan(theta) * (x*m*(g)/(L) + M*(g)/(2))",
            "(x)/(L) * m*g*tan(theta) + (1)/(2) * M*g*tan(theta)",
            "(x)/(L) * m*g*tan(theta) + (M*g)/(2) * tan(theta)",
            "(x*m*g + (1)/(2) * L*M*g) * (tan(theta))/(L)",
            "(x*m*g)/(L) * tan(theta) + (M*g)/(2) * tan(theta)",
            "(x*m*g*sin(theta) + (1)/(2) * L*M*g*sin(theta))/(L*cos(theta))",
            "(x*m*g*sin(theta) + M*g*sin(theta) * (L)/(2))/(L*cos(theta))",
            "(x*m*g*tan(theta))/(L) + (M*g*tan(theta))/(2)",
            "((x*m)/(L) + (M)/(2)) * g*tan(theta)"
        ]
    },
    "2*a*((1)/(sqrt(10)) + (1)/(sqrt(2)))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "((10**((1)/(2)) + 5*(2**((1)/(2))))/(5)) * a",
            "((10**((1)/(2)) + 5*2**((1)/(2)))/(5)) * a",
            "((1)/(10**((1)/(2))) + (1)/(2**((1)/(2)))) * 2*a",
            "(1)/(5) * (5*sqrt(2) + sqrt(10)) * a",
            "(1)/(5) * a*(5*sqrt(2) + sqrt(10))",
            "((1)/(sqrt(10)) + (1)/(sqrt(2))) * 2*a",
            "((1)/(sqrt(2)) + (1)/(sqrt(10))) * (2*a)",
            "((1)/(sqrt(2)) + (1)/(sqrt(10))) * 2*a",
            "2*((1)/(10**((1)/(2))) + (1)/((2)**((1)/(2)))) * a",
            "2*((1)/(sqrt(10)) + (1)/(sqrt(2))) * a",
            "2*((1)/(sqrt(10)) * a + (1)/(sqrt(2)) * a)",
            "(2*a)/(10**((1)/(2))) + (2*a)/(2**((1)/(2)))",
            "2*(a)/(10**((1)/(2))) + 2*(a)/(2**((1)/(2)))",
            "2*a*((1)/(10**((1)/(2))) + (1)/(2**((1)/(2))))",
            "2*a*((1)/(2**((1)/(2))) + (1)/(10**((1)/(2))))",
            "(2*a) * ((1)/(sqrt(10)) + (1)/(sqrt(2)))",
            "2*a*(((1)/(sqrt(10))) + ((1)/(sqrt(2))))",
            "2*a*((1)/(sqrt(10)) + (1)/(sqrt(2)))",
            "2*a*((1)/(sqrt(10))) + 2*a*((1)/(sqrt(2)))",
            "2*a*((1)/(sqrt(10)) + (sqrt(2))/(2))",
            "2*a*(((1)/(sqrt(2))) + (1)/(sqrt(10)))",
            "2*a*((1)/(sqrt(2)) + ((1)/(sqrt(10))))",
            "2*a*((1)/(sqrt(2)) + (1)/(sqrt(10)))",
            "2*a*((1)/(sqrt(2)) + cos(arctan(3)))",
            "(2*a*(1 + sqrt(5)))/(sqrt(10))",
            "2*a*(1 + sqrt(5))/(sqrt(10))",
            "2*(a)/(2**((1)/(2))) + 2*(a)/(10**((1)/(2)))",
            "2*a*((5*sqrt(2) + sqrt(10))/(10))",
            "2*a*(cos(arctan(3)) + (1)/(sqrt(2)))",
            "2*a*cos(arctan(3)) + 2*a*cos(arctan(1))",
            "2*(a*cos(arctan(3)) + a*cos(arctan(1)))",
            "2*a*cos(arctan(3)) + sqrt(2) * a",
            "2*a*sin(arctan((1)/(3))) + a*sqrt(2)",
            "2*a*(sin(arctan((1)/(3))) + (sqrt(2))/(2))",
            "2*a*((sqrt(10))/(10) + (sqrt(2))/(2))",
            "(2*a)/(sqrt(10)) + (2*a)/(sqrt(2))",
            "2*(a)/(sqrt(10)) + 2*(a)/(sqrt(2))",
            "(2*a*(sqrt(10) + 5*sqrt(2)))/(10)",
            "(2*a)/(sqrt(10)) + a*sqrt(2)",
            "2*((a)/(sqrt(10)) + (a)/(sqrt(2)))",
            "2*(a)/(sqrt(10)) + a*sqrt(2)",
            "2*a*((sqrt(2))/(2) + (1)/(sqrt(10)))",
            "(2*a)/(sqrt(2)) + (2*a)/(sqrt(10))",
            "(2*a*sqrt(2) + 2*a*sqrt(10))/(sqrt(20))",
            "2*a*((sqrt(2))/(2) + (sqrt(10))/(10))",
            "2*((a)/(sqrt(2)) + (a)/(sqrt(10)))",
            "(2*a*(sqrt(5) + 1))/(sqrt(10))",
            "(2*(sqrt(10))/(10) + sqrt(2)) * a",
            "((2*sqrt(10) + 10*sqrt(2)) * a)/(10)",
            "((2)/(sqrt(10)) + (2)/(sqrt(2))) * a",
            "2*(sqrt(10) + 5*sqrt(2))/(10) * a",
            "(2*sqrt(10) * a + 10*sqrt(2) * a)/(10)",
            "((2)/(sqrt(2)) + (2)/(sqrt(10))) * a",
            "2*sqrt((a**(2))/(10)) + 2*sqrt((a**(2))/(2))",
            "(5*sqrt(2) * a + sqrt(10) * a)/(5)",
            "((5*sqrt(2) + sqrt(10))/(5)) * a",
            "a*((10**((1)/(2)))/(5) + 2**((1)/(2)))",
            "a*((10)**((1)/(2)) + 5*(2)**((1)/(2)))/(5)",
            "a*((10**((1)/(2)) + 5*(2**((1)/(2))))/(5))",
            "a*((10**((1)/(2))) + 5*(2**((1)/(2))))/(5)",
            "a*(10**((1)/(2)) + 5*(2)**((1)/(2)))/(5)",
            "a*((1)/(5) * (sqrt(10) + 5*sqrt(2)))",
            "a*((2)/((10)**((1)/(2))) + (2)/((2)**((1)/(2))))",
            "a*((2)**((1)/(2)) + ((10)**((1)/(2)))/(5))",
            "a*(2*sin(arctan((1)/(3))) + sqrt(2))",
            "a*((2)/(sqrt(10)) + (2)/(sqrt(2)))",
            "a*((2)/(sqrt(10)) + sqrt(2))",
            "a*((2)/(sqrt(2)) + (2)/(sqrt(10)))",
            "(a)/(5) * (10**((1)/(2)) + 5*2**((1)/(2)))",
            "(a)/(5) * (5*sqrt(2) + sqrt(10))",
            "((a)/(5)) * (sqrt(10) + 5*sqrt(2))",
            "(a)/(5) * (sqrt(10) + 5*sqrt(2))",
            "a*(((sqrt(10))/(5)) + (5*(sqrt(2))/(5)))",
            "(a*sqrt(10))/(5) + a*sqrt(2)",
            "(a*sqrt(10) + 5*a*sqrt(2))/(5)",
            "a*((sqrt(10))/(5) + sqrt(2))",
            "(a*(sqrt(10) + 5*sqrt(2)))/(5)",
            "a*(((sqrt(10) + 5*sqrt(2)))/(5))",
            "a*((sqrt(10) + 5*sqrt(2))/(5))",
            "a*(sqrt(10) + 5*sqrt(2))/(5)",
            "((a)/(sqrt(10)) + (a)/(sqrt(2))) * 2",
            "a*sqrt(2) + 2*(a)/(sqrt(10))",
            "a*(sqrt(2)) + (2*a*(sqrt(10)))/(10)",
            "a*(sqrt(2) + (2)/(sqrt(10)))",
            "a*(sqrt((2)/(5)) + sqrt(2))",
            "a*(sqrt(2) + (sqrt(10))/(5))",
            "(a*(sqrt(2) + sqrt(10)))/(sqrt(5))",
            "(cos(arctan(3)) * a + cos(arctan(1)) * a) * (2)",
            "((sqrt(10) + 5*sqrt(2))/(5)) * a",
            "(sqrt(10) + 5*sqrt(2))/(5) * a",
            "(((sqrt(10))/(5)) + sqrt(2)) * a",
            "((sqrt(10))/(5) + sqrt(2)) * a",
            "((sqrt(10) + 5*sqrt(2)) * a)/(5)",
            "(sqrt(10) + 5*sqrt(2)) * (a)/(5)",
            "sqrt(10) * (a)/(5) + a*sqrt(2)",
            "(sqrt(10) * a + 5*sqrt(2) * a)/(5)",
            "(sqrt(10) + sqrt(2)) * (a)/(sqrt(5))",
            "(sqrt(2) + (1)/(5) * sqrt(10)) * a",
            "sqrt(2) * ((1)/(sqrt(5)) + 1) * a",
            "((sqrt(2))/(2) + (sqrt(10))/(10)) * 2*a",
            "(sqrt(2) + (2*sqrt(10))/(10)) * a",
            "(sqrt(2) + (2)/(sqrt(10))) * a",
            "((sqrt(2))/(5)) * (a) * (5 + sqrt(5))",
            "sqrt(2) * a*(1 + (1)/(sqrt(5)))",
            "sqrt(2) * a*(1 + (sqrt(5))/(5))",
            "sqrt(2) * a + (2*a)/(sqrt(10))",
            "sqrt(2) * a + (sqrt(10))/(5) * a",
            "((sqrt(2)) + (sqrt(10))/(5)) * a",
            "(sqrt(2) + (sqrt(10))/(5)) * a",
            "(sqrt(2) + sqrt(10))/(sqrt(5)) * a"
        ]
    },
    "(12*k*M*g*U)/(5)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "((12)/(5)) * k*M*g*U",
            "(12)/(5) * k*M*g*U",
            "((12)/(5) * k*M*U*g)",
            "((12)/(5)) * (k*M*U*g)",
            "((12)/(5)) * k*M*U*g",
            "(12)/(5) * k*M*U*g",
            "(12)/(5) * k*U*M*g",
            "((12)/(5)) * M*g*k*U",
            "(12)/(5) * M*g*k*U",
            "((12)/(5)) * M*g*U*k",
            "(12)/(5) * (M*g*U*k)",
            "(12)/(5) * M*g*U*k",
            "(12)/(5) * M*k*g*U",
            "((12)/(5)) * M*k*U*g",
            "(12)/(5) * M*k*U*g",
            "(12)/(5) * (M*U*g*k)",
            "(12)/(5) * M*U*g*k",
            "((12)/(5)) * (M*U*k*g)",
            "((12)/(5)) * M*U*k*g",
            "(12)/(5) * M*U*k*g",
            "(12)/(5) * U*g*M*k",
            "(12)/(5) * (U*k*M*g)",
            "(12)/(5) * U*k*M*g",
            "((12)/(5)) * U*M*g*k",
            "(12)/(5) * U*M*g*k",
            "(12)/(5) * U*M*k*g",
            "(12*k*g*M*U)/(5)",
            "12*k*M*(g)/(5) * U",
            "(12*k*M*g*U)/(5)",
            "12*k*M*g*(U)/(5)",
            "(12*k*M*U*g)/(5)",
            "12*k*M*U*(g)/(5)",
            "(12*k*U*M*g)/(5)",
            "(12*M*g*k*U)/(5)",
            "12*M*g*k*(U)/(5)",
            "(12*M*g*U*k)/(5)",
            "12*M*g*U*(k)/(5)",
            "(12*M*k*g*U)/(5)",
            "12*M*k*g*(U)/(5)",
            "12*M*k*(U)/(5) * g",
            "(12*M*k*U*g)/(5)",
            "12*M*k*U*(g)/(5)",
            "(12*M*U*g*k)/(5)",
            "12*M*U*g*(k)/(5)",
            "(12*M*U*k*g)/(5)",
            "12*M*U*k*(g)/(5)",
            "((12*U*k*M*g)/(5))",
            "(12*U*k*M*g)/(5)",
            "(12*U*M*g*k)/(5)",
            "12*U*M*g*(k)/(5)",
            "(12*U*M*k*g)/(5)",
            "2*M*g*((6)/(5) * k) * U",
            "(2*M*g*k + (2*M*g*k)/(5)) * U",
            "2*M*g*U*((6*k)/(5))",
            "2*M*g*U*(k + (k)/(5))",
            "2*U*M*g*((6*k)/(5))",
            "k*U*M*g*(12)/(5)"
        ]
    },
    "P == (12*k*M*g*U)/(5)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "P == (12)/(5) * g*M*k*U",
            "P == (12)/(5) * k*M*g*U",
            "P == ((12)/(5)) * k*M*U*g",
            "P == (12)/(5) * k*M*U*g",
            "P == (12)/(5) * k*U*M*g",
            "P == (12)/(5) * M*g*k*U",
            "P == ((12)/(5)) * M*g*U*k",
            "P == (12)/(5) * M*g*U*k",
            "P == (12)/(5) * M*k*g*U",
            "P == (12)/(5) * (M*k*U*g)",
            "P == (12)/(5) * M*k*U*g",
            "P == (12)/(5) * M*U*g*k",
            "P == (12)/(5) * M*U*k*g",
            "P == (12)/(5) * U*k*M*g",
            "P == (12)/(5) * U*M*g*k",
            "P == (12)/(5) * U*M*k*g",
            "P == (12*g*k*M*U)/(5)",
            "P == (12*k*g*M*U)/(5)",
            "P == 12*k*g*M*(U)/(5)",
            "P == (12*k*M*g*U)/(5)",
            "P == 12*k*M*g*(U)/(5)",
            "P == (12*k*M*U)/(5) * g",
            "P == (12*k*M*U*g)/(5)",
            "P == (12*k*U*M*g)/(5)",
            "P == (12*M*g*k*(U)/(5))",
            "P == 12*M*g*k*(U)/(5)",
            "P == ((12*M*g*U*k)/(5))",
            "P == (12*M*g*U*k)/(5)",
            "P == 12*M*g*U*(k)/(5)",
            "P == 12*M*U*g*(k)/(5)",
            "P == (12*M*U*k*g)/(5)",
            "P == 12*M*U*k*(g)/(5)",
            "P == 2*M*g*U*(6*(k)/(5))",
            "P == 2*M*g*U*(k + 2*((k)/(10)))",
            "P == 2*M*U*g*(6*(k)/(5))",
            "P == k*2*M*g*U + 2*M*g*U*(k)/(5)",
            "P == M*g*U*k*(12)/(5)"
        ]
    },
    "(5)/(2) * (2 + sqrt(2)) * sqrt((a)/(g))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(10*(2*g*a)**((1)/(2)))/(4*g) + sqrt((25*a)/(g))",
            "(10 + 5*(2)**((1)/(2)))/(2) * ((a)/(g))**((1)/(2))",
            "(((10 + 5*sqrt(2))/(2)) * (sqrt((a)/(g))))",
            "((10 + 5*sqrt(2))/(2)) * sqrt((a)/(g))",
            "(10 + 5*sqrt(2))/(2) * sqrt((a)/(g))",
            "(10 + 5*sqrt(2))/(2) * ((sqrt(a))/(sqrt(g)))",
            "((10 + 5*sqrt(2)) * sqrt(a*g))/(2*g)",
            "((10 + 5*sqrt(2)) * sqrt(g*a))/(2*g)",
            "(10*a*(1 + sqrt(2)))/(2*sqrt(2*g*a))",
            "(10*sqrt(a*g) + 5*sqrt(2*a*g))/(2*g)",
            "(10*sqrt(a*g) + 5*sqrt(2*g*a))/(2*g)",
            "(1 + 2**( - (1)/(2))) * sqrt(25*(a)/(g))",
            "(1)/(2*g) * (5*sqrt(2*g*a) + 10*sqrt(g*a))",
            "(1 + sqrt(2)) * sqrt((25*a)/(2*g))",
            "(2 + sqrt(2))/(2) * sqrt((25*a)/(g))",
            "2*(sqrt(2*g*a))/((4)/(5) * g) + sqrt(25*(a)/(g))",
            "5*(1 + (1)/(2**((1)/(2)))) * ((a)/(g))**((1)/(2))",
            "5*(1 + (1)/(sqrt(2))) * (sqrt((a)/(g)))",
            "5*(1 + (1)/(sqrt(2))) * sqrt((a)/(g))",
            "5*(1 + (2**((1)/(2)))/(2)) * ((a)/(g))**((1)/(2))",
            "(5*(1 + (2**((1)/(2)))) * (a**((1)/(2))))/((2*g)**((1)/(2)))",
            "5*((1)/(2) + (1)/(sqrt(2))) * (sqrt(2*g*a))/(g)",
            "5*((1)/(sqrt(2)) + 1) * sqrt((a)/(g))",
            "5*(1 + (sqrt(2))/(2)) * sqrt((a)/(g))",
            "5*((2 + 2**((1)/(2)))/(2)) * ((a)/(g))**((1)/(2))",
            "5*(2 + 2**((1)/(2)))/(2) * ((a)/(g))**((1)/(2))",
            "((5)/(2)) * (2 + (2**((1)/(2)))) * ((a)/(g))**((1)/(2))",
            "(5)/(2) * (2 + (2)**((1)/(2))) * ((a)/(g))**((1)/(2))",
            "(5)/(2) * (2 + 2**((1)/(2))) * ((a)/(g))**((1)/(2))",
            "((5)/(2)) * (2 + (sqrt(2))) * (sqrt((a)/(g)))",
            "((5)/(2)) * (2 + sqrt(2)) * (sqrt((a)/(g)))",
            "((5)/(2)) * (2 + sqrt(2)) * sqrt((a)/(g))",
            "(5)/(2) * (2 + sqrt(2)) * sqrt((a)/(g))",
            "(5)/(2) * (2 + sqrt(2)) * (sqrt((a*g)))/(g)",
            "(5)/(2) * (2 + sqrt(2)) * (sqrt(a))/(sqrt(g))",
            "(5*(2*g*a)**((1)/(2)))/(2*g) + 5*((a)/(g))**((1)/(2))",
            "(5)/(2*g) * sqrt(2*g*a) + 5*sqrt((a)/(g))",
            "(5)/(2*g) * (sqrt(4*a*g) + sqrt(2*a*g))",
            "(5)/(2) * (sqrt(2) + 2) * sqrt((a)/(g))",
            "5*(2 + sqrt(2))/(2) * sqrt((a)/(g))",
            "(5)/(2) * (sqrt(2) + 2) * (sqrt(a))/(sqrt(g))",
            "((5)/(2) * sqrt(2) + 5) * sqrt((a)/(g))",
            "(5*(2 + sqrt(2)) * a)/(2*sqrt(a*g))",
            "(5)/(2) * sqrt(2*(a)/(g)) + sqrt(25*(a)/(g))",
            "5*(2 + sqrt(2)) * (sqrt((a)/(g)))/(2)",
            "(5)/(2) * sqrt((a)/(g)) * (2 + sqrt(2))",
            "((5)/(2)) * (sqrt((a)/(g))) * (sqrt(2) + 2)",
            "(5)/(2) * sqrt((a)/(g)) * (sqrt(2) + 2)",
            "(5 + (5)/(2) * sqrt(2)) * sqrt((a)/(g))",
            "(5 + 5*(sqrt(2))/(2)) * (sqrt((a)/(g)))",
            "(5 + 5*(sqrt(2))/(2)) * sqrt((a)/(g))",
            "((5 + 5*sqrt(2)) * a)/(sqrt(2*a*g))",
            "(5 + 5*sqrt(2))/(sqrt(2)) * (sqrt((a)/(g)))",
            "(5 + (5)/(sqrt(2))) * sqrt((a)/(g))",
            "5*((a)/(g))**((1)/(2)) + (5)/(2) * (2*(a)/(g))**((1)/(2))",
            "(5*a*(sqrt(2) + 1))/(sqrt(2*g*a))",
            "(5*a)/(sqrt(2*g*a)) + (5*a)/(sqrt(a*g))",
            "(5*a)/(sqrt(2*g*a)) + 5*sqrt((a)/(g))",
            "5*(a)/(sqrt(2*g*a)) + 5*sqrt((a)/(g))",
            "(5*a)/(sqrt(2*g*a)) + (5*sqrt(a*g))/(g)",
            "(5*sqrt(2) + 10)/(2) * (sqrt((a)/(g)))",
            "(5*sqrt(2) + 10)/(2) * sqrt((a)/(g))",
            "((5*sqrt(2) + 10) * sqrt(a*g))/(2*g)",
            "(5*sqrt(2) + 10) * (sqrt(g*a))/(2*g)",
            "5*((sqrt(2))/(2) + 1) * sqrt((a)/(g))",
            "((5*sqrt(2))/(2) + 5) * (sqrt((a)/(g)))",
            "((5*sqrt(2))/(2) + 5) * sqrt((a)/(g))",
            "((5*(sqrt(2))/(2)) + 5) * sqrt((a)/(g))",
            "(5*(sqrt(2))/(2) + 5) * (sqrt((a)/(g)))",
            "5*(sqrt(2))/(2) * sqrt((a)/(g)) + 5*sqrt((a)/(g))",
            "((5)/(sqrt(2)) + 5) * sqrt((a)/(g))",
            "(5*sqrt(2*a))/(2*sqrt(g)) + (5*sqrt(a))/(sqrt(g))",
            "(5*sqrt(2*a*g) + 10*sqrt(a*g))/(2*g)",
            "(5*sqrt(2*a*g) * (1 + sqrt(2)))/(2*g)",
            "(5*sqrt(2*a*g))/(2*g) + 5*sqrt((a)/(g))",
            "5*(sqrt(2*a*g))/(2*g) + 5*sqrt((a)/(g))",
            "(5*(sqrt(2*g*a)) + 10*sqrt(a*g))/(2*g)",
            "((5*sqrt(2*g*a) + 10*sqrt(g*a))/(2*g))",
            "(5*sqrt(2*g*a) + 10*sqrt(g*a))/(2*g)",
            "5*(sqrt(2*g*a))/(2*g) + 5*sqrt((a)/(g))",
            "(5*sqrt(2*g*a))/(2*g) + sqrt((25*a)/(g))",
            "5*(sqrt(2*g*a))/(2*g) + sqrt(25*(a)/(g))",
            "(5*sqrt(2*g*a))/(2*g) + (sqrt(25*g*a))/(g)",
            "5*((sqrt(2*g*a))/(2*g) + sqrt((a)/(g)))",
            "5*sqrt(a) * (1 + (1)/(sqrt(2)))/(sqrt(g))",
            "(5*sqrt(a) * (1 + sqrt(2)))/(sqrt(2*g))",
            "(5*sqrt(a)) * (1 + sqrt(2))/(sqrt(2*g))",
            "5*(sqrt((a)/(2*g)) + sqrt((a)/(g)))",
            "5*(sqrt(a))/(2*sqrt(g)) * (2 + sqrt(2))",
            "(5*sqrt(a) + 5*sqrt(2*a))/(sqrt(2*g))",
            "5*sqrt((a)/(g)) + 10*(a)/(sqrt(8*a*g))",
            "5*sqrt((a)/(g)) * (1 + (1)/(sqrt(2)))",
            "5*(sqrt((a)/(g))) * (1 + (1)/(sqrt(2)))",
            "5*sqrt((a)/(g)) * ((1)/(sqrt(2)) + 1)",
            "5*sqrt((a)/(g)) * ((2 + sqrt(2))/(2))",
            "5*sqrt((a)/(g)) + (5)/(2) * sqrt((2*a)/(g))",
            "5*sqrt((a)/(g)) + (5)/(2) * sqrt(2*(a)/(g))",
            "5*sqrt((a)/(g)) + (5*a)/(sqrt(2*g*a))",
            "5*(sqrt((a)/(g))) + (5*(sqrt(2))/(2)) * (sqrt((a)/(g)))",
            "5*sqrt((a)/(g)) + 5*(sqrt(2*(a)/(g)))/(2)",
            "5*sqrt((a)/(g)) + (5*sqrt(2*g*a))/(2*g)",
            "5*sqrt((a)/(g)) + 5*sqrt((a)/(2*g))",
            "5*sqrt((a)/(g)) * ((sqrt(2))/(2) + 1)",
            "(5*sqrt(a*g) * (sqrt(2) + 2))/(2*g)",
            "5*(sqrt((a)/(g)) + (sqrt(2*g*a))/(2*g))",
            "5*(sqrt((a)/(g)) + sqrt((a)/(2*g)))",
            "(5*sqrt(a) * (sqrt(2) + 2))/(2*sqrt(g))",
            "5*((sqrt(a)) + sqrt(2*a))/(sqrt((2*g)))",
            "(5*sqrt(g*a))/(2*g) * (sqrt(2) + 2)",
            "(5*sqrt(g*a) * (sqrt(2) + 2))/(2*g)",
            "((sqrt(2) + 2) * 5)/(2) * sqrt((a)/(g))",
            "sqrt((25*a)/(2*g)) + sqrt((25*a)/(g))",
            "(sqrt(a) * (10 + 5*sqrt(2)))/(2*sqrt(g))",
            "(sqrt(a) * (5*sqrt(2) + 10))/(2*sqrt(g))",
            "sqrt((a)/(g)) * ((10 + 5*sqrt(2))/(2))",
            "sqrt((a)/(g)) * (10 + 5*sqrt(2))/(2)",
            "(sqrt(a*g) * (10 + 5*sqrt(2)))/(2*g)",
            "sqrt((a)/(g)) * ((5)/(2)) * (2 + sqrt(2))",
            "sqrt((a)/(g)) * (5*(sqrt(2))/(2) + 5)",
            "(sqrt(a))/(sqrt(g)) * (5 + (5*sqrt(2))/(2))",
            "(sqrt(g*a) * (5*sqrt(2) + 10))/(2*g)"
        ]
    },
    "T == (5)/(2) * (2 + sqrt(2)) * sqrt((a)/(g))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "T == ((10 + 5*(2)**((1)/(2)))/(2)) * ((a)/(g))**((1)/(2))",
            "T == (10 + 5*sqrt(2))/(2*g) * sqrt(a*g)",
            "T == ((10 + 5*sqrt(2)))/(2) * sqrt((a)/(g))",
            "T == ((10 + 5*sqrt(2))/(2)) * sqrt((a)/(g))",
            "T == (10 + 5*sqrt(2))/(2) * (sqrt((a)/(g)))",
            "T == (10 + 5*sqrt(2))/(2) * sqrt((a)/(g))",
            "T == ((10 + 5*sqrt(2)) * sqrt(g*a))/(2*g)",
            "T == ((10*sqrt(2) + 20) * sqrt(a))/(4*sqrt(g))",
            "T == (10*sqrt(a) + 5*sqrt(2*a))/(2*sqrt(g))",
            "T == (1)/(2) * (10 + 5*sqrt(2)) * sqrt((a)/(g))",
            "T == ((1)/(sqrt(2)) + 1) * (5*a)/(sqrt(g*a))",
            "T == (1 + sqrt(2)) * sqrt(25*(a)/(2*g))",
            "T == 5*(1 + (1)/(sqrt(2))) * sqrt((a)/(g))",
            "T == 5*(1 + (2**((1)/(2)))/(2)) * ((a)/(g))**((1)/(2))",
            "T == 5*((1)/(2) + (1)/(sqrt(2))) * sqrt((2*a)/(g))",
            "T == 5*((1)/(sqrt(2)) + 1) * sqrt((a)/(g))",
            "T == (5)/(2) * (2 + 2**((1)/(2))) * (sqrt((a)/(g)))",
            "T == ((5)/(2)) * (2 + sqrt(2)) * sqrt((a)/(g))",
            "T == (5)/(2) * (2 + sqrt(2)) * (sqrt((a)/(g)))",
            "T == (5)/(2) * (2 + sqrt(2)) * sqrt((a)/(g))",
            "T == 5*((2*g*a)**((1)/(2)))/(2*g) + (25*(a)/(g))**((1)/(2))",
            "T == (5)/(2*g) * (sqrt(2) + 2) * sqrt(a*g)",
            "T == 5*(2 + sqrt(2))/(2) * (sqrt((a)/(g)))",
            "T == (5)/(2) * sqrt((2*a)/(g)) + 5*sqrt((a)/(g))",
            "T == ((5)/(2)) * sqrt(2*(a)/(g)) + 5*sqrt((a)/(g))",
            "T == (5*(2 + sqrt(2)) * sqrt(a))/(2*sqrt(g))",
            "T == (5)/(2) * sqrt((a)/(g)) * (sqrt(2) + 2)",
            "T == (5*(2*sqrt(a) + sqrt(2*a)))/(2*sqrt(g))",
            "T == (5 + (5)/(2) * sqrt(2)) * sqrt((a)/(g))",
            "T == (5 + 5*(sqrt(2))/(2)) * sqrt((a)/(g))",
            "T == (5 + 5*sqrt(2)) * (sqrt(2*g*a))/(2*g)",
            "T == (5 + (5)/(sqrt(2))) * sqrt((a)/(g))",
            "T == 5*(a**((1)/(2)))/(g**((1)/(2))) + 5*((2*a)**((1)/(2)))/(2*g**((1)/(2)))",
            "T == 5*(((a)/(2*g))**((1)/(2))) + 5*((a)/(g))**((1)/(2))",
            "T == 5*((a)/(2*g))**((1)/(2)) + 5*((a)/(g))**((1)/(2))",
            "T == (5*a + 5*a*sqrt(2))/(sqrt(2*g*a))",
            "T == 5*((a)/(g))**((1)/(2)) * (((2)**((1)/(2)))/(2) + 1)",
            "T == (5*a*(sqrt(2) + 1))/(sqrt(2*g*a))",
            "T == (5*a)/(sqrt(2*g*a)) + 5*sqrt((a)/(g))",
            "T == 5*(a)/(sqrt(2*g*a)) + 5*sqrt((a)/(g))",
            "T == (5*a)/(sqrt(2*g*a)) + (5*sqrt(a))/(sqrt(g))",
            "T == (5*sqrt(2) + 10)/(2) * sqrt((a)/(g))",
            "T == ((5*sqrt(2) + 10) * sqrt(a*g))/(2*g)",
            "T == (5*(sqrt(2) + 2))/(2) * sqrt((a)/(g))",
            "T == ((5*sqrt(2))/(2) + 5) * sqrt((a)/(g))",
            "T == ((5*sqrt(2) + 5)/(sqrt(2))) * (sqrt((a)/(g)))",
            "T == (5*(sqrt(2*a)) + 2*sqrt(25*a))/(2*(sqrt(g)))",
            "T == (5*sqrt(2*a*g))/(2*g) + sqrt((25*a)/(g))",
            "T == (5*sqrt(2*g*a) + 10*sqrt(g*a))/(2*g)",
            "T == (5*sqrt(2*g*a) * (1 + sqrt(2)))/(2*g)",
            "T == (5*sqrt(2*g*a))/(2*g) + 5*sqrt((a)/(g))",
            "T == 5*(sqrt(2*g*a))/(2*g) + 5*sqrt((a)/(g))",
            "T == (5*sqrt(2*g*a))/(2*g) + (5*sqrt(a*g))/(g)",
            "T == (5*sqrt(2*g*a))/(2*g) + (5*sqrt(a))/(sqrt(g))",
            "T == (5*sqrt(2*g*a))/(2*g) + (5*sqrt(g*a))/(g)",
            "T == (5*(sqrt(2*g*a))/(2*g)) + (5*(sqrt(g*a))/(g))",
            "T == 5*sqrt(a) * ((1)/(2*g) * sqrt(2*g) + sqrt((1)/(g)))",
            "T == 5*sqrt((a)/(2*g)) + 5*sqrt((a)/(g))",
            "T == (5*sqrt(a) + 5*sqrt(2*a))/(sqrt(2*g))",
            "T == 5*sqrt((a)/(g)) * (1 + (1)/(sqrt(2)))",
            "T == (5*sqrt((a)/(g))) * (1 + (sqrt(2))/(2))",
            "T == 5*sqrt((a)/(g)) * (1 + (sqrt(2))/(2))",
            "T == 5*sqrt((a)/(g)) + (5)/(2*g) * sqrt(2*a*g)",
            "T == 5*sqrt((a)/(g)) + (5)/(2*g) * sqrt(2*g*a)",
            "T == 5*sqrt((a)/(g)) + (5)/(2) * sqrt(2*(a)/(g))",
            "T == 5*sqrt((a)/(g)) + (5*a)/(sqrt(2*g*a))",
            "T == 5*sqrt((a)/(g)) + (5*sqrt(2*g*a))/(2*g)",
            "T == ((5*sqrt(a*g))/(g)) * ((sqrt(2))/(2) + 1)",
            "T == 5*sqrt((a)/(g)) * ((sqrt(2))/(2) + 1)",
            "T == (5*sqrt(a))/(sqrt(2*g)) + (5*sqrt(a))/(sqrt(g))",
            "T == (5*sqrt(a))/(sqrt(g)) * ((2 + sqrt(2))/(2))",
            "T == (5*sqrt(a))/(sqrt(g)) + (5*sqrt(2*g*a))/(2*g)",
            "T == 5*(sqrt(g*a))/(2*g) * (2 + sqrt(2))",
            "T == sqrt((25*a)/(2*g)) * (1 + sqrt(2))",
            "T == sqrt(25*(a)/(g)) * (1 + (1)/(sqrt(2)))",
            "T == (sqrt(2*g*a))/((4)/(10) * g) + 5*sqrt((a)/(g))",
            "T == sqrt((a)/(g)) * ((5)/(2) * sqrt(2) + 5)"
        ]
    },
    "(a*b**(2)*g*sigma)/(2)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "((1)/(2)) * a*(b**(2)) * g*(sigma)",
            "((1)/(2)) * a*b**(2)*g*sigma",
            "(1)/(2) * a*b**(2)*g*(sigma)",
            "(1)/(2) * a*b**(2)*g*sigma",
            "((1)/(2)) * (a*b**(2)) * (sigma) * (g)",
            "((1)/(2)) * a*b**(2)*sigma*g",
            "(1)/(2) * (a*b**(2)) * (sigma) * (g)",
            "(1)/(2) * (a*b**(2)*sigma*g)",
            "(1)/(2) * a*b**(2)*(sigma) * g",
            "(1)/(2) * a*b**(2)*sigma*g",
            "(1)/(2) * a*b*b*g*(sigma)",
            "(1)/(2) * a*g*b**(2)*sigma",
            "(1)/(2) * a*sigma*b**(2)*g",
            "(1)/(2) * a*sigma*g*b**(2)",
            "(1)/(2) * b**(2)*a*g*sigma",
            "(1)/(2) * g*a*b**(2)*sigma",
            "(1)/(2) * (sigma) * a*b**(2)*g",
            "(1)/(2) * (sigma*a*b**(2)*g)",
            "(1)/(2) * sigma*a*b**(2)*g",
            "(1)/(2) * sigma*a*b*b*g",
            "(1)/(2) * (sigma) * a*g*b**(2)",
            "(1)/(2) * sigma*a*g*b**(2)",
            "((1)/(2)) * (sigma*g*a*b**(2))",
            "(1)/(2) * sigma*g*a*b**(2)",
            "(3)/(6) * a*b**(2)*g*(sigma)",
            "3*a*((b**(2))/(6)) * g*sigma",
            "(3*a*b**(2)*g*sigma)/(6)",
            "3*a*b**(2)*g*(sigma)/(6)",
            "(3*a*b**(2)*sigma*g)/(6)",
            "3*(a*b**(2)*(sigma) * g)/(6)",
            "3*a*b*g*sigma*(b)/(6)",
            "3*a*b*g*sigma*sqrt((9*a**(2))/(16) + (b**(2))/(36)) * (2*b)/(sqrt(4*b**(2) + 81*a**(2)))",
            "3*a*b*(sigma) * g*((b)/(6))",
            "3*a*b*sigma*g*(b)/(6)",
            "(3*a*g*b**(2)*sigma)/(6)",
            "3*(g)/(6) * a*b**(2)*sigma",
            "3*((sqrt((81*a**(2) + 4*b**(2))))/(12)) * a*b*sigma*g*cos(arctan((9*a)/(2*b)))",
            "3*(sqrt(81*a**(2) + 4*b**(2)))/(12) * a*b*sigma*g*cos(arctan((9*a)/(2*b)))",
            "6*a*b**(2)*sigma*g*sqrt(((b**(2))/(36) + (9*a**(2))/(16))/(81*a**(2) + 4*b**(2)))",
            "a*(b**(2))/(2) * g*sigma",
            "(a*b**(2)*g)/(2) * sigma",
            "a*b**(2)*(g)/(2) * sigma",
            "(a*(b**(2)) * g*sigma)/(2)",
            "(a*b**(2)*g*(sigma))/(2)",
            "(a*b**(2)*g*sigma)/(2)",
            "a*b**(2)*g*(sigma)/(2)",
            "a*b**(2)*(sigma)/(2) * g",
            "a*b**(2)*sigma*g*(1)/(2)",
            "(a*b**(2)*(sigma) * g)/(2)",
            "(a*b**(2)*sigma*g)/(2)",
            "a*(b**(2)) * sigma*(g)/(2)",
            "a*b**(2)*(sigma) * (g)/(2)",
            "a*b**(2)*sigma*(g)/(2)",
            "(a*b*b*g*sigma)/(2)",
            "a*b*sigma*g*(b)/(2)",
            "(a*g*b**(2)*sigma)/(2)",
            "(a*g*(sigma) * b**(2))/(2)",
            "(a*g*sigma*b**(2))/(2)",
            "(a*sigma*b**(2)*g)/(2)",
            "a*sigma*b**(2)*(g)/(2)",
            "a*sigma*g*(b**(2))/(2)",
            "(b**(2)*a*g*sigma)/(2)",
            "b**(2)*a*g*(sigma)/(2)",
            "(b**(2)) * g*a*(sigma)/(2)",
            "b**(2)*sigma*(g)/(2) * a",
            "(b**(2)*sigma*g*a)/(2)",
            "b*3*a*g*sigma*(((b)/(2)) - ((b)/(3)))",
            "(b)/(6) * (sigma) * (3*a*b) * g",
            "(g)/(2) * a*b**(2)*sigma",
            "(g) * (a) * (b**(2)) * (sigma)/(2)",
            "(g*a*b**(2)*sigma)/(2)",
            "g*a*b**(2)*(sigma)/(2)",
            "(g*sigma*a*b**(2))/(2)",
            "(sigma*3*a*b**(2)*g)/(6)",
            "sigma*3*a*b*g*(b)/(6)",
            "(sigma*a*(b**(2)) * g)/(2)",
            "(sigma*a*b**(2)*g)/(2)",
            "sigma*a*b**(2)*(g)/(2)",
            "(sigma*a*g*b**(2))/(2)",
            "sigma*a*g*(b**(2))/(2)",
            "sigma*g*a*(b**(2))/(2)",
            "(sigma*g*b**(2)*a)/(2)"
        ]
    },
    "(V_1 - V_0)/((V_0)/(R_0) - (V_1)/(R_1))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(R_0*R_1*V_0 - R_0*R_1*V_1)/(V_1*R_0 - V_0*R_1)",
            "((R_0*R_1) * (V_0 - V_1))/((R_0*V_1) - (R_1*V_0))",
            "(R_0*R_1*(V_0 - V_1))/(R_0*V_1 - R_1*V_0)",
            "R_0*R_1*(V_0 - V_1)/(R_0*V_1 - R_1*V_0)",
            "(R_0*R_1*(V_0 - V_1))/((R_0*V_1) - (V_0*R_1))",
            "R_0*R_1*(V_0 - V_1)/(R_0*V_1 - V_0*R_1)",
            "(R_0*R_1*(V_0 - V_1))/(V_1*R_0 - R_1*V_0)",
            "((R_0*R_1) * (V_0 - V_1))/((V_1*R_0) - (V_0*R_1))",
            "(R_0*R_1*(V_0 - V_1))/((V_1*R_0) - (V_0*R_1))",
            "(R_0*R_1*(V_0 - V_1))/(V_1*R_0 - V_0*R_1)",
            "(R_0*R_1*(V_1 - V_0))/(R_1*V_0 - R_0*V_1)",
            "R_0*R_1*(V_1 - V_0)/(R_1*V_0 - R_0*V_1)",
            "R_0*R_1*(V_1 - V_0)/(R_1*V_0 - V_1*R_0)",
            "(R_0*R_1*(V_1 - V_0))/((V_0*R_1) - (R_0*V_1))",
            "(R_0*R_1*(V_1 - V_0))/(V_0*R_1 - R_0*V_1)",
            "((R_0*R_1) * (V_1 - V_0))/(V_0*R_1 - V_1*R_0)",
            "(R_0*R_1) * (V_1 - V_0)/(V_0*R_1 - V_1*R_0)",
            "(R_0*R_1*(V_1 - V_0))/(V_0*R_1 - V_1*R_0)",
            "R_0*R_1*(V_1 - V_0)/(V_0*R_1 - V_1*R_0)",
            "R_0*(V_0*R_1 - V_1*R_1)/(V_1*R_0 - V_0*R_1)",
            "((R_0)/(V_0) * (V_1 - V_0))/(1 - (R_0*V_1)/(R_1*V_0))",
            "(R_0*V_1*R_1 - R_1*V_0*R_0)/(R_1*V_0 - R_0*V_1)",
            "(R_0*V_1*R_1 - R_1*V_0*R_0)/(R_1*V_0 - V_1*R_0)",
            "(R_0*(V_1 - V_0))/(V_0*(1 - (V_1*R_0)/(V_0*R_1)))",
            "(R_1*R_0*V_0 - R_1*R_0*V_1)/(V_1*R_0 - V_0*R_1)",
            "(R_1*R_0*(V_0 - V_1))/(R_0*V_1 - R_1*V_0)",
            "R_1*R_0*(V_0 - V_1)/(R_0*V_1 - R_1*V_0)",
            "(R_1*R_0*(V_0 - V_1))/(V_1*R_0 - R_1*V_0)",
            "(R_1*R_0*(V_0 - V_1))/(V_1*R_0 - V_0*R_1)",
            "R_1*R_0*(V_0 - V_1)/(V_1*R_0 - V_0*R_1)",
            "(R_1*R_0*(V_1 - V_0))/(R_1*V_0 - R_0*V_1)",
            "(R_1*R_0) * (V_1 - V_0)/(V_0*R_1 - V_1*R_0)",
            "(R_1*R_0*(V_1 - V_0))/(V_0*R_1 - V_1*R_0)",
            "(R_1*R_0*(V_1 - V_0)/(V_0*R_1 - V_1*R_0))",
            "R_1*R_0*((V_1 - V_0)/(V_0*R_1 - V_1*R_0))",
            "(R_1*V_0*R_0 - R_0*V_1*R_1)/(R_0*V_1 - R_1*V_0)",
            "(R_1*V_0*R_0 - V_1*R_1*R_0)/((V_1*R_0 - R_1*V_0))",
            "(R_1*V_1*R_0 - R_1*V_0*R_0)/(R_1*V_0 - R_0*V_1)",
            "R_1*(V_1*R_0 - V_0*R_0)/(R_1*V_0 - V_1*R_0)",
            "(V_0*R_0*R_1 - V_1*R_0*R_1)/(R_0*V_1 - R_1*V_0)",
            "(V_0*R_0*R_1 - V_1*R_0*R_1)/(R_0*V_1 - V_0*R_1)",
            "(V_0*R_0*R_1 - V_1*R_0*R_1)/(V_1*R_0 - V_0*R_1)",
            "((V_0*R_0*R_1) - (V_1*R_1*R_0))/(V_1*R_0 - R_1*V_0)",
            "((V_0*R_0*R_1) - (V_1*R_1*R_0))/(V_1*R_0 - V_0*R_1)",
            "(V_0*R_1*R_0 - R_0*V_1*R_1)/(V_1*R_0 - V_0*R_1)",
            "(V_0*R_1*R_0 - R_1*R_0*V_1)/(V_1*R_0 - V_0*R_1)",
            "(V_0*R_1*R_0 - V_1*R_1*R_0)/(V_1*R_0 - V_0*R_1)",
            "((V_0 - V_1) * (R_0*R_1)/( - V_0*R_1 + V_1*R_0))",
            "((V_0 - V_1) * R_0*R_1)/(V_1*R_0 - V_0*R_1)",
            "((V_0 - V_1) * R_1*R_0)/(V_1*R_0 - V_0*R_1)",
            "- (V_0 - V_1)/(((V_0)/(R_0)) - ((V_1)/(R_1)))",
            "((V_0 - V_1))/((((V_1)/(R_1)) - ((V_0)/(R_0))))",
            "((V_0 - V_1))/(((V_1)/(R_1)) - ((V_0)/(R_0)))",
            "((V_0) - (V_1))/(((V_1)/(R_1)) - (V_0)/(R_0))",
            "(V_0 - V_1)/(((V_1)/(R_1) - (V_0)/(R_0)))",
            "(V_0 - V_1)/(((V_1)/(R_1)) - ((V_0)/(R_0)))",
            "(V_0 - V_1)/(((V_1)/(R_1)) - (V_0)/(R_0))",
            "(V_0 - V_1)/((V_1)/(R_1) - (V_0)/(R_0))",
            "(V_1*R_0*R_1 - V_0*R_0*R_1) * (1)/(V_0*R_1 - V_1*R_0)",
            "((V_1) * (R_0) * (R_1) - (V_0) * (R_0) * (R_1))/((V_0) * (R_1) - (R_0) * (V_1))",
            "(V_1*R_0*R_1 - V_0*R_0*R_1)/(V_0*R_1 - V_1*R_0)",
            "- (V_1*R_0*R_1 - V_0*R_0*R_1)/(V_1*R_0 - V_0*R_1)",
            "(V_1*R_0*R_1 - V_0*R_1*R_0)/(V_0*R_1 - V_1*R_0)",
            "((V_1) * (R_0) * (R_1) - (V_0) * (R_1) * (R_0))/((V_0) * (R_1) - (V_1) * (R_0))",
            "((V_1*R_1*R_0) - (R_1*V_0*R_0))/(V_0*R_1 - V_1*R_0)",
            "(((V_1*R_1*R_0) - (V_0*R_0*R_1)))/((V_0*R_1) - (V_1*R_0))",
            "(V_1*R_1*R_0 - V_0*R_0*R_1)/(V_0*R_1 - V_1*R_0)",
            "(V_1 - V_0) * R_0*(R_1)/(R_1*V_0 - R_0*V_1)",
            "((V_1 - V_0) * (R_0*R_1))/((V_0*R_1) - (V_1*R_0))",
            "((V_1 - V_0) * (R_0*R_1))/(V_0*R_1 - V_1*R_0)",
            "((V_1 - V_0) * R_0*R_1)/(V_0*R_1 - V_1*R_0)",
            "(V_1 - V_0) * (R_0*R_1)/(V_0*R_1 - V_1*R_0)",
            "((V_1 - V_0) * R_1*R_0)/(V_0*R_1 - V_1*R_0)",
            "((V_1 - V_0))/((V_0)/(R_0) - (V_1)/(R_1))",
            "(V_1 - V_0)/(((V_0)/(R_0)) - ((V_1)/(R_1)))",
            "(V_1 - V_0)/((V_0)/(R_0) - (V_1)/(R_1))",
            "- ((V_1 - V_0)/(((V_1)/(R_1)) - ((V_0)/(R_0))))",
            "- ((V_1) - (V_0))/((V_1)/(R_1) - (V_0)/(R_0))",
            "- (V_1 - V_0)/(((V_1)/(R_1)) - ((V_0)/(R_0)))",
            "- (V_1 - V_0)/((V_1)/(R_1) - (V_0)/(R_0))"
        ]
    },
    "r == (V_1 - V_0)/((V_0)/(R_0) - (V_1)/(R_1))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(R_0*R_1*(V_0 - V_1))/((R_0*V_1) - (V_0*R_1)) == r",
            "(R_0*R_1*(V_1 - V_0))/(R_1*V_0 - R_0*V_1) == r",
            "(R_0*V_1*R_1 - R_0*V_0*R_1)/(V_0*R_1 - V_1*R_0) == r",
            "r == (R_0*R_1*(V_0 - V_1))/(R_0*V_1 - R_1*V_0)",
            "r == R_0*R_1*(V_0 - V_1)/(R_0*V_1 - V_0*R_1)",
            "r ==  - (R_0*R_1*(V_0 - V_1))/((V_0*R_1) - (V_1*R_0))",
            "r == (R_0*R_1*(V_0 - V_1))/(V_1*R_0 - R_1*V_0)",
            "r == (R_0*R_1*(V_0 - V_1))/(V_1*R_0 - V_0*R_1)",
            "r == (R_0*R_1*V_1 - R_0*R_1*V_0)/(R_1*V_0 - R_0*V_1)",
            "r == (R_0*R_1*V_1 - R_0*R_1*V_0)/(V_0*R_1 - V_1*R_0)",
            "r == ((R_0*R_1*V_1 - R_0*V_0*R_1))/(R_1*V_0 - R_0*V_1)",
            "r == (R_0*R_1*V_1 - V_0*R_0*R_1)/(R_1*V_0 - R_0*V_1)",
            "r == (R_0*R_1*V_1 - V_0*R_1*R_0)/(R_1*V_0 - R_0*V_1)",
            "r == (R_0*R_1*(V_1 - V_0))/(R_1*V_0 - R_0*V_1)",
            "r == (R_0*R_1*(V_1 - V_0))/(R_1*V_0 - V_1*R_0)",
            "r == ((R_0*R_1) * (V_1 - V_0))/(V_0*R_1 - V_1*R_0)",
            "r == ((R_0*R_1) * (V_1 - V_0)/(V_0*R_1 - V_1*R_0))",
            "r == (R_0*R_1) * (V_1 - V_0)/((V_0*R_1) - (V_1*R_0))",
            "r == (R_0*R_1) * (V_1 - V_0)/(V_0*R_1 - V_1*R_0)",
            "r == (R_0*R_1*(V_1 - V_0))/(V_0*R_1 - V_1*R_0)",
            "r == R_0*R_1*(V_1 - V_0)/(V_0*R_1 - V_1*R_0)",
            "r == (R_0*V_1*R_1 - R_1*V_0*R_0)/(R_1*V_0 - R_0*V_1)",
            "r == (R_0*V_1*R_1 - R_1*V_0*R_0)/(V_0*R_1 - V_1*R_0)",
            "r == (R_0*(V_1*R_1 - V_0*R_1))/(V_0*R_1 - R_0*V_1)",
            "r == R_0*(V_1*R_1 - V_0*R_1)/(V_0*R_1 - V_1*R_0)",
            "r == (R_0*(V_1 - V_0))/(V_0*(1 - (V_1*R_0)/(V_0*R_1)))",
            "r == (R_1*R_0*(V_0 - V_1))/(R_0*V_1 - R_1*V_0)",
            "r == (R_1*R_0*(V_0 - V_1))/(R_0*V_1 - V_0*R_1)",
            "r == (R_1*R_0*(V_0 - V_1))/(V_1*R_0 - V_0*R_1)",
            "r == R_1*R_0*(V_0 - V_1)/(V_1*R_0 - V_0*R_1)",
            "r == (R_1*R_0*V_1 - R_1*R_0*V_0)/(V_0*R_1 - V_1*R_0)",
            "r == (R_1*R_0*V_1 - V_0*R_0*R_1)/(V_0*R_1 - V_1*R_0)",
            "r == (R_1*R_0*(V_1 - V_0))/(R_1*V_0 - R_0*V_1)",
            "r == R_1*R_0*(V_1 - V_0)/(R_1*V_0 - R_0*V_1)",
            "r == R_1*R_0*(V_1 - V_0)/(R_1*V_0 - V_1*R_0)",
            "r == ((R_1*R_0) * (V_1 - V_0))/(V_0*R_1 - V_1*R_0)",
            "r == (R_1*R_0*(V_1 - V_0))/(V_0*R_1 - V_1*R_0)",
            "r == R_1*R_0*(V_1 - V_0)/(V_0*R_1 - V_1*R_0)",
            "r == (R_1*V_0*R_0 - R_0*V_1*R_1)/(R_0*V_1 - R_1*V_0)",
            "r == (R_1*V_0*R_0 - R_1*R_0*V_1)/(V_1*R_0 - R_1*V_0)",
            "r == (R_1*V_0*R_0 - V_1*R_0*R_1)/(V_1*R_0 - R_1*V_0)",
            "r == ((R_1 - (V_0*R_1)/(V_1)))/((V_0*R_1)/(R_0*V_1) - 1)",
            "r == (R_1*V_1*R_0 - R_1*V_0*R_0)/(R_1*V_0 - V_1*R_0)",
            "r == (V_0*R_0*R_1 - R_0*V_1*R_1)/(R_0*V_1 - V_0*R_1)",
            "r == (V_0*R_0*R_1 - V_1*R_0*R_1)/(V_1*R_0 - V_0*R_1)",
            "r == (((V_0*R_0*R_1) - (V_1*R_1*R_0)))/((V_1*R_0) - (V_0*R_1))",
            "r == ((V_0*R_0*R_1) - (V_1*R_1*R_0))/(V_1*R_0 - V_0*R_1)",
            "r == (V_0*R_0*R_1 - V_1*R_1*R_0)/(V_1*R_0 - V_0*R_1)",
            "r == (V_0*R_0 - V_1*R_0)/((V_1*R_0)/(R_1) - V_0)",
            "r == (V_0*R_1*R_0 - R_0*V_1*R_1)/(R_0*V_1 - V_0*R_1)",
            "r == (V_0*R_1*R_0 - R_0*V_1*R_1)/(V_1*R_0 - V_0*R_1)",
            "r == (((V_0*R_1*R_0) - (V_1*R_0*R_1))/((V_1*R_0) - (V_0*R_1)))",
            "r == (V_0*R_1*R_0 - V_1*R_0*R_1)/((V_1*R_0) - (V_0*R_1))",
            "r == (V_0*R_1*R_0 - V_1*R_0*R_1)/(V_1*R_0 - V_0*R_1)",
            "r == (V_0*R_1*R_0 - V_1*R_1*R_0)/(R_0*V_1 - R_1*V_0)",
            "r == ( - V_0*R_1*R_0 + V_1*R_1*R_0)/(V_0*R_1 - V_1*R_0)",
            "r == ((V_0*R_1*R_0) - (V_1*R_1*R_0))/((V_1*R_0) - (R_1*V_0))",
            "r == ((V_0*R_1*R_0) - (V_1*R_1*R_0))/((V_1*R_0) - (V_0*R_1))",
            "r == (((V_0*R_1)/(V_1)) - R_1)/(1 - ((V_0*R_1)/(V_1*R_0)))",
            "r == ((V_0*R_1)/(V_1) - R_1)/(1 - (V_0*R_1)/(V_1*R_0))",
            "r == (V_0 - V_1) * (R_0*R_1)/((V_1*R_0) - (R_1*V_0))",
            "r == ((V_0 - V_1) * R_0*R_1)/((V_1*R_0 - V_0*R_1))",
            "r == ((V_0 - V_1) * R_0*R_1)/(V_1*R_0 - V_0*R_1)",
            "r == ((V_0 - V_1) * (R_1*R_0))/(V_1*R_0 - V_0*R_1)",
            "r == ((V_0 - V_1) * R_1*R_0)/(V_1*R_0 - V_0*R_1)",
            "r == (V_0 - V_1) * (R_1*R_0)/(V_1*R_0 - V_0*R_1)",
            "r ==  - ((V_0 - V_1)/((V_0)/(R_0) - (V_1)/(R_1)))",
            "r ==  - (V_0 - V_1)/((V_0)/(R_0) - (V_1)/(R_1))",
            "r == ((V_0 - V_1))/(((V_1)/(R_1) - (V_0)/(R_0)))",
            "r == ((V_0 - V_1))/((V_1)/(R_1) - (V_0)/(R_0))",
            "r == (V_0 - V_1)/(((V_1)/(R_1) - (V_0)/(R_0)))",
            "r == (V_0 - V_1)/(((V_1)/(R_1)) - ((V_0)/(R_0)))",
            "r == (V_0 - V_1)/((V_1)/(R_1) - (V_0)/(R_0))",
            "r == (V_1*R_0*R_1 - V_0*R_0*R_1)/(R_1*V_0 - R_0*V_1)",
            "r == ((V_1*R_0*R_1) - (V_0*R_0*R_1))/((V_0*R_1) - (V_1*R_0))",
            "r == (V_1*R_0*R_1 - V_0*R_0*R_1)/(V_0*R_1 - V_1*R_0)",
            "r == (V_1*R_0*R_1 - V_0*R_1*R_0)/((V_0*R_1 - V_1*R_0))",
            "r == (V_1*R_0*R_1 - V_0*R_1*R_0)/(V_0*R_1 - V_1*R_0)",
            "r == (V_1*R_1*R_0 - R_0*R_1*V_0)/(R_1*V_0 - V_1*R_0)",
            "r == (V_1*R_1*R_0 - V_0*R_0*R_1)/(V_0*R_1 - V_1*R_0)",
            "r == ((V_1) * (R_1) * (R_0) - (V_0) * (R_0) * (R_1))/((V_0) * (R_1) - (V_1) * (R_0))",
            "r == (V_1*R_1*R_0 - V_0*R_1*R_0)/(V_0*R_1 - V_1*R_0)",
            "r == ((V_1 - V_0) * R_0*R_1)/(R_1*V_0 - R_0*V_1)",
            "r == ((V_1 - V_0) * R_0*R_1)/(V_0*R_1 - R_0*V_1)",
            "r == ((V_1 - V_0) * (R_0*R_1))/((V_0*R_1 - V_1*R_0))",
            "r == ((V_1 - V_0) * (R_0*R_1))/(V_0*R_1 - V_1*R_0)",
            "r == ((V_1 - V_0) * R_0*R_1)/(V_0*R_1 - V_1*R_0)",
            "r == ((V_1 - V_0))/(((V_0)/(R_0) - (V_1)/(R_1)))",
            "r == ((V_1) - (V_0))/(((V_0)/(R_0)) - ((V_1)/(R_1)))",
            "r == (V_1 - V_0)/(((V_0)/(R_0) - (V_1)/(R_1)))",
            "r == (V_1 - V_0)/(((V_0)/(R_0)) - ((V_1)/(R_1)))",
            "r == (V_1 - V_0)/((V_0)/(R_0) - (V_1)/(R_1))",
            "r == (V_1 - V_0)/((V_0*R_1 - V_1*R_0)/(R_0*R_1))",
            "r ==  - (V_1 - V_0)/(((V_1)/(R_1) - (V_0)/(R_0)))",
            "r ==  - (V_1 - V_0)/(((V_1)/(R_1)) - ((V_0)/(R_0)))",
            "r ==  - (V_1 - V_0)/((V_1)/(R_1) - (V_0)/(R_0))",
            "(V_0 - V_1)/(((V_1)/(R_1)) - ((V_0)/(R_0))) == r",
            "(V_1*R_0*R_1 - V_0*R_0*R_1)/(V_0*R_1 - V_1*R_0) == r",
            "(V_1 - V_0)/((V_0)/(R_0) - (V_1)/(R_1)) == r"
        ]
    },
    "x*tan(theta) - (g*x**(2)*sec(theta)**(2))/(2*u**(2))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "tan(theta) * x - (1)/(2) * g*(x**(2))/(u**(2)*cos(theta)**(2))",
            "tan(theta) * x - (1)/(2) * g*((x)/(u*cos(theta)))**(2)",
            "tan(theta) * x - (g)/(2*u**(2)*cos(theta)**(2)) * x**(2)",
            "tan(theta) * x - (g)/(2*(u*cos(theta))**(2)) * x**(2)",
            "tan(theta) * x - (g*x**(2))/(cos(theta)**(2) * u**(2)*2)",
            "tan(theta) * x - (x**(2)*g)/(2*u**(2)*cos(theta)**(2))",
            "u*sin(theta) * (x)/(u*cos(theta)) - (1)/(2) * g*((x)/(u*cos(theta)))**(2)",
            "x*tan(theta) - ((1)/(2)) * g*((x**(2))/(u**(2)*cos(theta)**(2)))",
            "x*tan(theta) - (1)/(2) * g*(x**(2))/(u**(2)*cos(theta)**(2))",
            "x*tan(theta) - ((1)/(2)) * g*((x**(2))/(u**(2))) * sec(theta)**(2)",
            "x*tan(theta) - (1)/(2) * g*(x**(2))/(u**(2)) * sec(theta)**(2)",
            "x*tan(theta) - (1)/(2) * g*((x)/(u*cos(theta)))**(2)",
            "x*tan(theta) - (1)/(2*u**(2)) * g*x**(2)*sec(theta)**(2)",
            "x*tan(theta) - (g)/(2) * ((x**(2))/(u**(2)) * sec(theta)**(2))",
            "x*tan(theta) - (g)/(2) * ((x)/(u*cos(theta)))**(2)",
            "x*tan(theta) - ((g*x**(2))/(2*u**(2)*cos(theta)**(2)))",
            "x*tan(theta) - (g*x**(2))/(2*u**(2)*(cos(theta))**(2))",
            "x*tan(theta) - (g*x**(2))/(2*u**(2)*(cos(theta)**(2)))",
            "x*tan(theta) - (g*x**(2))/(2*u**(2)*cos(theta)**(2))",
            "x*tan(theta) - g*(x**(2))/(2*u**(2)*cos(theta)**(2))",
            "x*tan(theta) - (g*x**(2))/(2*(u**(2)) * (cos(theta))**(2))",
            "x*tan(theta) - ((g*x**(2))/(2*u**(2))) * sec(theta)**(2)",
            "x*tan(theta) - (g*x**(2))/(2*u**(2)) * sec(theta)**(2)",
            "x*tan(theta) - (g*x**(2))/(2*(u*cos(theta))**(2))",
            "x*tan(theta) - (g*x**(2)*sec(theta)**(2))/(2*u**(2))",
            "x*tan(theta) - g*x**(2)*(sec(theta)**(2))/(2*u**(2))",
            "x*tan(theta) - g*(x**(2))/(u**(2)*2) * sec(theta)**(2)",
            "x*tan(theta) - (x**(2)*g)/(2*u**(2)*cos(theta)**(2))"
        ]
    },
    "y == x*tan(theta) - (g*x**(2)*sec(theta)**(2))/(2*u**(2))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "y == ( - g*x**(2))/(2*u**(2)*cos(theta)**(2)) + x*tan(theta)",
            "y == ( - g*x**(2)*sec(theta)**(2))/(2*u**(2)) + x*tan(theta)",
            "y == sin(theta) * ((x)/(cos(theta))) + (1)/(2) * ( - g) * ((x)/(cos(theta) * (u)))**(2)",
            "y == (sin(theta) * x)/(cos(theta)) - (g*x**(2))/(2*u**(2)*cos(theta)**(2))",
            "y == tan(theta) * x - ((1)/(2) * g*x**(2))/(u**(2)*cos(theta)**(2))",
            "y == tan(theta) * x - (1)/(2) * g*((x**(2))/(u**(2)*cos(theta)**(2)))",
            "y == tan(theta) * x - (1)/(2) * g*(x**(2))/(u**(2)*(cos(theta))**(2))",
            "y == tan(theta) * x - (g*x**(2))/(2*u**(2)*cos(theta)**(2))",
            "y == tan(theta) * x - (g*x**(2)*sec(theta)**(2))/(2*u**(2))",
            "y == u*sin(theta) * ((x)/(u*cos(theta))) - (1)/(2) * g*((x)/(u*cos(theta)))**(2)",
            "y == ((x*sin(theta))/(cos(theta))) - (1)/(2) * (g*(x**(2))/(u**(2)*cos(theta)**(2)))",
            "y == ((x*sin(theta))/(cos(theta))) - (1)/(2) * g*(x**(2))/(u**(2)*cos(theta)**(2))",
            "y == x*(sin(theta))/(cos(theta)) - (1)/(2) * g*(x**(2))/(u**(2)*cos(theta)**(2))",
            "y == (x*sin(theta))/(cos(theta)) - (g*x**(2))/(2*u**(2)*cos(theta)**(2))",
            "y == (x*sin(theta))/(cos(theta)) - (x**(2)*g)/(2*u**(2)*cos(theta)**(2))",
            "y == x*tan(theta) + (1)/(2) * ( - g) * x**(2)*sec(theta)**(2) * u**( - 2)",
            "y == x*tan(theta) - (1)/(2) * (g*x**(2))/(u**(2)*cos(theta)**(2))",
            "y == x*tan(theta) - (1)/(2) * g*((x**(2))/(u**(2)*cos(theta)**(2)))",
            "y == x*tan(theta) - (1)/(2) * g*(x**(2))/(u**(2)*(cos(theta)**(2)))",
            "y == x*tan(theta) - (1)/(2) * g*(x**(2))/(u**(2)*cos(theta)**(2))",
            "y == x*tan(theta) - (1)/(2) * g*((x**(2))/(u**(2))) * sec(theta)**(2)",
            "y == x*tan(theta) - (1)/(2) * g*x**(2)*u**( - 2)*sec(theta)**(2)",
            "y == x*tan(theta) - (1)/(2) * g*((x)/(u*cos(theta)))**(2)",
            "y == x*tan(theta) - ((g)/(2*u**(2)*cos(theta)**(2))) * x**(2)",
            "y == x*tan(theta) - (g)/(2*u**(2)) * sec(theta)**(2) * x**(2)",
            "y == x*tan(theta) - (g)/(2) * ((x**(2))/(u**(2)*(cos(theta))**(2)))",
            "y == x*tan(theta) - (g)/(2) * ((x**(2))/(u**(2)*cos(theta)**(2)))",
            "y == x*tan(theta) - (g)/(2) * ((x*sec(theta))/(u))**(2)",
            "y == x*tan(theta) - (g)/(2) * (x*(sec(theta))/(u))**(2)",
            "y == x*tan(theta) - ((g)/(2)) * ((x)/(u*cos(theta)))**(2)",
            "y == x*tan(theta) - (g)/(2) * ((x)/(u*cos(theta)))**(2)",
            "y == x*tan(theta) - ((g*x**(2))/(2*u**(2)*(cos(theta))**(2)))",
            "y == x*tan(theta) - (g*x**(2))/(2*u**(2)*cos(theta)**(2))",
            "y == x*tan(theta) - g*(x**(2))/(2*u**(2)*cos(theta)**(2))",
            "y == (x*tan(theta)) - (g*x**(2))/(2*u**(2)) * sec(theta)**(2)",
            "y == x*tan(theta) - ((g*x**(2))/(2*u**(2))) * sec(theta)**(2)",
            "y == x*tan(theta) - (g*x**(2))/(2*u**(2)) * (sec(theta))**(2)",
            "y == x*tan(theta) - (g*x**(2))/(2*u**(2)) * sec(theta)**(2)",
            "y == x*tan(theta) - (g*x**(2))/(2*(u*cos(theta))**(2))",
            "y == x*(tan(theta)) - g*(x**(2)*(sec(theta)**(2)))/(2*u**(2))",
            "y == x*tan(theta) - (g*x**(2)*sec(theta)**(2))/(2*u**(2))",
            "y == x*tan(theta) - g*x**(2)*((sec(theta)**(2))/(2*u**(2)))",
            "y == x*tan(theta) - g*x**(2)*(sec(theta)**(2))/(2*u**(2))",
            "y == x*tan(theta) - x**(2)*g*(sec(theta)**(2))/(2*u**(2))",
            "y == (x*u**(2)*sin(2*theta) - x**(2)*g)/(2*u**(2)*cos(theta)**(2))",
            "y == ((x)/(u*cos(theta))) * u*sin(theta) - ((1)/(2)) * g*((x)/(u*cos(theta)))**(2)"
        ]
    },
    "u*sin(theta) * t - (1)/(2) * g*t**(2)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "sin(theta) * u*t - (1)/(2) * g*t**(2)",
            "t*u*sin(theta) - (1)/(2) * g*t**(2)",
            "t*u*sin(theta) - (g*t**(2))/(2)",
            "(u*sin(theta) * t) - ((1)/(2) * g*t**(2))",
            "u*sin(theta) * t - ((1)/(2)) * g*t**(2)",
            "u*sin(theta) * t - (1)/(2) * (g) * t**(2)",
            "u*sin(theta) * t - (1)/(2) * g*t**(2)",
            "u*sin(theta) * t +  - (g)/(2) * t**(2)",
            "u*sin(theta) * t - ((g)/(2)) * t**(2)",
            "u*sin(theta) * t - (g)/(2) * t**(2)",
            "u*t*(sin(theta)) - (1)/(2) * g*t**(2)",
            "u*t*sin(theta) - ((1)/(2)) * g*t**(2)",
            "u*t*sin(theta) - (1)/(2) * (g) * (t**(2))",
            "u*t*sin(theta) - (1)/(2) * g*t**(2)",
            "u*t*sin(theta) - ((g)/(2)) * (t**(2))",
            "u*t*sin(theta) - ((g)/(2)) * t**(2)",
            "u*t*sin(theta) - (g)/(2) * (t**(2))",
            "u*t*sin(theta) - (g)/(2) * t**(2)",
            "u*t*sin(theta) - (g*t**(2))/(2)",
            "u*t*sin(theta) - g*(t**(2))/(2)"
        ]
    },
    "y == u*sin(theta) * t - (1)/(2) * g*t**(2)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "y ==  - (g)/(2) * t**(2) + t*u*sin(theta)",
            "y ==  - (g)/(2) * t**(2) + u*t*sin(theta)",
            "y == (sin(theta) * t*u) - (((1)/(2)) * g*t**(2))",
            "y == sin(theta) * u*t + (1)/(2) * ( - g) * t**(2)",
            "y == sin(theta) * u*t - ((1)/(2) * g*t**(2))",
            "y == sin(theta) * u*t - (1)/(2) * g*t**(2)",
            "y == t*u*sin(theta) - ((1)/(2)) * g*t**(2)",
            "y == t*u*sin(theta) - (1)/(2) * g*t**(2)",
            "y == t*u*sin(theta) - (g*t**(2))/(2)",
            "y == (u*sin(theta) * t) - (((1)/(2)) * g*t**(2))",
            "y == (u*sin(theta)) * t + (1)/(2) * ( - g) * t**(2)",
            "y == u*(sin(theta)) * t - (1)/(2) * g*t**(2)",
            "y == u*sin(theta) * t + ((1)/(2)) * ( - g) * t**(2)",
            "y == u*sin(theta) * t + (1)/(2) * ( - g) * (t**(2))",
            "y == u*sin(theta) * t - ((1)/(2) * g*t**(2))",
            "y == u*sin(theta) * t - ((1)/(2)) * g*t**(2)",
            "y == u*sin(theta) * t - (1)/(2) * (g*t**(2))",
            "y == u*sin(theta) * t - (1)/(2) * g*t**(2)",
            "y == u*sin(theta) * t - ((g)/(2)) * t**(2)",
            "y == u*sin(theta) * t - (g)/(2) * t**(2)",
            "y == u*sin(theta) * t - (g*t**(2))/(2)",
            "y == u*t*(sin(theta)) - (1)/(2) * (g) * (t**(2))",
            "y == u*t*sin(theta) - ((1)/(2) * g*t**(2))",
            "y == u*t*sin(theta) - ((1)/(2)) * g*t**(2)",
            "y == u*t*sin(theta) - (1)/(2) * g*t**(2)",
            "y ==  + u*t*sin(theta) - (g)/(2) * t**(2)",
            "y == u*t*sin(theta) - ((g)/(2)) * t**(2)",
            "y == u*t*sin(theta) - (g)/(2) * t**(2)",
            "y == u*t*sin(theta) - (g*t**(2))/(2)",
            "y == u*t*sin(theta) - g*(t**(2))/(2)"
        ]
    },
    "a == ((v**(2)-u**(2))/(2*s))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "((1)/(2) * (v**(2) - u**(2)))/(s) == a",
            "a == ((1)/(2) * (v**(2) - u**(2)))/(s)",
            "a == (1)/(2) * ((v**(2) - u**(2))/(s))",
            "a == (1)/(2) * (v**(2) - u**(2))/(s)",
            "a ==  - (u**(2) - v**(2))/(2*s)",
            "a == ( - u**(2) + v**(2))/(2*s)",
            "a == (u**(2) - v**(2))/( - 2*s)",
            "a == (v**(2))/(2*s) - (u**(2))/(2*s)",
            "a == ((v**(2))/(2))/(s) - ((u**(2))/(2))/(s)",
            "a == ((v**(2))/(2) - (u**(2))/(2))/(s)",
            "a == ((v**(2) - u**(2))/(2)) * ((1)/(s))",
            "a == ((v)**(2) - (u)**(2))/(2*s)",
            "a == ((v**(2) - u**(2)))/(2*s)",
            "a == ((v**(2) - u**(2))/(2*s))",
            "a == ((v**(2)) - (u**(2)))/(2*s)",
            "a == (v**((2)) - u**((2)))/(2*s)",
            "a == (v**(2) +  - u**(2))/(2*s)",
            "a == (v**(2) - (u**(2)))/(2*s)",
            "a == (v**(2) - u**(2))/(2*s)",
            "a == (((v**(2) - u**(2))/(2))/(s))",
            "a == ((v**(2) - u**(2))/(2))/(s)",
            "a == (v**(2) - u**(2))/((2) * s)",
            "a == (v**(2) - u**(2))/(2*(s))",
            "a == ((v**(2) - u**(2))/(s)) * (1)/(2)",
            "a == (v**(2) - u**(2))/(s) * (1)/(2)",
            "a == (((v**(2) - u**(2)))/(s))/(2)",
            "a == (((v**(2) - u**(2))/(s)))/(2)",
            "a == (((v**(2) - u**(2))/(s))/(2))",
            "a == ((v**(2) - u**(2))/(s))/(2)",
            "a == (v**(abs(2)) - u**(abs(2)))/(2*s)",
            "a == ((v - u) * (u + v))/(2*s)",
            "a == ((v + u) * (v - u))/(2*s)",
            "a == ((v - u) * (v + u))/(2*s)",
            "a == (v - u) * (v + u)/(2*s)",
            "a == (v - u) * ((v + u)/(2))/(s)",
            "a == ((v*v) - (u*u))/(2*s)",
            "a == (v*(v) - u*(u))/(2*s)",
            "a == (v*v - u*u)/(2*s)",
            "a == ((v) * (v) - (u) * (u))/((2) * (s))",
            "a == ((v*v - u*u)/(2))/(s)",
            "a == (v*v - u*u)/(s + s)",
            "( - u**(2) + v**(2))/(2*s) == a",
            "((v**(2))/(2) - (u**(2))/(2))/(s) == a",
            "((v**(2) - u**(2)) * (1)/(2))/(s) == a",
            "((v**(2) - u**(2)))/((2*s)) == a",
            "((v**(2)) - (u**(2)))/(2*s) == a",
            "(v**((2)) - u**((2)))/(2*s) == a",
            "(v**(2) - u**(2))/( + 2*s) == a",
            "(v**(2) - u**(2))/(2*s) == a",
            "((v**(2) - u**(2))/(2))/(s) == a",
            "((v**(2) - u**(2))/(s))/(2) == a",
            "(v**(2) - u**(2))/(s*2) == a",
            "(v*v - u*u)/(2*s) == a"
        ]
    },
    "v == sqrt(((2*E)/(m)))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "((2*E)/(m))**((1)/(2)) == v",
            "(2*(E)/(m))**((1)/(2)) == v",
            "((E)/((1)/(2) * m))**((1)/(2)) == v",
            "sqrt((2*E*((1)/(m)))) == v",
            "sqrt(((2*E)/(m))) == v",
            "sqrt((2*E)/(m)) == v",
            "(sqrt(2*(E)/(m))) == v",
            "sqrt(2*(E)/(m)) == v",
            "(sqrt(2*E))/(sqrt(m)) == v",
            "(sqrt((E)/((1)/(2) * m))) == v",
            "sqrt(((E)/((1)/(2) * m))) == v",
            "sqrt((E)/(((1)/(2)) * m)) == v",
            "sqrt((E)/((1)/(2) * m)) == v",
            "sqrt((E*2)/(m)) == v",
            "sqrt((E)/(m*(1)/(2))) == v",
            "(sqrt(E))/((sqrt(1))/(sqrt(2)) * sqrt(m)) == v",
            "v == ((((1)/(2)) * m)/(E))**( - ((1)/(2)))",
            "v == ((2*E)/(m))**((1)/(2))",
            "v == (2*(E)/(m))**((1)/(2))",
            "v == ((E)/(((1)/(2)) * (m)))**((1)/(2))",
            "v == ((E)/(((1)/(2)) * m))**((1)/(2))",
            "v == ((E)/((1)/(2) * (m)))**((1)/(2))",
            "v == ((E)/((1)/(2) * m))**((1)/(2))",
            "v == sqrt(((2*E)/(1))/(m))",
            "v == (sqrt((2*E)/(m)))",
            "v == sqrt(((2*E))/(m))",
            "v == sqrt(((2*E)/(m)))",
            "v == sqrt((2*E)/(m))",
            "v == sqrt(((2) * E)/(m))",
            "v == sqrt(((2*(E))/(m)))",
            "v == sqrt((2) * (E)/(m))",
            "v == sqrt((2*(E)/(m)))",
            "v == sqrt(2*((E)/(m)))",
            "v == sqrt(2*(E)/(m))",
            "v == sqrt(2*E*m**( - 1))",
            "v == (sqrt((2*E*m)))/(m)",
            "v == (sqrt(2*E*m))/(m)",
            "v == sqrt((2*E)) * sqrt((1)/(m))",
            "v == sqrt(2*E) * sqrt((1)/(m))",
            "v == (sqrt(2*E))/(sqrt(m))",
            "v == sqrt((2)/(m) * E)",
            "v == sqrt(2) * sqrt((E)/(m))",
            "v == (sqrt(2) * sqrt(E*m))/(m)",
            "v == (sqrt((E)/((1)/(2) * m)))",
            "v == sqrt(((E)/(((1)/(2)) * m)))",
            "v == sqrt(((E)/((1)/(2) * m)))",
            "v == sqrt(((E)/((1)/(2)))/(m))",
            "v == sqrt((E)/(((1)/(2) * m)))",
            "v == sqrt((E)/(((1)/(2)) * (m)))",
            "v == sqrt((E)/(((1)/(2)) * m))",
            "v == sqrt((E)/((1)/((2)/(m))))",
            "v == sqrt((E)/((1)/(2) * (m)))",
            "v == sqrt((E)/((1)/(2) * m))",
            "v == sqrt((E*(2))/(m))",
            "v == sqrt((E*2)/(m))",
            "v == sqrt(E*(2)/(m))",
            "v == sqrt((E)/(m*(1)/(2)))",
            "v == sqrt(((E)/((m)/(2))))",
            "v == sqrt((E)/(((m)/(2))))",
            "v == sqrt((E)/((m)/(2)))",
            "v == sqrt((E)/(m) * 2)",
            "v == (sqrt(E))/(sqrt((1)/(2) * m))"
        ]
    },
    "t == sqrt((2*s)/(a))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "((2*s)/(a))**((1)/(2)) == t",
            "(2*(s)/(a))**((1)/(2)) == t",
            "((s)/(((1)/(2)) * (a)))**((1)/(2)) == t",
            "sqrt(((2*s)/(a))) == t",
            "sqrt((2*s)/(a)) == t",
            "(sqrt(2*(s)/(a))) == t",
            "sqrt(((2*(s))/(a))) == t",
            "sqrt((2*(s)/(a))) == t",
            "sqrt(2*(s)/(a)) == t",
            "(sqrt(2*s))/(sqrt(a)) == t",
            "sqrt((s)/((0*t + (1)/(2) * a))) == t",
            "sqrt((s)/((1)/(2) * a)) == t",
            "t ==  - (0 - sqrt(0**(2) + 2*a*s))/(a)",
            "t == ( - 0 + sqrt(0**(2) + 2*a*s))/(a)",
            "t == (0 + sqrt(0**(2) + 2*a*s))/(a)",
            "t == ((((1)/(2)) * a)/(s))**( - (1)/(2))",
            "t == (1)/(a) * sqrt(2*a*s)",
            "t == (2**((1)/(2))*s**((1)/(2)))/(a**((1)/(2)))",
            "t == ((2*s)/(a))**((1)/(2))",
            "t == (2*(s)/(a))**((1)/(2))",
            "t == abs(sqrt((2*s)/(a)))",
            "t == ((s)/(((1)/(2)) * (a)))**((1)/(2))",
            "t == ((s)/(((1)/(2)) * a))**((1)/(2))",
            "t == ((s)/((1)/(2) * a))**((1)/(2))",
            "t == (sqrt(0**(2) + 2*a*s))/(a)",
            "t == sqrt((2)/(a) * s)",
            "t == (sqrt(2*a*s + 0**(2) - 0))/(a)",
            "t == (sqrt(2*a*s + 0))/(a)",
            "t ==  -  - (sqrt(2*a*s))/(a)",
            "t == (sqrt(2*a*s))/(a)",
            "t == sqrt((2*(s - 0*t))/(a))",
            "t == sqrt(((2*s)/(1))/(a))",
            "t == sqrt(2*s*(1)/(a))",
            "t == sqrt(( - 2*s)/( - 2*0 - a))",
            "t == (sqrt((2*s)/(a)))",
            "t == sqrt(((2*s))/(a))",
            "t == sqrt(((2*s)/(a)))",
            "t == sqrt((2*s)/(a))",
            "t == (sqrt(2*(s)/(a)))",
            "t == sqrt(2*((s)/(a)))",
            "t == sqrt(2*(s)/(a))",
            "t == (sqrt(2*s*a))/(a)",
            "t == (sqrt(2) * sqrt(s*a))/(a)",
            "t == (sqrt(2) * sqrt(s))/(sqrt(a))",
            "t == (sqrt(2*s))/(sqrt(a))",
            "t == (sqrt(4*(1)/(2) * a*s))/(a)",
            "t == sqrt((s - 0)/((1)/(2) * a))",
            "t == sqrt((s)/(0 + (1)/(2) * a))",
            "t == sqrt((s - 0*t)/((1)/(2) * a))",
            "t == sqrt((s)/((0*t + (1)/(2) * a)))",
            "t == sqrt(((s)/((1)/(2) * a)))",
            "t == sqrt((s)/(((1)/(2) * a)))",
            "t == sqrt((s)/(((1)/(2)) * a))",
            "t == sqrt((s)/((1)/((2)/(a))))",
            "t == sqrt((s)/((1)/(2) * (a)))",
            "t == sqrt((s)/((1)/(2) * a))",
            "t == sqrt((s)/((1)/(2) * a) - 0)",
            "t == sqrt((s*2)/(a))",
            "t == sqrt(s*(2)/(a))",
            "t == sqrt((s)/(a*((1)/(2))))",
            "t == sqrt((s)/(a*(1)/(2)))",
            "t == sqrt((s)/((a)/(2)))",
            "t == sqrt((s)/(a) * 2)",
            "t == (sqrt(s))/(sqrt((1)/(2) * a))"
        ]
    },
    "T == sqrt((4*pi**(2)*r**(3))/(G*M))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(2*pi)/((((G*M)/(r**(2)))/(r))**((1)/(2))) == T",
            "(2*pi)/(((G*M)/(r**(3)))**((1)/(2))) == T",
            "2*(pi)/(((G*M)/(r**(3)))**((1)/(2))) == T",
            "2*pi*r*sqrt((r)/(G*M)) == T",
            "(2*pi)/(sqrt(((G*M)/(r**(2)))/(r))) == T",
            "(2*pi)/(sqrt((G*M)/((r)**(3)))) == T",
            "(2*pi)/(sqrt((G*M)/(r**(3)))) == T",
            "(2*pi)/(sqrt(G*(M)/(r**(3)))) == T",
            "2*pi*sqrt((r**(3))/(G*M)) == T",
            "(((4*pi**(2)) * r**(3))/(G*M))**((1)/(2)) == T",
            "((r**(3))**((1)/(2)) * 2*pi)/((G*M)**((1)/(2))) == T",
            "((r**(3))/(G*M))**((1)/(2)) * 2*pi == T",
            "(r*(4*pi**(2))/((G*M)/(r**(2))))**((1)/(2)) == T",
            "sqrt((4*pi**(2))/(((G*M)/(r**(2)))/(r))) == T",
            "sqrt((4*pi**(2))/(((G*M)/(r**(3))))) == T",
            "sqrt((4*pi**(2))/((G*M)/(r**(3)))) == T",
            "sqrt((4*pi**(2))/(G*(M)/(r**(3)))) == T",
            "sqrt((4*pi**(2)*r**(3))/(G*M)) == T",
            "sqrt((4*pi**(2)*r**(3))/(M*G)) == T",
            "((sqrt(4*pi**(2)*r**(3)))/(sqrt(G*M))) == T",
            "sqrt((4*r**(3)*pi**(2))/(G*M)) == T",
            "(sqrt(4*r**(3)*pi**(2)))/(sqrt(G*M)) == T",
            "sqrt((r**(2)*(r*4*pi**(2)))/(G*M)) == T",
            "sqrt((r**(3)*4*pi**(2))/(G*M)) == T",
            "T == 2*pi*(1)/(sqrt(G*(M)/(r**(3))))",
            "T == (2*pi*abs(r) * sqrt(G*M*r))/(G*M)",
            "T == (2*pi)/((G*M)**((1)/(2)) * r**(( - 3)/(2)))",
            "(T) == (2*pi)/((((G*M)/(r**(2)))/(r))**((1)/(2)))",
            "T == ((2*pi)/(((G*M)/(r**(3)))**((1)/(2))))",
            "T == (2*pi)/(((G*M)/(r**(3)))**((1)/(2)))",
            "T == 2*(pi)/(((G*M)/(r**(3)))**((1)/(2)))",
            "T == (2*pi*r**(2))/(sqrt(G*M*r))",
            "T == (2*pi*r**((3)/(2)))/(G**((1)/(2))*M**((1)/(2)))",
            "T == (2*pi*r**((3)/(2)))/((G*M)**((1)/(2)))",
            "T == (2*pi*r**((3)/(2)))/(sqrt(G*M))",
            "T == (2*pi*r**((3)/(2)))/((sqrt(G)) * (sqrt(M)))",
            "T == (2*pi*r**((3)/(2)))/(sqrt(G) * sqrt(M))",
            "T == (2*pi) * ((r**(3))/(G*M))**((1)/(2))",
            "T == 2*pi*((r**(3))/(G*M))**((1)/(2))",
            "T == (2*pi*r)/(sqrt((G*M)/(r)))",
            "T == (2*pi*r*sqrt(G*M*r))/(G*M)",
            "T == 2*pi*r*sqrt((r)/(G*M))",
            "T == 2*pi*r*sqrt((r)/(M*G))",
            "T == ((2*pi*r) * sqrt(r))/(sqrt((G*M)))",
            "T == (2*pi*r*sqrt(r))/(sqrt(G*M))",
            "T == (2*pi*r*sqrt(r) * sqrt(G*M))/(G*M)",
            "T == (2*pi*r*sqrt(r) * sqrt(M*G))/(M*G)",
            "T == ((2*pi))/(sqrt(((G*M)/(r**(2)))/(r)))",
            "T == (2*pi)/(sqrt((((G*M)/(r**(2))))/(r)))",
            "T == (2*pi)/(sqrt(((G*M)/((r)**(2)))/(r)))",
            "T == (2*pi)/(sqrt(((G*M)/(r**(2)))/(r)))",
            "T == (2*pi)/(sqrt((G*M)/(r**(2)*r)))",
            "T == (2*pi)/((sqrt((G*M)/(r**(3)))))",
            "T == (2*pi)/(sqrt(((G*M)/(r**(3)))))",
            "T == (2*pi)/(sqrt((G*(M)/(r**(3)))))",
            "T == (2*pi)/(sqrt((G*M)/((r)**(3))))",
            "T == (2*pi)/(sqrt((G*M)/(r**((3)))))",
            "T == (2*pi)/(sqrt((G*M)/(r**(3))))",
            "T == (2*pi)/(sqrt(G*(M)/(r**(3))))",
            "T == 2*(pi)/(sqrt((G*M)/(r**(3))))",
            "T == 2*(pi)/(sqrt(G*(M)/(r**(3))))",
            "T == (2*pi)/(sqrt((G*M)/(r**(abs(3)))))",
            "T == (2*pi)/(sqrt((G*M)/(r*r*r)))",
            "T == (2*pi)/((sqrt(G*M))/(sqrt(r**(3))))",
            "T == (2*pi)/(sqrt((G)/(r**(2)*r) * M))",
            "T == (2*pi) * sqrt((r**(3))/(G*M))",
            "T == 2*pi*(sqrt((r**(3))/(G*M)))",
            "T == 2*pi*sqrt(((r**(3))/(G*M)))",
            "T == 2*pi*sqrt((r**(3))/(G*M))",
            "T == (2*pi*sqrt(r**(3)*G*M))/(G*M)",
            "T == ((2*pi) * sqrt(r**(3)))/(sqrt(G*M))",
            "T == (2*pi*sqrt(r**(3)))/(sqrt(G*M))",
            "T == 2*pi*(sqrt(r**(3)))/(sqrt(G*M))",
            "T == (2*pi*sqrt(r))/(sqrt((G*M)/(r**(2))))",
            "T == (2*r**((3)/(2))*pi)/(G**((1)/(2))*M**((1)/(2)))",
            "T == (2*r**((3)/(2))*pi)/(sqrt(G*M))",
            "T == (2*r*pi)/(sqrt((G*M)/(r)))",
            "T == (((2*r*pi) * sqrt(G*M*r))/(G*M))",
            "T == ((2*r) * (pi) * (sqrt(G*M*r)))/(G*M)",
            "T == (2*r*pi*sqrt(G*M*r))/(G*M)",
            "T == 2*r*pi*(sqrt(G*M*r))/(G*M)",
            "T == (2*r*pi*sqrt(r))/(sqrt(G*M))",
            "T == (((4*pi**(2)) * (r**(3)))/(G*M))**((1)/(2))",
            "T == (((4*pi**(2)) * r**(3))/(G*M))**((1)/(2))",
            "T == ((4*pi**(2)*r**(3))/(G*M))**((1)/(2))",
            "T == pi*2*r*(sqrt((r)/(G*M)))",
            "T == ((r**((3)/(2))) * (2*pi))/((G*M)**((1)/(2)))",
            "T == ((r**(3)*4*pi**(2))/(G*M))**((1)/(2))",
            "T == (r**(3)*4*(pi**(2))/(G*M))**((1)/(2))",
            "T == ((r*4*pi**(2))/(G*(M)/(r**(2))))**((1)/(2))",
            "T == sqrt(((2**(2)*pi**(2)*r))/((G*M)/(r**(2))))",
            "T == sqrt((2**(2)*pi**(2)*r)/((G*M)/(r**(2))))",
            "T == sqrt(((2*pi)**(2) * (r**(3)))/((G) * (M)))",
            "T == sqrt(((2*pi)**(2) * r**(3))/(G*M))",
            "T == sqrt(((4*pi**(2))/(G*M)) * r**(3))",
            "T == sqrt((4*pi**(2))/(((G*M)/(r**(3)))))",
            "T == sqrt((4*pi**(2))/((G*M)/(r**(3))))",
            "T == sqrt((4*pi**(2))/(G*M) * r**(3))",
            "T == sqrt(((4*(pi**(2)))/(G*M)) * r**(3))",
            "T == sqrt(((4*pi**(2)) * (r**(3)))/(G*M))",
            "T == sqrt(((4*pi**(2)*r**(3)))/(G*M))",
            "T == sqrt((4*pi**((2))*r**((3)))/(G*M))",
            "T == sqrt((4*pi**(2)) * (r**(3))/(G*M))",
            "T == sqrt((4*pi**(2)*(r**(3)))/(G*(M)))",
            "T == sqrt((4*pi**(2)*(r**(3))/(G*M)))",
            "T == sqrt((4*pi**(2)*r**(3))/(G*M))",
            "T == sqrt(4*pi**(2)*((r**(3))/(G))/(M))",
            "T == sqrt(4*pi**(2)*(r**(3))/(G*M))",
            "T == sqrt(((4) * (pi**(2)) * (r**(3)))/((G) * (M)))",
            "T == (sqrt(4*pi**(2)*r**(3)))/(sqrt(G*M))",
            "T == sqrt((4*pi**(2)*r)/(((G*M)/(r**(2)))))",
            "T == sqrt((4*pi**(2)*r)/((G*M)/(r**(2))))",
            "T == sqrt((4*pi*pi*r*r*r)/(G*M))",
            "T == sqrt(4*(r**(3))/(G*M) * pi**(2))",
            "T == sqrt((4*r**(3)*pi**(2))/(G*M))",
            "T == sqrt(4*r**(3)*(pi**(2))/(G*M))",
            "T == sqrt((4*r**(4)*pi**(2))/(G*M*r))",
            "T == sqrt((4*r*pi**(2))/((G*M)/(r**(2))))",
            "T == sqrt((4*r*pi**(2))/(G*M) * r**(2))",
            "T == sqrt((4*r*pi**(2)*r**(2))/(G*M))",
            "T == sqrt((r**(2)*(4*pi**(2)*r))/(G*M))",
            "T == sqrt((r*(2*pi)**(2))/((G*M)/(r**(2))))",
            "T == sqrt(r) * (2*pi*r)/(sqrt(G*M))",
            "T == (sqrt(r) * (2*pi))/((sqrt(G*M))/(r))",
            "T == (sqrt(r) * 2*pi)/(sqrt((G*M)/(r**(2))))",
            "T == sqrt(((r)**(3) * (2)**(2) * (pi)**(2))/(G*M))",
            "T == sqrt((r**(3)*2**(2)*pi**(2))/(G*M))",
            "T == sqrt((r**(3)*(2*pi)**(2))/(G*M))",
            "T == sqrt(r**(3)) * (2*pi)/(sqrt(G*M))",
            "T == sqrt((r**(3)*(4*pi**(2)))/(G*M))",
            "T == sqrt((r**(3)*4*pi**(2))/(G*M))",
            "T == sqrt(r**(3)*((4*pi**(2))/(G*M)))",
            "T == sqrt((r**(3)) * (4) * (pi**(2))/(G*M))",
            "T == sqrt(((r**(3)) * 4*pi**(2))/(M*G))",
            "T == sqrt((r**(3))/(G*M)) * 2*pi",
            "T == sqrt(((r**(3))/(G*M)) * (2*pi)**(2))",
            "T == sqrt(r*(4*pi**(2))/((G*M)/(r**(2))))",
            "T == sqrt((r*4*pi**(2)*r**(2))/(G*M))"
        ]
    },
    "F_D == (5)/(4) * F_f": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(10)/(8) * F_f == F_D",
            "((1)/((8)/(10))) * F_f == F_D",
            "(2*F_f)/(8) + F_f == F_D",
            "((5)/(4)) * F_f == F_D",
            "(5)/(4) * F_f == F_D",
            "(5*F_f)/(4) == F_D",
            "5*(F_f)/(4) == F_D",
            "F_D == (100)/(80) * F_f",
            "F_D == (100*F_f)/(80)",
            "F_D == 100*((F_f)/(80))",
            "F_D == 100*(F_f)/(80)",
            "F_D == ((10)/(8)) * F_f",
            "F_D == (10)/(8) * F_f",
            "F_D == (10*F_f)/(8)",
            "F_D == 10*(F_f)/(8)",
            "F_D == (1 + (1)/(4)) * F_f",
            "F_D == (125)/(100) * F_f",
            "F_D == (1)/(4) * F_f + F_f",
            "F_D**(1) == (5)/(4) * F_f",
            "F_D == (1)/(8) * F_f*10",
            "F_D == 1*F_f + (1)/(4) * F_f",
            "F_D == ((5)/(4)) * F_f",
            "F_D == (5)/(4) * (F_f)",
            "F_D == (5)/(4) * F_f",
            "F_D == (5*F_f)/(4)",
            "F_D == 5*((F_f)/(4))",
            "F_D == 5*(F_f)/(4)",
            "F_D == F_f/0.8",
            "F_D == (F_f*100)/(80)",
            "F_D == F_f*((100)/(80))",
            "F_D == F_f*(100)/(80)",
            "F_D == F_f*((10)/(8))",
            "F_D == F_f*(10)/(8)",
            "F_D == F_f + 1*(1)/(4) * F_f",
            "F_D == F_f + ((1)/(4) * F_f)",
            "F_D == F_f + ((1)/(4)) * F_f",
            "F_D == F_f + (1)/(4) * F_f",
            "F_D == F_f + (2*(F_f)/(8))",
            "F_D == F_f + 2*((F_f)/(8))",
            "F_D == ((F_f))/(((4)/(5)))",
            "F_D == (F_f)/((4)/(5))",
            "F_D == (F_f)/(4) * 5",
            "F_D == (F_f) * (5)/(4)",
            "F_D == F_f*((5)/(4))",
            "F_D == F_f*(5)/(4)",
            "F_D == ((F_f)/(80)) * 100",
            "F_D == (F_f)/(80) * 100",
            "F_D == (F_f)/(((8)/(10)))",
            "F_D == (F_f)/((8)/(10))",
            "F_D == (F_f)/(8) * 10",
            "F_D == F_f + F_f*(1)/(4)",
            "F_D == F_f + ((F_f)/(4))",
            "F_D == F_f + (F_f)/(4)",
            "F_D == F_f + ((F_f)/((4)/(5)) * ((1)/(5)))",
            "F_f*(10)/(8) == F_D",
            "(F_f)/((4)/(5)) == F_D",
            "(F_f)/(4) + F_f == F_D",
            "F_f*(5)/(4) == F_D",
            "(F_f)/((8)/(10)) * (10)/(10) == F_D",
            "(F_f)/((8)/(10)) == F_D",
            "F_f + (F_f)/(4) == F_D"
        ]
    },
    "2*pi*sqrt((r**(3))/(k))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(2*pi*r**(2))/(sqrt(r*k))",
            "(2*pi*r**((3)/(2)))/(k**((1)/(2)))",
            "2*pi*(r**((3)/(2)))/((k)**((1)/(2)))",
            "(2*pi*r**((3)/(2)))/(sqrt(k))",
            "2*pi*(r**((3)/(2)))/(sqrt(k))",
            "2*pi*((r**(3))/(k))**((1)/(2))",
            "(2*pi*r*((r)/(k))**((1)/(2)))",
            "(2*pi*(r))/(sqrt((k)/(r)))",
            "(2*pi*r)/(sqrt((k)/(r)))",
            "2*pi*(r)/(sqrt((k)/(r)))",
            "(2*pi*r)/(sqrt((k)/(r**(2)) * r))",
            "2*pi*r*(sqrt(k*r))/(k)",
            "2*pi*r*sqrt((r)/(k))",
            "(2*pi*r*sqrt(r))/(sqrt(k))",
            "2*pi*r*(sqrt(r))/(sqrt(k))",
            "2*(pi)/(sqrt((k)/(r**(3))))",
            "2*pi*sqrt((r**(3))/(k))",
            "((4*pi**(2)*r**(3))/(k))**((1)/(2))",
            "sqrt((4*pi**(2))/(k) * r**(3))",
            "sqrt((4*pi**(2)*r**(3))/(k))",
            "sqrt(4*pi**(2)*(r**(3))/(k))",
            "(sqrt((k)/(r)) * (2*(pi) * r**(2)))/(k)"
        ]
    },
    "T == 2*pi*sqrt((r**(3))/(k))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(2*pi*r)/(sqrt(((k)/(r**(2))) * r)) == T",
            "(2*r*pi*sqrt(r))/(sqrt(k)) == T",
            "T == (2*pi*r**(2))/(k) * sqrt((k)/(r))",
            "T == (2*pi*r**(2))/(sqrt(k*r))",
            "T == (2*pi*r**(2)*sqrt((k)/(r)))/(k)",
            "T == 2*pi*(r**((3)/(2)))/(k**((1)/(2)))",
            "T == 2*pi*r**((3)/(2))*k**(( - 1)/(2))",
            "T == (2*pi*r**((3)/(2)))/(sqrt(k))",
            "T == (2*pi*r)/(((k)/(r))**((1)/(2)))",
            "T == (2*pi*r)/(sqrt(((4000*(k)/(r**(2))) * r)/(4000)))",
            "T == (2*pi*(r))/(sqrt((k)/(r)))",
            "T == (2*pi*r)/(sqrt(((k)/(r))))",
            "T == (2*pi*r)/(sqrt((k)/(r)))",
            "T == 2*pi*(r)/(sqrt((k)/(r)))",
            "T == (2*pi*r)/(sqrt((k)/(r**(2)) * r))",
            "T == (2*pi*r)/(sqrt((k*r)/(r**(2))))",
            "T == (2*pi*r*sqrt((r)/(k)))",
            "T == 2*pi*r*sqrt((r)/(k))",
            "T == (2*pi*r*sqrt(r*k))/(k)",
            "T == (2*pi*r)/(sqrt(r*((k)/(r**(2)))))",
            "T == (2*pi*r*sqrt(r))/(sqrt(k))",
            "T == (2*pi)/(sqrt((k)/(r**(3))))",
            "T == (2*pi) * sqrt((r**(3))/(k))",
            "T == 2*pi*sqrt((r**(3))/(k))",
            "T == (2*pi*(sqrt(r**(3))))/(sqrt(k))",
            "T == (2*pi*sqrt(r**(3)))/(sqrt(k))",
            "T == 2*r**((3)/(2))*pi*k**( - (1)/(2))",
            "T == (2*r*pi)/(sqrt(((k)/(r))))",
            "T == (2*r*pi)/(sqrt((k)/(r)))",
            "T == ((2*r*pi))/((sqrt(((k)/(r**(2))) * r)))",
            "T == (2*r*pi)/(sqrt(r*((k)/(r**(2)))))",
            "T == (2*r*pi*sqrt(r))/(sqrt(k))",
            "T == (pi*2*r)/(sqrt((k)/(r)))",
            "T == sqrt(((2*pi)**(2) * r**(3))/(k))",
            "T == sqrt(((4*pi**(2))/(k)) * r**(3))",
            "T == sqrt((4*pi**(2)*r**(3))/(k))",
            "T == sqrt(4*pi**(2)*(r**(3))/(k))"
        ]
    },
    "(1)/(2) * m*v**(2)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "((1)/(2) * m*v**(2))",
            "((1)/(2)) * (m) * (v**(2))",
            "((1)/(2)) * m*v**(2)",
            "(1)/(2) * (m) * (v)**(2)",
            "(1)/(2) * (m) * v**(2)",
            "(1)/(2) * m*(v)**(2)",
            "(1)/(2) * m*v**(2)",
            "(1)/(2) * m*v*v",
            "(m)/(2) * v*v",
            "m*v**(2)*(1)/(2)",
            "(m*(v**(2)))/(2)",
            "(m*v**(2))/(2)",
            "m*(v**(2))/(2)",
            "m*v*(v)/(2)",
            "(v**(2)*m)/(2)",
            "v**(2)*(m)/(2)"
        ]
    },
    "E == (1)/(2) * m*v**(2)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "((1)/(2)) * m*v**(2) == E",
            "(1)/(2) * m*v**(2) == E",
            "(1)/(2) * m*v*v == E",
            "(1)/(2) * v**(2)*m == E",
            "E**(1) == (1)/(2) * m*v**(2)",
            "E ==  + (1)/(2) * m*v**(2)",
            "E == ((1)/(2) * m) * v**(2)",
            "E == ((1)/(2) * m*v**(2))",
            "E == ((1)/(2)) * (m) * (v)**(2)",
            "E == ((1)/(2)) * (m) * (v**(2))",
            "E == ((1)/(2)) * (m*v**(2))",
            "E == ((1)/(2)) * m*(v**(2))",
            "E == ((1)/(2)) * m*v**(2)",
            "E == (1)/(2) * (m) * (v)**(2)",
            "E == (1)/(2) * (m*(v**(2)))",
            "E == (1)/(2) * (m*v**(2))",
            "E == (1)/(2) * m*(v)**(2)",
            "E == (1)/(2) * m*(v**(2))",
            "E == (1)/(2) * m*v**((2))",
            "E == (1)/(2) * m*v**(2)",
            "E == (1)/(2) * m*v**(abs(2))",
            "E == ((1)/(2) * m) * (v*v)",
            "E == ((1)/(2)) * m*v*v",
            "E == (1)/(2) * (m*v*v)",
            "E == (1)/(2) * m*(v*(v))",
            "E == (1)/(2) * m*(v*v)",
            "E == (1)/(2) * m*v*(v)",
            "E == (1)/(2) * m*v*v",
            "E == (1)/(2) * v**(2)*m",
            "E == (1)/(2) * v*v*m",
            "E == 2**(-1)*m*v**(2)",
            "E == m*(1)/(2) * v**(2)",
            "E == (m)/(2) * (v**(2))",
            "E == (m)/(2) * v**(2)",
            "E == (m)/(2) * v*v",
            "E == (m*v) * (1)/(2) * v",
            "E == m*v*(1)/(2) * v",
            "E == (m*v)/(1) * (v)/(2)",
            "E == (m*v**(2)) * (1)/(2)",
            "E == m*v**((2))*(1)/(2)",
            "E == m*v**(2)*(1)/(2)",
            "E == ((m*v**(2)))/(2)",
            "E == ((m*v**(2))/(2))",
            "E == (m*(v)**(2))/(2)",
            "E == (m*(v**(2))/(2))",
            "E == (m*v**(2))/(2)",
            "E == m*((v**(2))/(2))",
            "E == m*(v**(2))/(2)",
            "E == (m*v**(3))/(2*v)",
            "E == m*(v**(abs(2))) * ((1)/(2))",
            "E == m*(v*v) * (1)/(2)",
            "E == (m*(v)) * ((v)/(2))",
            "E == (m*(v*v))/(2)",
            "E == (m*v) * (v)/(2)",
            "E == (m*v*((v)/(2)))",
            "E == (m*v*(v))/(2)",
            "E == (m*v*v)/(2)",
            "E == m*v*((v)/(2))",
            "E == m*v*(v)/(2)",
            "E == v**(2)*(1)/(2) * m",
            "E == (v**(2))/(2) * m",
            "E == (v**(2)) * m*(1)/(2)",
            "E == v**(2)*m*(1)/(2)",
            "E == ((v**(2)) * m)/(2)",
            "E == (v**(2)*m)/(2)",
            "E == v**(2)*((m)/(2))",
            "E == v**(2)*(m)/(2)",
            "E == (v)/(2) * m*v",
            "E == (v**(abs(2))*(m)/(2))",
            "E == (v*m) * (v)/(2)",
            "E == v*m*(v)/(2)",
            "m*v**(2)*(1)/(2) == E",
            "(m*v**(2))/(2) == E",
            "m*(v**(2))/(2) == E",
            "v*m*((v)/(2)) == E"
        ]
    },
    "W == (6)/(5)*l + (11)/(5)*p": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "((1200)/(1000)) * l + ((2200)/(1000)) * p == W",
            "(1200*l + 2200*p)/(1000) == W",
            "((120)/(100)) * l + ((220)/(100)) * p == W",
            "((12)/(10)) * l + ((11)/(5)) * p == W",
            "(12)/(10) * l + (11)/(5) * p == W",
            "((12)/(10)) * l + ((22)/(10)) * p == W",
            "(12)/(10) * l + (22)/(10) * p == W",
            "(15*80*l)/(1000) + (4*550*p)/(1000) == W",
            "15*l*((2)/(25)) + 4*p*((11)/(20)) == W",
            "(15*l) * ((80)/(1000)) + (4*p) * ((550)/(1000)) == W",
            "(15*l*(80)/(1000)) + (4*p*(550)/(1000)) == W",
            "15*l*((80)/(1000)) + 4*p*((550)/(1000)) == W",
            "15*l*(80)/(1000) + 4*p*(550)/(1000) == W",
            "((15*l*80) + (4*p*550))/(1000) == W",
            "(15*l*(80) + 4*p*(550))/(1000) == W",
            "15*l*((8)/(100)) + 4*p*((55)/(100)) == W",
            "15*l*(8)/(100) + 4*p*(55)/(100) == W",
            "((2)/(25)) * 15*l + ((11)/(20)) * 4*p == W",
            "((6)/(5)) * l + ((11)/(5)) * p == W",
            "(6)/(5) * l + (11)/(5) * p == W",
            "(80*(15*l) + 550*(4*p))/(1000) == W",
            "W == (11)/(5) * p + (6)/(5) * l",
            "W == ((1200)/(1000)) * l + ((2200)/(1000)) * p",
            "W == (1200)/(1000) * l + (2200)/(1000) * p",
            "W == ((1200*l)/(1000)) + ((2200*p)/(1000))",
            "W == (1200*l + 2200*p)/(1000)",
            "W == ((120)/(100)) * l + ((220)/(100)) * p",
            "W == (120)/(100) * l + (220)/(100) * p",
            "W == ((12)/(10)) * (l) + ((11)/(5)) * (p)",
            "W == ((12)/(10)) * l + ((11)/(5)) * p",
            "W == (12)/(10) * l + (11)/(5) * p",
            "W == ((12)/(10)) * l + ((220)/(100)) * p",
            "W == ((12)/(10)) * (l) + ((22)/(10)) * (p)",
            "W == ((12)/(10)) * l + ((22)/(10) * p)",
            "W == ((12)/(10)) * l + ((22)/(10)) * p",
            "W == (12)/(10) * l + ((22)/(10)) * p",
            "W == (12)/(10) * l + (22)/(10) * p",
            "W == 12*(l)/(10) + 22*(p)/(10)",
            "W == (12*l + 22*p)/(10)",
            "W == 15*((2)/(25)) * l + 4*((11)/(20)) * p",
            "W == 15*(2)/(25) * l + 4*(11)/(20) * p",
            "W == ((15*80)/(1000)) * l + ((22)/(10)) * p",
            "W == (15*(80)/(1000)) * l + (4*(550)/(1000)) * p",
            "W == (15*80)/(1000) * l + (4*550)/(1000) * p",
            "W == 15*((80)/(1000) * l) + 4*((550)/(1000) * p)",
            "W == 15*((80)/(1000)) * l + 4*((550)/(1000)) * p",
            "W == 15*(80)/(1000) * l + 4*(550)/(1000) * p",
            "W == (15*80*l)/(1000) + (4*550*p)/(1000)",
            "W == (15*80*((l)/(1000))) + (4*550*((p)/(1000)))",
            "W == 15*80*(l)/(1000) + 4*550*(p)/(1000)",
            "W == ((15*80) * l + (4*550) * p)/(1000)",
            "W == (15*(80) * l + 4*(550) * p)/(1000)",
            "W == 15*((8)/(100)) * l + 4*((55)/(100)) * p",
            "W == (15*l) * ((2)/(25)) + (4*p) * ((11)/(20))",
            "W == (15*l*(2)/(25)) + (4*p*(11)/(20))",
            "W == 15*l*((2)/(25)) + 4*p*((11)/(20))",
            "W == 15*(l*(2)/(25)) + 4*(p*(11)/(20))",
            "W == 15*l*((2)/(25)) + 4*p*((55)/(100))",
            "W == (15*l) * ((80)/(1000)) + (4*p) * ((550)/(1000))",
            "W == (15*l*((80)/(1000))) + (4*p*((550)/(1000)))",
            "W == (15*l*(80)/(1000)) + (4*p*(550)/(1000))",
            "W == 15*l*((80)/(1000)) + 4*p*((550)/(1000))",
            "W == 15*l*(80)/(1000) + 4*p*(550)/(1000)",
            "W == ((15*l*(80)) + (4*p*(550)))/(1000)",
            "W == (15*l*(80) + 4*p*(550))/(1000)",
            "W == (15*l*80 + 4*p*550)/(1000)",
            "W == (15*l*80 + 4*p*550) * ((1)/(1000))",
            "W == (15*l*((8)/(100))) + (4*p*((55)/(100)))",
            "W == (15*l*(8)/(100)) + (4*p*(55)/(100))",
            "W == 2*(15*l)/(25) + 11*(4*p)/(20)",
            "W == (22)/(10) * p + (12)/(10) * l",
            "W == ((2)/(25)) * 15*l + ((11)/(20)) * 4*p",
            "W == (2)/(25) * (15*l) + (11)/(20) * (4*p)",
            "W == (2)/(25) * 15*l + (11)/(20) * 4*p",
            "W == (2)/(25) * (15*l) + (4*p) * (11)/(20)",
            "W == (30)/(25) * l + (11)/(5) * p",
            "W == 4*((55)/(100)) * p + 15*((8)/(100)) * l",
            "W == 4*p*(11)/(20) + 15*l*(2)/(25)",
            "W == 4*p*((550)/(1000)) + 15*l*((80)/(1000))",
            "W == ((550)/(1000)) * 4*p + ((80)/(1000)) * 15*l",
            "W == (550)/(1000) * 4*p + (80)/(1000) * 15*l",
            "W == (((6)/(5)) * l) + (((11)/(5)) * p)",
            "W == ((6)/(5) * l + (11)/(5) * p)",
            "W == ((6)/(5) * l) + ((11)/(5) * p)",
            "W == ((6)/(5) * l) + (11)/(5) * p",
            "W == ((6)/(5)) * l + ((11)/(5)) * p",
            "W == (6)/(5) * (l) + (11)/(5) * (p)",
            "W == (6)/(5) * l + ((11)/(5)) * p",
            "W == (6)/(5) * l + (11)/(5) * p",
            "W == (6)/(5) * l + 11*(p)/(5)",
            "W == ((6)/(5) * l) + ((22)/(10) * p)",
            "W == ((6)/(5)) * l + ((22)/(10)) * p",
            "W == (6)/(5) * l + (22)/(10) * p",
            "W == (6)/(5) * l + (275)/(125) * p",
            "W == (6*l + 11*p)/(5)",
            "W == (6*l)/(5) + (11*p)/(5)",
            "W == 6*(l)/(5) + 11*(p)/(5)",
            "W == (((80)/(1000)) * 15*l) + (((550)/(1000)) * 4*p)",
            "W == ((80)/(1000) * 15*l) + ((550)/(1000) * 4*p)",
            "W == ((80)/(1000)) * (15*l) + ((550)/(1000)) * (4*p)",
            "W == ((80)/(1000)) * 15*l + ((550)/(1000)) * 4*p",
            "W == (80)/(1000) * (15*l) + (550)/(1000) * (4*p)",
            "W == (80)/(1000) * 15*l + (550)/(1000) * 4*p",
            "W == (80)/(1000) * (15) * l + (550)/(1000) * (4) * p",
            "W == (80)/(1000) * (15*l) + (55)/(100) * (4*p)",
            "W == (80*15)/(1000) * l + (550*4)/(1000) * p",
            "W == (80*(15*l))/(1000) + (550*(4*p))/(1000)",
            "W == 80*15*(l)/(1000) + 550*4*(p)/(1000)",
            "W == ((80*15*l) + (550*4*p))/(1000)",
            "W == (80*15*l + 550*4*p)/(1000)",
            "W == ((80*15) * l + (550*4) * p)/(1000)",
            "W == (80*(3*l + 7*l + 5*l) + 550*(p + 2*p + p))/(1000)",
            "W == (8)/(100) * (15*l) + (11)/(20) * (4*p)",
            "W == (((8)/(100)) * 15*l) + (((55)/(100)) * 4*p)",
            "W == ((8)/(100) * 15*l) + ((55)/(100) * 4*p)",
            "W == ((8)/(100)) * 15*l + ((55)/(100)) * 4*p",
            "W == (8)/(100) * (15*l) + (55)/(100) * (4*p)",
            "W == (8)/(100) * 15*l + (55)/(100) * 4*p",
            "W == ((8)/(100) * 15) * l + ((55)/(100) * 4) * p",
            "W == l*((12)/(10)) + p*((22)/(10))",
            "W == l*((6)/(5)) + p*((11)/(5))"
        ]
    },
    "((a*v)/(sqrt(a**(2)+b**(2))))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(a)/((a**(2) + b**(2))**((1)/(2))) * v",
            "((a)/(sqrt((a**(2) + b**(2))))) * v",
            "((a)/(sqrt(a**(2) + b**(2)))) * v",
            "(a)/(sqrt(a**(2) + b**(2))) * v",
            "a*v*((1)/(sqrt(a**(2) + b**(2))))",
            "(a*v)/(((a**(2)) + (b**(2)))**((1)/(2)))",
            "a*(v)/((a**(2) + b**(2))**((1)/(2)))",
            "(a*v)/(a*sin(arctan((a)/(b))) + b*cos(arctan((a)/(b))))",
            "(a*v*b)/(b*sqrt((a**(2) + b**(2))))",
            "(a*v)/(b*(cos(arctan( - (a)/(b))) - (a)/(b) * sin(arctan( - (a)/(b)))))",
            "(a*v)/(b*cos(arctan( - (a)/(b))) - a*sin(arctan( - (a)/(b))))",
            "a*(v)/(b*sin(arctan((b)/(a))) + a*cos(arctan((b)/(a))))",
            "(a*v)/(b*(sqrt(1 + (a**(2))/(b**(2)))))",
            "(a*v)/(b*sqrt(((a)/(b))**(2) + 1))",
            "((a*v)/(sqrt(a**(2) + b**(2))))",
            "(a*v)/(sqrt((a**(2)) + (b**(2))))",
            "(a*v)/(sqrt(a**(2) + b**(2)))",
            "a*(v)/(sqrt(a**(2) + b**(2)))",
            "a*v*(sqrt(a**(2) + b**(2)))/(a**(2) + b**(2))",
            "a*(v)/(sqrt(a*a + b*b))",
            "(a*v)/(sqrt((b**(2)) + (a**(2))))",
            "(a*v)/(sqrt(b**(2) + a**(2)))",
            "(a*v*sqrt(b**(2) + a**(2)))/(b**(2) + a**(2))",
            "cos(arctan((b)/(a))) * v",
            "sin(arctan((a)/(b))) * v",
            "sqrt((a**(2))/(a**(2) + b**(2))) * v",
            "(sqrt(a**(2)*b**(2) + a**(4)))/(a**(2) + b**(2)) * v",
            "sqrt((a**(2)*v**(2))/(a**(2) + b**(2)))",
            "sqrt((a**(2)*v**(2))/(b**(2) + a**(2)))",
            "sqrt((v**(2)*a**(2))/(a**(2) + b**(2)))",
            "sqrt((v**(2)*a**(2))/(b**(2) + a**(2)))",
            "sqrt((v**(2))/((b**(2))/(a**(2)) + 1))",
            "v*(1)/(sqrt(1 + ((b)/(a))**(2)))",
            "((v**(2))/((b**(2))/(a**(2)) + 1))**((1)/(2))",
            "(v*a**(2)*sqrt(1 + ((b**(2))/(a**(2)))))/(a**(2) + b**(2))",
            "(v*a)/(((a)**(2) + (b)**(2))**((1)/(2)))",
            "(v*a)/((a**(2) + b**(2))**((1)/(2)))",
            "v*((a)/((a**(2) + b**(2))**((1)/(2))))",
            "v*(a)/((a**(2) + b**(2))**((1)/(2)))",
            "(v*a)/(b*cos(arctan((a)/(b))) + a*sin(arctan((a)/(b))))",
            "(((v*a)/(b)))/(sqrt((1 + (a**(2))/(b**(2)))))",
            "v*(((a)/(b))/(sqrt(((a)/(b))**(2) + 1)))",
            "(v*a*cos(arctan((a)/(b))))/(b)",
            "(v*a)/(sqrt((a**(2)) + (b**(2))))",
            "(v*a)/(sqrt(a**(2) + b**(2)))",
            "v*((a)/(sqrt(a**(2) + b**(2))))",
            "v*(a)/(sqrt((a**(2) + b**(2))))",
            "v*(a)/(sqrt((a**(2)) + b**(2)))",
            "v*(a)/(sqrt(a**(2) + b**(2)))",
            "(v*a*sqrt(a**(2) + b**(2)))/(a**(2) + b**(2))",
            "(v*a)/(sqrt(b**(2) + a**(2)))",
            "v*(a)/(sqrt(b**(2) + a**(2)))",
            "v*cos(arctan((b)/(a)))",
            "v*(sin(arctan((a)/(b))))",
            "v*sin(arctan((a)/(b)))",
            "(v)/(sqrt(1 + ((b**(2))/(a**(2)))))",
            "(v)/(sqrt(1 + (b**(2))/(a**(2))))",
            "(v)/(sqrt((b**(2))/(a**(2)) + 1))",
            "(v)/(sqrt(((b)/(a))**(2) + 1))"
        ]
    },
    "u == ((a*v)/(sqrt(a**(2)+b**(2))))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(a*v)/(sqrt(a**(2) + b**(2))) == u",
            "sin(arctan((a)/(b))) * v == u",
            "u == (a)/((b**(2) + a**(2))**((1)/(2))) * v",
            "u == ((a)/(sqrt(a**(2) + b**(2)))) * v",
            "u == (a)/(sqrt(a**(2) + b**(2))) * v",
            "u == (a*v)/((a**(2) + b**(2))**((1)/(2)))",
            "u == a*(v)/((a**(2) + b**(2))**((1)/(2)))",
            "u == a*v*(a**(2) + b**(2))**( - (1)/(2))",
            "u == a*(v)/(b) * sqrt(1 - ((a**(2))/(a**(2) + b**(2))))",
            "u == (a*v)/(sqrt((a**(2)) + (b**(2))))",
            "u == (a*v)/(sqrt(a**(2) + b**(2)))",
            "u == a*(v)/(sqrt((a**(2)) + (b**(2))))",
            "u == a*(v)/(sqrt(a**(2) + b**(2)))",
            "u == (a*v*sqrt(a**(2) + b**(2)))/(a**(2) + b**(2))",
            "u == a*v*(sqrt(a**(2) + b**(2)))/(a**(2) + b**(2))",
            "u == a*v*(sqrt(a**(2) + b**(2)))/(b**(2) + a**(2))",
            "u == (a*v)/(sqrt((b**(2) + a**(2))))",
            "u == (a*v)/(sqrt(b**(2) + a**(2)))",
            "u == a*(v)/(sqrt(b**(2) + a**(2)))",
            "u == (a*v*sqrt(b**(2) + a**(2)))/(b**(2) + a**(2))",
            "u == (a*v)/(sqrt(b*b + a*a))",
            "u == sin((arctan((a)/(b)))) * v",
            "u == sin(arctan((a)/(b))) * v",
            "u == sqrt((a**(2)*v**(2))/(a**(2) + b**(2)))",
            "u == sqrt(a**(2)*(v**(2))/(a**(2) + b**(2)))",
            "u == sqrt((a**(2)*v**(2))/(b**(2) + a**(2)))",
            "u == sqrt((v**(2))/(1 + ((b**(2))/(a**(2)))))",
            "u == sqrt((v**(2)*a**(2))/(a**(2) + b**(2)))",
            "u == sqrt((v**(2)*a**(2))/(b**(2) + a**(2)))",
            "u == sqrt(v**(2) - (v*cos(arctan((a)/(b))))**(2))",
            "u == sqrt(((v*a)**(2))/(b**(2) + a**(2)))",
            "u == (v*a)/((a**(2) + b**(2))**((1)/(2)))",
            "u == v*(a)/((a**(2) + b**(2))**((1)/(2)))",
            "u == v*(a)/(b) * (1)/(sqrt(1 + (a**(2))/(b**(2))))",
            "u == (v*a)/((b**(2) + a**(2))**((1)/(2)))",
            "u == (v*a)/(b*sqrt(1 + (a**(2))/(b**(2))))",
            "u == v*((a)/(b*sqrt(1 + (a**(2))/(b**(2)))))",
            "u == (v*a*sqrt(1 + (a**(2))/(b**(2))))/(b + (a**(2))/(b))",
            "u == (v) * ((a)/(sqrt(a**(2) + b**(2))))",
            "u == (v*a)/(sqrt((a**(2) + b**(2))))",
            "u == (v*a)/(sqrt(a**(2) + b**(2)))",
            "u == v*((a)/(sqrt(a**(2) + (b**(2)))))",
            "u == v*((a)/(sqrt(a**(2) + b**(2))))",
            "u == v*(a)/(sqrt((a**(2) + b**(2))))",
            "u == v*(a)/(sqrt(a**(2) + b**(2)))",
            "u == v*(a*sqrt(a**(2) + b**(2)))/(a**(2) + b**(2))",
            "u == (v*a)/(sqrt((a*a) + (b*b)))",
            "u == ((v*a))/(sqrt(b**(2) + a**(2)))",
            "u == v*(a)/(sqrt(b**(2) + a**(2)))",
            "u == (v) * (cos(arctan((b)/(a))))",
            "u == v*cos(arctan((b)/(a)))",
            "u == v*sin(arctan((a)/(b)))",
            "u == v*sqrt(1 - (1)/((a**(2))/(b**(2)) + 1))",
            "u == (v)/(sqrt((1 + ((b**(2))/(a**(2))))))",
            "u == v*sqrt((a**(2))/(a**(2) + b**(2)))",
            "v*sin(arctan((a)/(b))) == u"
        ]
    },
    "(2)/(3*alpha) * pi*((r + t)**(3) * (rho - phi) + r**(3)*phi)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "((1)/(alpha)) * ((2)/(3) * pi*(r + t)**(3) * (rho - phi) + ((2)/(3)) * pi*r**(3)*phi)",
            "(1)/(alpha) * ((2)/(3) * pi*(r + t)**(3) * (rho - phi) + (2)/(3) * pi*r**(3)*phi)",
            "((2)/(3) * pi*(rho*(r + t)**(3) + phi*r**(3) - phi*(r + t)**(3)))/(alpha)",
            "((((2)/(3)) * pi) * (rho*(r + t)**(3) - (phi*((r + t)**(3) - r**(3)))))/(alpha)",
            "(2)/(3) * pi*((r + t)**(3) * rho - phi*(r + t)**(3) + phi*r**(3))/(alpha)",
            "(2)/(3) * pi*((t + r)**(3) * rho - (t + r)**(3) * phi + r**(3)*phi)/(alpha)",
            "((2)/(3) * rho*pi*(r + t)**(3) - (2)/(3) * phi*pi*((r + t)**(3) - r**(3)))/(alpha)",
            "(2*pi)/(3*alpha) * ((rho - phi) * (r + t)**(3) + phi*r**(3))",
            "2*(pi)/(3*alpha) * ((rho - phi) * (r + t)**(3) + phi*r**(3))",
            "(2*pi)/(3*alpha) * ((r + t)**(3) * (rho - phi) + (phi*r**(3)))",
            "(2*pi)/(3*alpha) * ((r + t)**(3) * (rho - phi) + phi*r**(3))",
            "(2*pi)/(3*alpha) * ((r + t)**(3) * (rho - phi) + r**(3)*(phi))",
            "(2*pi)/(3*alpha) * ((r + t)**(3) * (rho - phi) + r**(3)*phi)",
            "(2*(pi)/(3*alpha) * ((r + t)**(3) * (rho - phi) + r**(3)*phi))",
            "(2*pi)/(3*alpha) * ((r + t)**(3) * rho + r**(3)*phi - (r + t)**(3) * phi)",
            "(2*pi*(rho)/(3) * ((r + t)**(3)) - 2*(pi)/(3) * phi*((r + t)**(3) - r**(3)))/(alpha)",
            "(2*pi*((rho - phi) * (r + t)**(3) + phi*r**(3)))/(3*alpha)",
            "(2*pi) * (rho*(r + t)**(3) - (3*r**(2)*t + 3*r*t**(2) + t**(3)) * phi)/(3*alpha)",
            "(2*pi*(rho*(r + t)**(3) - phi*((r + t)**(3) - r**(3))))/(3*alpha)",
            "(2*pi*(rho*(r + t)**(3) - phi*t*(3*r**(2) + 3*t*r + t**(2))))/(3*alpha)",
            "(2*pi*(r + t)**(3) * rho - 2*pi*((r + t)**(3) - r**(3)) * phi)/(3*alpha)",
            "(2*pi) * ((r + t)**(3) * (rho - phi) + phi*r**(3))/(3*alpha)",
            "(2*pi*((r + t)**(3) * (rho - phi) + phi*r**(3)))/(3*alpha)",
            "(2*pi*((r + t)**(3) * (rho - phi) + r**(3)*phi))/(3*alpha)",
            "2*pi*(((r + t)**(3) * (rho - phi) + r**(3)*phi)/(3*alpha))",
            "(2*pi*((r + t)**(3) * rho - phi*((r + t)**(3) - r**(3))))/(3*alpha)",
            "(2*rho*pi*(r + t)**(3) - 2*pi*((r + t)**(3) - r**(3)) * phi)/(3*alpha)",
            "((4)/(6) * rho*pi*(r + t)**(3) - ((4)/(6) * pi*(r + t)**(3) - (4)/(6) * pi*r**(3)) * phi)/(alpha)",
            "(rho*(2)/(3) * pi*r**(3) + (rho - phi) * (2*pi*r**(2)*t + 2*pi*r*t**(2) + (2)/(3) * pi*t**(3)))/(alpha)",
            "((rho - phi) * ((2)/(3) * pi*(t + r)**(3)) + (2)/(3) * pi*r**(3)*phi)/(alpha)"
        ]
    },
    "T == (2)/(3*alpha) * pi*((r + t)**(3) * (rho - phi) + r**(3)*phi)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "T == ((2)/(3) * pi*((rho - phi) * (r + t)**(3) + r**(3)*phi))/(alpha)",
            "T == ((2)/(3) * pi*rho*(r + t)**(3) - (2)/(3) * pi*phi*((r + t)**(3) - r**(3)))/(alpha)",
            "T == ((2)/(3) * pi*(rho*(r + t)**(3) - phi*((r + t)**(3) - r**(3))))/(alpha)",
            "T == ((2)/(3) * rho*pi*(r + t)**(3) - phi*(2)/(3) * pi*((r + t)**(3) - r**(3)))/(alpha)",
            "T == 2*(pi)/(3*alpha) * ((rho - phi) * (r + t)**(3) + phi*(r**(3)))",
            "T == 2*(pi)/(3*alpha) * (rho*(r + t)**(3) + phi*(r**(3) - (r + t)**(3)))",
            "T == (2*pi)/(3*alpha) * (rho*(r + t)**(3) - phi*((r + t)**(3) - r**(3)))",
            "T == ((2*pi)/(3*alpha)) * ((r + t)**(3) * rho - (3*r**(2)*t + 3*r*t**(2) + t**(3)) * phi)",
            "T == (2*pi)/(3*alpha) * ((r + t)**(3) * (rho - phi) + phi*r**(3))",
            "T == (2*pi)/(3*alpha) * ((r + t)**(3) * (rho - phi) + r**(3)*phi)",
            "T == (2*pi)/(3*alpha) * ((t + r)**(3) * rho + r**(3)*phi - (t + r)**(3) * phi)",
            "T == (2*(pi)/(3)) * (rho*(r + t)**(3) - phi*((r + t)**(3) - r**(3)))/(alpha)",
            "T == 2*pi*(r**(3)*phi + (r + t)**(3) * (rho - phi))/(3*alpha)",
            "T == (2*pi*(rho - phi))/(3*alpha) * (r + t)**(3) + (2*pi*r**(3)*phi)/(3*alpha)",
            "T == (2*pi*((rho - phi) * (r + t)**(3) + phi*r**(3)))/(3*alpha)",
            "T == (2*pi*(rho*(t**(3) + 3*t**(2)*r + 3*t*r**(2) + r**(3)) - phi*(t**(3) + 3*t**(2)*r + 3*t*r**(2))))/(3*alpha)",
            "T == (2*pi*((r + t)**(3) * rho - phi*((r + t)**(3) - r**(3))))/(3*alpha)",
            "T == ((((4)/(6)) * pi*rho*(r + t)**(3)) - (phi*(((4)/(6)) * pi*((r + t)**(3) - (r**(3))))))/(alpha)",
            "T == ((4)/(6) * pi*((r + t)**(3) * rho - ((r + t)**(3) - r**(3)) * phi))/(alpha)",
            "T == (4*pi)/(6*alpha) * ((r + t)**(3) * (rho - phi) + r**(3)*phi)",
            "T == (rho*(2)/(3) * pi*(r + t)**(3) - phi*(2)/(3) * pi*(3*r**(2)*t + 3*r*t**(2) + t**(3)))/(alpha)",
            "T == (rho*((2)/(3) * pi*(r + t)**(3)) - phi*((2)/(3) * pi*(r + t)**(3) - (2)/(3) * pi*r**(3)))/(alpha)",
            "T == (rho*(2)/(3) * pi*(r + t)**(3) - phi*(2)/(3) * pi*((r + t)**(3) - r**(3)))/(alpha)",
            "T == (rho*(r + t)**(3) * (2)/(3) * pi - phi*(2)/(3) * pi*((r + t)**(3) - r**(3)))/(alpha)"
        ]
    },
    "((sqrt(2))/(2))*arctan(((x)/(sqrt(2))))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "((1)/(2**((1)/(2)))) * (arctan((x)/(2**((1)/(2)))))",
            "((1)/(2**((1)/(2)))) * arctan((x)/(2**((1)/(2))))",
            "(1)/((2)**((1)/(2))) * arctan((x)/((2)**((1)/(2))))",
            "(1)/(2**((1)/(2))) * (arctan((x)/(2**((1)/(2)))))",
            "(1)/(2**((1)/(2))) * arctan((x)/((2)**((1)/(2))))",
            "(1)/(2**((1)/(2))) * arctan((x)/(2**((1)/(2))))",
            "((1)/(sqrt(2))) * arctan(((1)/(sqrt(2))) * x)",
            "(1)/(sqrt(2)) * arctan((1)/(sqrt(2)) * x)",
            "(1)/(sqrt(2)) * arctan((sqrt(2))/(2) * x)",
            "(1)/(sqrt(2)) * arctan((sqrt(2) * x)/(2))",
            "((1)/(sqrt(2))) * arctan(x*(1)/(sqrt(2)))",
            "((1)/(sqrt(2))) * (arctan((x)/(sqrt(2))))",
            "((1)/(sqrt(2))) * arctan((x)/(sqrt(2)))",
            "(1)/(sqrt(2)) * (arctan((x)/(sqrt(2))))",
            "(1)/(sqrt(2)) * arctan((x)/(sqrt(2)))",
            "(1)/(sqrt(2)) * (arctan(x*(sqrt(2))/(2)))",
            "((2**((1)/(2)))/(2)) * arctan(((2)**((1)/(2)) * (x))/(2))",
            "((2)**((1)/(2)))/(2) * arctan((x)/((2)**((1)/(2))))",
            "((2)**((1)/(2)))/(2) * arctan((x)/(2**((1)/(2))))",
            "(2**((1)/(2)))/(2) * arctan((x)/(2**((1)/(2))))",
            "(arctan((x)/((2)**((1)/(2)))))/((2)**((1)/(2)))",
            "(arctan((x)/((2)**((1)/(2)))))/(2**((1)/(2)))",
            "(arctan((x)/(2**((1)/(2)))))/(2**((1)/(2)))",
            "arctan((x)/(2**((1)/(2)))) * (2**((1)/(2)))/(2)",
            "arctan((x)/(sqrt(2))) * (1)/(sqrt(2))",
            "((arctan((x)/(sqrt(2))))/(sqrt(2)))",
            "(arctan((x)/(sqrt(2))))/(sqrt(2))",
            "arctan((x)/(sqrt(2))) * (sqrt(2))/(2)",
            "sqrt((1)/(2)) * arctan((x)/(sqrt(2)))",
            "(sqrt(2))/(2) * arcsin((x)/(sqrt((x**(2) + 2))))",
            "(sqrt(2))/(2) * arctan((1)/(sqrt(2)) * x)",
            "(sqrt(2))/(2) * (arctan((sqrt(2))/(2) * x))",
            "(sqrt(2))/(2) * arctan((sqrt(2))/(2) * x)",
            "(sqrt(2))/(2) * arctan((sqrt(2) * x)/(2))",
            "(sqrt(2))/(2) * arctan(sqrt(2) * (x)/(2))",
            "(((sqrt(2))/(2)) * arctan((x)/(sqrt(2))))",
            "((sqrt(2))/(2)) * (arctan((x)/(sqrt(2))))",
            "((sqrt(2))/(2)) * arctan((x)/(sqrt(2)))",
            "(sqrt(2))/(2) * (arctan((x)/(sqrt(2))))",
            "(sqrt(2))/(2) * arctan((x)/(sqrt(2)))",
            "((sqrt(2))/(2)) * arctan(x*(sqrt(2))/(2))",
            "(sqrt(2))/(2) * arctan((x*sqrt(2))/(2))",
            "(sqrt(2))/(2) * arctan(x*(sqrt(2))/(2))",
            "(sqrt(2) * arctan((sqrt(2))/(2) * x))/(2)",
            "(sqrt(2) * arctan((sqrt(2) * x)/(2)))/(2)",
            "(sqrt(2) * arctan(sqrt(2) * (x)/(2)))/(2)",
            "((sqrt(2) * arctan((x)/(sqrt(2))))/(2))",
            "(sqrt(2) * arctan((x)/(sqrt(2))))/(2)",
            "(sqrt(2)) * (arctan((x)/(sqrt(2))))/(2)",
            "sqrt(2) * (arctan((x)/(sqrt(2))))/(2)",
            "(sqrt(2) * arctan((x*sqrt(2))/(2)))/(2)"
        ]
    },
    "ln(((1-sqrt(1-x))/(1+sqrt(1-x))))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "- 2*arctanh((1 - x)**((1)/(2)))",
            "- 2*arctanh(sqrt(1 - x))",
            "-2*arctanh(sqrt(1 - x))",
            "- 2*ln(abs((1 + sqrt(1 - x))/(sqrt(x))))",
            "- ln((1 + (1 - x)**((1)/(2)))/(1 - (1 - x)**((1)/(2))))",
            "ln((1 - (1 - x)**((1)/(2)))/(1 + (1 - x)**((1)/(2))))",
            "- ln(1 + (1 - x)**((1)/(2))) + ln(1 - (1 - x)**((1)/(2)))",
            "ln(1 - (1 - x)**((1)/(2))) - ln(1 + (1 - x)**((1)/(2)))",
            "- ln((1 + (sqrt(1 - x)))/(1 - (sqrt(1 - x))))",
            "- ln((1 + sqrt(1 - x))/(1 - sqrt(1 - x)))",
            "ln((1 - sqrt(1 - x))/(1 + (sqrt(1 - x))))",
            "ln((1 - sqrt(1 - x))/(1 + sqrt(1 - x)))",
            "ln(((1 - sqrt(1 - x))**(2))/(x))",
            "- ln(1 + sqrt(1 - x)) + ln(1 - sqrt(1 - x))",
            "ln(1 - (sqrt(1 - x))) - ln(1 + (sqrt(1 - x)))",
            "ln(1 - sqrt(1 - x)) - ln(1 + sqrt(1 - x))",
            "ln(1 - sqrt(1 - x)) - ln(abs(1 + sqrt(1 - x)))",
            "ln(1 - sqrt(1 - x)) - ln(sqrt(1 - x) + 1)",
            "ln((1 - sqrt(1 - x))/(sqrt(1 - x) + 1))",
            "ln(( - (1 - x)**((1)/(2)) + 1)/((1 - x)**((1)/(2)) + 1))",
            "ln((2 - 2*sqrt(1 - x) - x)/(x))",
            "- ln((2 - x + 2*sqrt(1 - x))/(x))",
            "ln(abs(((1 - sqrt(1 - x))/(1 + sqrt(1 - x)))))",
            "ln(abs((1 - sqrt(1 - x))/(1 + sqrt(1 - x))))",
            "- ln(abs(1 + sqrt(1 - x))) + ln(abs(1 - sqrt(1 - x)))",
            "ln(abs(1 - sqrt(1 - x))) - ln(abs(1 + sqrt(1 - x)))",
            "ln((abs((1 - x)**((1)/(2)) - 1))/((1 - x)**((1)/(2)) + 1))",
            "ln(abs(2*sqrt(1 - x) - 2)) - ln(abs(2*sqrt(1 - x) + 2))",
            "ln((abs(sqrt(1 - x) - 1))/(abs(sqrt(1 - x) + 1)))",
            "- (ln(abs(sqrt(1 - x) + 1)) - ln(abs(sqrt(1 - x) - 1)))",
            "ln(abs(sqrt(1 - x) - 1)) - ln(abs(sqrt(1 - x) + 1))",
            "ln(abs(sqrt(1 - x) - 1)) - ln(sqrt(1 - x) + 1)",
            "ln((abs(sqrt(1 - x) - 1))/(sqrt(1 - x) + 1))",
            "ln(abs(((sqrt(1 - x) - 1)/(sqrt(1 - x) + 1))))",
            "ln(abs((sqrt(1 - x) - 1)/(sqrt(1 - x) + 1)))",
            "ln( - sqrt(1 - x) + 1) - ln(sqrt(1 - x) + 1)",
            "ln((sqrt(1 - x) - 1)/( - sqrt(1 - x) - 1))",
            "ln((x)/(2*sqrt(1 - x) + 2 - x))"
        ]
    },
    "ln(((sqrt(1-x)-1)/(1+sqrt(1-x))))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "ln(1 - (2)/(sqrt(1 - x) + 1))",
            "ln(( - 1 + sqrt(1 - x))/(1 + sqrt(1 - x)))",
            "ln( - 1 + sqrt(1 - x)) - ln(1 + sqrt(1 - x))",
            "- ln(1 + sqrt(1 - x)) + ln(sqrt(1 - x) - 1)",
            "- ln((1 + sqrt(1 - x))/(sqrt(1 - x) - 1))",
            "ln(((1 - x)**((1)/(2)) - 1)/((1 - x)**((1)/(2)) + 1))",
            "- ln((1 - x)**((1)/(2)) + 1) + ln((1 - x)**((1)/(2)) - 1)",
            "ln(((1 - x)**((1)/(2))) - 1) - ln(((1 - x)**((1)/(2))) + 1)",
            "ln((1 - x)**((1)/(2)) - 1) - ln((1 - x)**((1)/(2)) + 1)",
            "ln((2*sqrt(1 - x) + x - 2)/(x))",
            "- ln(sqrt(1 - x) + 1) + ln( - 1 + sqrt(1 - x))",
            "(ln(sqrt(1 - x) - 1)) - (ln(sqrt(1 - x) + 1))",
            "ln((sqrt(1 - x) - 1)/(1 + sqrt(1 - x)))",
            "ln(sqrt(1 - x) - 1) - ln(1 + sqrt(1 - x))",
            "- ln(sqrt(1 - x) + 1) + ln(sqrt(1 - x) - 1)",
            "ln((sqrt(1 - x)) - 1) - ln((sqrt(1 - x)) + 1)",
            "(ln((sqrt(1 - x) - 1)/(sqrt(1 - x) + 1)))",
            "ln((sqrt(1 - x) - 1)/(sqrt(1 - x) + 1))",
            "ln(sqrt((1 - x)) - 1) - ln(sqrt((1 - x)) + 1)",
            "ln(sqrt(1 - x) - 1) - ln(sqrt(1 - x) + 1)",
            "- ln(((sqrt(1 - x)) + 1)/((sqrt(1 - x)) - 1))",
            "ln(((sqrt(1 - x)) - 1)/((sqrt(1 - x)) + 1))",
            "ln((x + 2*(1 - x)**((1)/(2)) - 2)/(x))",
            "ln(((sqrt(1 - x)) - 1)/(sqrt(1 - x) + 1))",
            "ln((x + 2*sqrt(1 - x) - 2)/(x))",
            "ln(( - x)/(2 - x + 2*sqrt(1 - x)))"
        ]
    },
    "((4*pi*h*a**(3)*rho*u**(2)*d)/(3*V*x*(((x)/(2))+L)))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(2*d*rho*(4)/(3) * pi*a**(3)*u**(2)*h)/(V*x**(2) + 2*L*x*V)",
            "(2*h*d*u**(2))/(x**(2)*V + 2*L*V*x) * (4)/(3) * pi*a**(3)*rho",
            "(2*h*u**(2)*rho*((4)/(3)) * pi*a**(3)*d)/((2*V*x*L) + V*x**(2))",
            "(4*h*d*pi*a**(3)*rho*u**(2))/(3*V*(L*x + (x**(2))/(2)))",
            "(4*h*d*pi*a**(3)*rho*u**(2))/(3*V*x*((x)/(2) + L))",
            "(4*h*d*pi*a**(3)*u**(2)*rho)/(3*V*x*((x)/(2) + L))",
            "(4*h*d*pi*rho*a**(3)*u**(2))/(3*V*x*((x)/(2) + L))",
            "(4*h*d*(rho) * (pi) * a**(3))/(3*V*((x**(2) + 2*x*L)/(2*u**(2))))",
            "(4*h*d*rho*pi*a**(3)*u**(2))/(3*V*x*((x)/(2) + L))",
            "(4*h*pi*a**(3)*rho*u**(2)*d)/(3*V*x*((x)/(2) + L))",
            "(4*pi*a**(3)*rho*h*u**(2)*d)/(3*V*((x**(2))/(2) + x*L))",
            "(4*pi*a**(3)*u**(2)*h*rho*d)/(3*V*x*(L + (x)/(2)))",
            "(4*pi*h*u**(2)*a**(3)*rho*d)/(3*V*x*((x)/(2) + L))",
            "((4*pi*rho*a**(3)*d*h*u**(2))/(3*V*x))/(L + (x)/(2))",
            "(4*pi*rho*a**(3)*d*h*u**(2))/(3*V*x*((x)/(2) + L))",
            "(4*pi*rho*a**(3)*d*u**(2))/(3*V*x*((x)/(2) + L)) * h",
            "(4*pi*rho*a**(3)*u**(2)*d*h)/(3*V*x*((x)/(2) + L))",
            "(4*pi*rho*d*h*a**(3)*u**(2))/(3*V*x*((x)/(2) + L))",
            "((8)/(3) * (rho*pi*a**(3)*d*u**(2)*h))/(V*(x**(2) + 2*L*x))",
            "((8)/(3) * rho*pi*a**(3)*d*u**(2)*h)/(V*(x**(2) + 2*L*x))",
            "(8)/(3) * rho*pi*a**(3)*d*u**(2)*(h)/(V*x*(x + 2*L))",
            "(8)/(3*V*x) * (h*u**(2)*pi*a**(3)*d*rho)/(x + 2*L)",
            "(8*d*h*u**(2)*pi*a**(3)*rho)/(6*V*x*L + 3*V*x**(2))",
            "(8*d*h*u**(2)*rho*pi*a**(3))/(3*x*(V) * (x + 2*L))",
            "(8*d*pi*a**(3)*rho*u**(2)*h)/(3*V*x*(2*L + x))",
            "(8*d*pi*a**(3)*rho*u**(2)*h)/(3*V*x*(x + 2*L))",
            "(8*d*pi*a**(3)*rho*u**(2)*h)/(3*x*V*(x + 2*L))",
            "(8*d*rho*h*pi*a**(3)*u**(2))/(6*V*x*L + 3*V*x**(2))",
            "(8*d*rho*pi*a**(3)*u**(2)*h)/(3*V*x*(x + 2*L))",
            "(8*d*u**(2)*pi*a**(3)*rho*h)/(3*V*x**(2) + 6*V*x*L)",
            "(8*h*d*pi*rho*a**(3)*u**(2))/(3*V*x*(x + 2*L))",
            "(8*h*d*rho*pi*a**(3)*u**(2))/(3*V*x**(2) + (6*L*V*x))",
            "(8*h*d*rho*pi*a**(3)*u**(2))/(3*V*x*(x + 2*L))",
            "(8*h*d*rho*pi*a**(3)*u**(2))/(6*V*x*L + 3*x**(2)*V)",
            "(8*h*pi*a**(3)*rho*d*u**(2))/(3*V*x*(2*L + x))",
            "(8*h*pi*a**(3)*rho*d*u**(2))/(3*V*x*(x + 2*L))",
            "(8*h*pi*a**(3)*rho*u**(2)*d)/((6*x*L + 3*x**(2)) * V)",
            "(8*h*u**(2)*d*pi*a**(3)*(rho)/(3))/(V*x**(2) + 2*x*L*V)",
            "8*h*u**(2)*d*rho*a**(3)*(pi)/((3*x*V) * (x + 2*L))",
            "(8*pi*(a**(3)) * d*rho*u**(2)*h)/(3*V*x*(2*L + x))",
            "(8*pi*a**(3)*rho*d*h*u**(2))/(3*V*x*(x + 2*L))",
            "(8*pi*a**(3)*rho*d*u**(2)*h)/(3*V*x**(2) + 6*L*V*x)",
            "(8*pi*a**(3)*rho*d*u**(2)*h)/(3*V*x*(2*L + x))",
            "(8*pi*a**(3)*rho*d*u**(2)*h)/(3*V*x*(x + 2*L))",
            "(8*pi*a**(3)*rho*d*u**(2)*h)/(3*x**(2)*V + 6*L*x*V)",
            "(8*pi*a**(3)*rho*d*u**(2)*h)/(6*L*V*x + 3*V*x**(2))",
            "(8*pi*a**(3)*rho*d*u**(2)*h)/(6*V*x*L + 3*V*x**(2))",
            "(8*pi*a**(3)*rho*h*d*u**(2))/(3*V*x*(2*L + x))",
            "(8*pi*a**(3)*rho*h*d*u**(2))/(3*V*x*(x + 2*L))",
            "(8*pi*a**(3)*rho*u**(2)*d*h)/(6*V*x*L + 3*V*x**(2))",
            "(8*pi*a**(3)*rho*u**(2)*h*d)/(3*V*x*(x + 2*L))",
            "(8*pi*d*a**(3)*rho*h*u**(2))/(3*V*(x**(2) + 2*x*L))",
            "(8*pi*d*a**(3)*rho*u**(2)*h)/(3*V*x**(2) + 6*V*x*L)",
            "(8*pi*d*a**(3)*rho*u**(2)*h)/(3*V*x*(2*L + x))",
            "(8*pi*h*a**(3)*rho*u**(2)*d)/(3*(x**(2)*V + 2*x*L*V))",
            "(8*pi*h*d*rho*a**(3)*u**(2))/(3*V*x*(2*L + x))",
            "(8*pi*h*rho*a**(3)*d*u**(2))/(3*V*x*(x + 2*L))",
            "(8*pi*h*u**(2)*a**(3)*rho*d)/(3*V*(2*x*L + x**(2)))",
            "(8*pi*h*u**(2)*d*a**(3)*rho)/(3*V*x*(x + 2*L))",
            "(8*pi*rho*a**(3)*d*u**(2))/(3*V*x*(x + 2*L)) * h",
            "(8*pi*rho*a**(3)*d*u**(2)*h)/(3*V*x**(2) + 6*V*x*L)",
            "(8*pi*rho*a**(3)*d*u**(2)*h)/(3*V*x*(2*L + x))",
            "(8*pi*rho*a**(3)*h*d*u**(2))/(3*V*x*(x + 2*L))",
            "(8*pi*rho*a**(3)*u**(2)*d*h)/(3*V*x*(x + 2*L))",
            "(8*pi*rho*h*d*u**(2)*a**(3))/(3*V*x*(x + 2*L))",
            "(8*pi*u**(2)*d*a**(3)*rho*h)/(3*x*V*(2*L + x))",
            "(8*rho*pi*a**(3)*h*d*u**(2))/(6*V*x*L + 3*V*x**(2))",
            "(8*rho*pi*a**(3)*h*u**(2)*d)/(3*V*x*(2*L + x))",
            "(h)/(((3*V*x*L)/(4*d*pi*a**(3)*rho*u**(2)) + (1)/(2) * (3*V*x**(2))/(4*d*pi*a**(3)*rho*u**(2))))",
            "(h*((8)/(3) * pi*d*a**(3)*rho*u**(2)))/(2*V*x*L + x**(2)*V)",
            "(h*d*4*pi*a**(3)*rho*u**(2))/(3*V*x*((x)/(2) + L))",
            "(h*d*u**(2)*4*pi*a**(3)*rho)/(3*V*x*(L + (x)/(2)))",
            "h*d*u**(2)*4*pi*rho*(a**(3))/(3*x*V*((1)/(2) * x + L))",
            "(h*d*u**(2)*(pi*rho*a**(3)) * 8)/(3*((2*V*x*L) + (x**(2)*V)))",
            "(h)/(L*x + ((1)/(2)) * x**(2)) * d*rho*((4)/(3)) * pi*(a**(3))/(V) * u**(2)",
            "(h*rho*(4)/(3) * pi*a**(3)*d*u**(2))/((V)/(2) * (x**(2) + 2*L*x))",
            "h*rho*(4)/(3) * pi*a**(3)*d*(u**(2))/(V*x*(L + (x)/(2)))",
            "h*u**(2)*d*pi*(4)/(3) * a**(3)*(rho)/(V*x*((x)/(2) + L))"
        ]
    },
    "(2*sqrt(2)/5)-(1/4)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "( - 10 + 16*sqrt(2))/(40)",
            "((1)/(2))**((1)/(2)) - ((1)/(4))**((1)/(2)) + (1)/(4) - (4)/(5) * ((1)/(2))**((5)/(2))",
            "(1)/(2**((1)/(2))) - (1)/(4) - (1)/(5*2**((1)/(2)))",
            "((1)/(2))**((1)/(2)) - (1)/(4) - ((4) * ((1)/(2))**((5)/(2)))/(5)",
            "((1)/(2))**((1)/(2)) - (1)/(4) - (4)/(5) * ((1)/(2))**((5)/(2))",
            "((1)/(2))**((1)/(2)) - (1)/(5*sqrt(2)) - (1)/(4)",
            "((1)/(2))**((1)/(2)) - (4*((1)/(2))**((5)/(2)))/(5) - (1)/(4)",
            "((1)/(2))**((1)/(2)) - (4)/(5) * ((1)/(2))**((5)/(2)) - (1)/(4)",
            "( - 1 + 2*sqrt(2))/(4) - (4)/(5) * ((1)/(2))**((5)/(2))",
            "((1)/(4)) - ((1)/(2)) + ((1)/(2))**((1)/(2)) - ((4)/(5)) * (((1)/(2))**((5)/(2)))",
            "((1)/(4) + (((1)/(2))**((1)/(2)) - ((1)/(4))**((1)/(2)))) - ((4)/(5) * ((1)/(2))**((5)/(2)))",
            "(1)/(4) + ((1)/(2))**((1)/(2)) - ((1)/(4))**((1)/(2)) - (4)/(5) * ((1)/(2))**((5)/(2))",
            "- (1)/(4) + ((1)/(2))**((1)/(2)) - ((4) * ((1)/(2))**((5)/(2)))/(5)",
            "((1)/(4) - ((((1)/(4))**((5)/(2))) * (4)/(5))) + (((1)/(sqrt(2))) - (1)/(2) - ((((1)/(2))**((5)/(2))) * (4)/(5)) + (1)/(40))",
            "(1)/(4) + ((1)/(sqrt(2)) - (1)/(2)) - (4)/(5) * ((1)/(2))**((5)/(2))",
            "(1)/(4) + (1)/(sqrt(2)) - (1)/(sqrt(4)) - (4)/(5) * ((1)/(2))**((5)/(2))",
            "- (1)/(4) + (1)/(sqrt(2)) - (4)/(5) * ((1)/(2**((5)/(2))))",
            "(-1)/(4) + (2)/(5) * sqrt(2)",
            "- (1)/(4) + ((2*sqrt(2))/(5))",
            "- (1)/(4) + (2*sqrt(2))/(5)",
            "- (1)/(4) + 2*(sqrt(2))/(5)",
            "- (1)/(4) + ((3)/(5)) * (2**( - (3)/(2))) + (1)/(2*sqrt(2))",
            "(1)/(4) - (4)/(5) * ((1)/(4))**((5)/(2)) + sqrt((1)/(2)) - sqrt((1)/(4)) - (4)/(5) * ((1)/(2))**((5)/(2)) + (4)/(5) * ((1)/(4))**((5)/(2))",
            "(1)/(4) + (4*sqrt(2) - 5)/(10)",
            "(1)/(4) + ( - 5 + 4*(2)**((1)/(2)))/(10)",
            "(1)/(4) + ( - 5 + 4*sqrt(2))/(10)",
            "(1)/(4) + (5*(sqrt(2) - 1) - 2**((1)/(2)))/(10)",
            "(1)/(4) + sqrt((1)/(2)) - (1)/(2) - (4)/(5) * (((1)/(2))**((5)/(2)))",
            "- (1)/(4) + sqrt((1)/(2)) - (4)/(5) * (sqrt((1)/(32)))",
            "(1)/(4) + (sqrt((1)/(2)) - sqrt((1)/(4)) - (4)/(5) * ((1)/(2))**((5)/(2)))",
            "(1)/(4) + (sqrt(2) - 1)/(2) - (1)/(5*sqrt(2))",
            "(16 - 5*sqrt(2))/(20*sqrt(2))",
            "(16*sqrt(2) - 10)/(40)",
            "( - 19*sqrt(2) + 32)/(40*sqrt(2)) + (9)/(40)",
            "(1)/(sqrt(2)) - (1)/(4) - (1)/(5*sqrt(2))",
            "(20*sqrt(2) - 32*(sqrt(2))**( - 5) - 19)/(40) + (9)/(40)",
            "2**( - (1)/(2)) - (4)/(5) * 2**( - (5)/(2)) - (1)/(4)",
            "(2*(2**((1)/(2))))/(5) - (1)/(4)",
            "(2**((3)/(2)))/(5) - (1)/(4)",
            "((2)/(5)) * sqrt(2) - ((1)/(4))",
            "(2)/(5) * sqrt(2) - (1)/(4)",
            "(2*sqrt(2) - 1)/(4) - (4)/(5) * ((1)/(2))**((5)/(2))",
            "(2*sqrt(2))/(5) - (1)/(4)",
            "(2*(sqrt(2))/(5)) - (1)/(4)",
            "2*(sqrt(2))/(5) - (1)/(4)",
            "(4)/(5*2**((1)/(2))) - (1)/(4)",
            "(4)/(5) * sqrt((1)/(2)) - ((1)/(4))",
            "(4)/(5) * sqrt((1)/(2)) - (1)/(4)",
            "(4)/(5*sqrt(2)) - (1)/(4)",
            "(4*sqrt(2))/(10) - (1)/(4)",
            "( - 5 + 8*2**((1)/(2)))/(20)",
            "( - 5 + 8*sqrt(2))/(20)",
            "(( - 5 + 8*sqrt(2)))/(20)",
            "(( - 5 + 8*sqrt(2))/(20))",
            "(-5 + 8*sqrt(2))/(20)",
            "( - 5 + 8*(sqrt(2)))/(20)",
            "(6)/(5) * 2**( - (5)/(2)) + (sqrt(2))/(4) - (1)/(4)",
            "(8*(2)**((1)/(2)) - 5)/(20)",
            "(8*(2**((1)/(2))) - 5)/(20)",
            "(8*sqrt(2) - 5)/(20)",
            "(8*(sqrt(2)) - 5)/(20)",
            "(9)/(40) + (16*sqrt(2) - 19)/(40)",
            "(9)/(40) + (sqrt((1)/(2)) - sqrt((1)/(4))) - ((4)/(5) * ((1)/(2))**((5)/(2)) - (4)/(5) * ((1)/(4))**((5)/(2)))",
            "sqrt((1)/(2)) - (1)/(4) - (4)/(5) * ((1)/(2))**((5)/(2))",
            "sqrt((1)/(2)) - ((1)/(4) + ((4)/(5) * sqrt((1)/(2))**(5)))",
            "sqrt(((1)/(2))) - ((4)/(5)) * ((1)/(2))**((5)/(2)) - (1)/(4)",
            "sqrt((1)/(2)) - (4)/(5) * ((1)/(2))**((5)/(2)) - (1)/(4)",
            "(sqrt(2) - 1)/(4) + ((sqrt(2))/(4) - (sqrt(2))/(10))",
            "(sqrt(2))/(2) - (1)/(5*sqrt(2)) - (1)/(4)",
            "(sqrt(2))/(2) - (2)/(5*sqrt(8)) - (1)/(4)",
            "(sqrt(2))/(2) - (4)/(5*sqrt(32)) - (1)/(4)",
            "(sqrt(2))/(2) - (sqrt(2))/(10) - (1)/(4)",
            "sqrt((8)/(25)) - (1)/(4)"
        ]
    },
    "alpha**(2)*(1 - 2*e**(-1))  + alpha*(1 - e**(-1))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(1 - 2*e**( - 1)) * alpha**(2) + (1 - e**( - 1)) * alpha",
            "- (1)/(e) * (2*alpha**(2) + alpha) + alpha + alpha**(2)",
            "( - 2*alpha**(2) - alpha + alpha*e + alpha**(2)*e)/(e)",
            "- (2*alpha**(2) + alpha) * e**( - 1) + (alpha + alpha**(2))",
            "- (2*alpha**(2) + alpha)/(e) + alpha**(2) + alpha",
            "( - 2*alpha**(2) - alpha + e*alpha**(2) + e*alpha)/(e)",
            "( - 2*alpha**(2) - (alpha))/(e) + alpha + alpha**(2)",
            "( - 2*alpha**(2) - alpha)/(e) + alpha + alpha**(2)",
            "- (2*alpha**(2) + alpha)/(e) + alpha + alpha**(2)",
            "- 2*alpha**(2)*e**( - 1) + alpha**(2) - alpha*e**( - 1) + alpha",
            "- 2*alpha**(2)*e**( - 1) - alpha*e**( - 1) + alpha**(2) + alpha",
            "- 2*alpha**(2)*e**( - 1) - alpha*e**( - 1) + alpha + alpha**(2)",
            "( - 2*alpha**(2))/(e) + alpha + alpha**(2) - (alpha)/(e)",
            "( - 2*alpha**(2))/(e) - (alpha)/(e) + alpha**(2) + alpha",
            "- 2*((alpha)**(2))/(e) - (alpha)/(e) + alpha**(2) + alpha",
            "- 2*(alpha**(2))/(e) - (alpha)/(e) + alpha**(2) + alpha",
            "( - 2*alpha**(2))/(e) - (alpha)/(e) + alpha + alpha**(2)",
            "- (2*alpha**(2))/(e) - (alpha)/(e) + alpha + alpha**(2)",
            "( - (2)/(e) + 1) * alpha**(2) + ( - (1)/(e) + 1) * alpha",
            "( - 2 + e) * (alpha**(2))/(e) + alpha*(1 - (1)/(e))",
            "(( - 2 + e) * alpha**(2))/(e) + (alpha*(1 - (1)/(e)))",
            "(( - 2 + e) * alpha**(2))/(e) + alpha*(1 - (1)/(e))",
            "alpha*(1 - (1)/(e)) + (( - 2 + e) * alpha**(2))/(e)",
            "(alpha*( - 1 + alpha*( - 2 + e) + e))/(e)",
            "( - (alpha + 1) * alpha*e**( - 1) - alpha**(2)*e**( - 1)) - ( - alpha - alpha**(2))",
            "(alpha + 1) * ( - alpha*e**( - 1)) - (alpha**(2)*e**( - 1)) - ( - alpha - alpha**(2))",
            "(alpha + 1) * ( - alpha*e**( - 1)) - alpha**(2)*e**( - 1) + alpha + alpha**(2)",
            "(alpha + 1) * ( - alpha*e**( - 1)) + alpha*e**( - (0)/(alpha)) - alpha**(2)*(e**( - 1) - 1)",
            "alpha*(1 - e**( - 1)) + (( - 2 + e) * alpha**(2))/(e)",
            "alpha*( - (1)/(e) * (2*alpha + 1) + (1 + alpha))",
            "alpha**(2) - (2*alpha**(2) + alpha)/(e) + alpha",
            "alpha**(2) - 2*alpha**(2)*e**( - 1) - alpha*e**( - 1) + alpha",
            "alpha**(2)*( - 2*e**( - 1) + 1) + alpha*(1 - e**( - 1))",
            "- alpha*(2*alpha + 1) * (1)/(e) + alpha*(alpha + 1)",
            "alpha*(( - (2*alpha + 1))/(e) + (alpha + 1))",
            "( - alpha*(2*alpha + 1)/(e) + alpha + alpha**(2))",
            "alpha**(2) + alpha - (2*alpha**(2) + alpha)/(e)",
            "alpha**(2) + alpha - 2*alpha**(2)*e**( - 1) - alpha*e**( - 1)",
            "alpha**(2) + alpha - 2*(alpha**(2))/(e) - (alpha)/(e)",
            "( - alpha - 2*alpha**(2))/(e) + alpha**(2) + alpha",
            "( - alpha - 2*alpha**(2))/(e) + alpha + alpha**(2)",
            "alpha**(2) + alpha - (alpha + 1) * alpha*e**( - 1) - alpha**(2)*e**( - 1)",
            "alpha**(2) + alpha - (alpha)/(e) - (2*alpha**(2))/(e)",
            "alpha**(2) + alpha - (alpha)/(e) - 2*(alpha**(2))/(e)",
            "- (alpha*(2*alpha - e*alpha + 1 - e))/(e)",
            "(alpha**(2)*e - 2*alpha**(2) + alpha*e - alpha)/(e)",
            "(alpha**(2)*(e - 2) + alpha*(e - 1))/(e)",
            "(alpha**(2)*(e - 2))/(e) + alpha*(1 - e**( - 1))",
            "alpha*(alpha + 1 - e**( - 1)*(2*alpha + 1))",
            "- alpha*(alpha + 1) * e**( - 1) - alpha**(2)*e**( - 1) + alpha + alpha**(2)",
            "- alpha*(alpha + 1) * e**( - 1) + alpha - alpha**(2)*((1)/(e) - 1)",
            "( - alpha) * (alpha + 1) * (e**( - 1)) + alpha - (alpha**(2)) * (e**( - 1) - 1)",
            "- (alpha) * (alpha + 1) * (e**( - 1)) + (alpha) - (alpha**(2)) * (e**( - 1) - 1)",
            "- alpha*(alpha + 1) * e**( - 1) + alpha - alpha**(2)*(e**( - 1) - 1)",
            "- alpha*(alpha + 1) * e**( - 1) + alpha - alpha**(2)*(e**( - 1) - e**(0))",
            "alpha + alpha**(2) - (2*alpha**(2) + alpha) * e**( - 1)",
            "alpha + alpha**(2) - alpha*(alpha + 1) * e**( - 1) - alpha**(2)*e**( - 1)",
            "alpha - (alpha)/(e) + alpha**(2) - 2*alpha**(2)*e**( - 1)",
            "- alpha*e**( - 1)*(2*alpha + 1) + alpha*(alpha + 1)",
            "- alpha*e**( - 1) + alpha + alpha**(2) - 2*alpha**(2)*e**( - 1)",
            "alpha*e**( - 1)*((e - 2) * alpha + e - 1)",
            "- (alpha)/(e) * (2*alpha + 1) + alpha*(1 + alpha)",
            "- ((alpha)/(e)) * (2*alpha + 1) + alpha + alpha**(2)",
            "- (alpha)/(e) * (2*alpha + 1 - e - alpha*e)",
            "(alpha*(e*alpha - 2*alpha + e - 1))/(e)",
            "(alpha)/(e) * ((e - 2) * alpha + e - 1)",
            "(alpha)/(e) * (e*alpha - 2*alpha + e - 1)",
            "- e**( - 1)*(2*alpha**(2) + alpha) + alpha**(2) + alpha",
            "e**( - 1)*alpha*((e - 2) * alpha + e - 1)",
            "((e - 2) * alpha**(2) - alpha)/(e) + alpha",
            "((e - 2) * alpha**(2))/(e) + alpha*(1 - (1)/(e))"
        ]
    },
    "(1/2) - (e**(-pi/3) / 4)*(sqrt(3) + 1)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(1 - ((1 + sqrt(3))/(2)) * e**( - (pi)/(3)))/(2)",
            "((1)/(2)) * (1 - ((1)/(2)) * (e**( - (pi)/(3))*(1 + sqrt(3))))",
            "(1)/(2) * (1 - (1)/(2) * e**(( - pi)/(3))*(1 + sqrt(3)))",
            "(1)/(2) * (1 - (1 + sqrt(3))/(2) * e**( - (pi)/(3)))",
            "(1)/(2) - ((1 + 3**((1)/(2))) * e**( - (pi)/(3)))/(4)",
            "(1)/(2) - (1)/(4) * (1 + sqrt(3)) * e**( - (pi)/(3))",
            "(1)/(2) - (1)/(4*e**((pi)/(3))) * (sqrt(3) + 1)",
            "((1)/(2)) * (1 - e**( - (pi)/(3))*((1 + sqrt(3))/(2)))",
            "(1)/(2) * (1 - e**( - (pi)/(3))*((1 + sqrt(3))/(2)))",
            "(1)/(2) * (1 - e**(( - pi)/(3))*((sqrt(3) + 1)/(2)))",
            "(1)/(2) * (1 - ((sqrt(3) + 1)/(2*e**((pi)/(3)))))",
            "(1)/(2) + ( - 1 - sqrt(3))/(4*e**((pi)/(3)))",
            "(1)/(2) - (1 + sqrt(3))/(4*e**((pi)/(3)))",
            "(1)/(2) - ((1 + sqrt(3)))/(4) * e**( - (pi)/(3))",
            "(1)/(2) - ((1 + sqrt(3))/(4)) * e**( - (pi)/(3))",
            "(1)/(2) - (1 + sqrt(3))/(4) * e**( - (pi)/(3))",
            "(1)/(2) - (((1 + sqrt(3)) * e**( - (pi)/(3))))/(4)",
            "(1)/(2) - ((1 + sqrt(3)) * e**( - (pi)/(3)))/(4)",
            "(1)/(2) - ((1 + sqrt(3)) * e**(( - pi)/(3)))/(4)",
            "(1)/(2) - ((3**((1)/(2))) + 1) * (e**( - (pi)/(3)))/(4)",
            "(1)/(2) - ((3**((1)/(2)))/(4)) * e**( - (pi)/(3)) - (e**( - (pi)/(3)))/(4)",
            "(-1)/(2) * e**((-1)/(3) * pi)*((1 + sqrt(3))/(2)) + (1)/(2)",
            "(1)/(2) - e**( - (pi)/(3))*((1)/(4) + (sqrt(3))/(4))",
            "(1)/(2) * (e**(( - pi)/(3))*(( - 1 - sqrt(3))/(2)) + 1)",
            "- (1)/(2) * e**( - ((pi)/(3)))*((1 + sqrt(3))/(2)) + (1)/(2)",
            "- (1)/(2) * e**( - ((pi)/(3)))*(1 + sqrt(3))/(2) + (1)/(2)",
            "(1)/(2) - (e**( - (pi)/(3))*(1 + sqrt(3))/(2))/(2)",
            "((1)/(2)) - ((e**( - (pi)/(3))*(1 + sqrt(3)))/(4))",
            "(1)/(2) - (e**( - ((pi)/(3)))*(1 + sqrt(3)))/(4)",
            "(1)/(2) - e**( - ((pi)/(3)))*((1 + sqrt(3))/(4))",
            "(1)/(2) - e**(( - pi)/(3))*((1 + sqrt(3))/(4))",
            "((1)/(2)) - ((e**( - (pi)/(3)))/(2)) * ((1 + sqrt(3))/(2))",
            "(1)/(2) - (e**(( - pi)/(3)))/(4) - (sqrt(3))/(4) * e**(( - pi)/(3))",
            "(1)/(2) - (e**( - (pi)/(3)))/(4) - sqrt(3) * (e**( - (pi)/(3)))/(4)",
            "(1)/(2) - ((sqrt(3) + 1)/(4)) * e**( - (pi)/(3))",
            "(1)/(2) - ((sqrt(3) + 1) * e**( - ((pi)/(3))))/(4)",
            "(1)/(2) - ((sqrt(3) + 1) * e**( - (pi)/(3)))/(4)",
            "(1)/(2) - ((sqrt(3) + 1) * e**(( - pi)/(3)))/(4)",
            "(1)/(2) - ((sqrt(3))/(2) + (1)/(2))/(2*e**((pi)/(3)))",
            "(1)/(2) * ( - (sqrt(3))/(2) * e**( - (pi)/(3)) - (1)/(2) * e**( - (pi)/(3)) + 1)",
            "(1)/(4) * (2 - (1 + sqrt(3)) * e**( - (pi)/(3)))",
            "(1)/(4) * (2 - e**( - (pi)/(3))*(sqrt(3) + 1))",
            "(1)/(4) * e**( - (pi)/(3))*( - 1 - sqrt(3)) + (1)/(2)",
            "- (1)/(4) * e**( - (pi)/(3))*(1 + sqrt(3)) + (1)/(2)",
            "- (1)/(4) * (e**( - (pi)/(3)) + sqrt(3) * e**( - (pi)/(3)) - 2)",
            "((1 - (e**( - (pi)/(3))*((1 + sqrt(3))/(2)))))/(2)",
            "( - 1 - sqrt(3))/(4*e**((pi)/(3))) + (1)/(2)",
            "(-1 - sqrt(3))/(4*e**((pi)/(3))) + (1)/(2)",
            "- ((1 + sqrt(3)))/(4*e**((pi)/(3))) + (1)/(2)",
            "( - 1 - sqrt(3))/(4) * e**( - ((pi)/(3))) + (1)/(2)",
            "( - 1 - sqrt(3))/(4) * e**( - (pi)/(3)) + (1)/(2)",
            "- (1 + sqrt(3))/(4) * e**( - (pi)/(3)) + (1)/(2)",
            "- (1 + sqrt(3))/(4) * e**(( - pi)/(3)) + (1)/(2)",
            "(2 - (1 + sqrt(3)) * e**( - (pi)/(3)))/(4)",
            "(2*e**((pi)/(3)) - 1 - 3**((1)/(2)))/(4*e**((pi)/(3)))",
            "(2 - e**( - (pi)/(3))*(1 + sqrt(3)))/(4)",
            "(2*e**((pi)/(3)) - 1 - sqrt(3))/(4*e**((pi)/(3)))",
            "(2 - e**( - (pi)/(3))*(sqrt(3) + 1))/(4)",
            "(2 - e**( - (pi)/(3)) - sqrt(3) * e**( - (pi)/(3)))/(4)",
            "(2 - (sqrt(3) + 1) * e**( - (pi)/(3)))/(4)",
            "( - e**(( - pi)/(3))*((1 + sqrt(3))/(2)) + 1)/(2)",
            "( - e**( - (pi)/(3))*((1 + sqrt(3))/(2)))/(2) + (1)/(2)",
            "( - e**( - (pi)/(3))*(1 + sqrt(3)) + 2)/(4)",
            "(e**( - (pi)/(3))*(-1 - sqrt(3)) + 2)/(4)",
            "(( - e**(( - pi)/(3))) * (1 + sqrt(3)))/(4) + (1)/(2)",
            "e**( - (pi)/(3))*( - (1 + sqrt(3))/(4)) + (1)/(2)",
            "( - e**(( - pi)/(3)))/(2) * ((1 + sqrt(3))/(2)) + (1)/(2)",
            "- (e**( - (pi)/(3)))/(2) * ((sqrt(3) + 1)/(2)) + (1)/(2)",
            "(( - e**( - (pi)/(3))) * (3**((1)/(2)) + 1) + 2)/(4)",
            "( - (e**(( - pi)/(3)))/(4)) * (1 + sqrt(3)) + (1)/(2)",
            "- (e**( - (pi)/(3)))/(4) * (1 + sqrt(3)) + (1)/(2)",
            "( - e**(( - pi)/(3)))/(4) * (sqrt(3) + 1) + (1)/(2)",
            "- ((e**( - (pi)/(3)))/(4)) * (sqrt(3) + 1) + (1)/(2)",
            "- (e**( - (pi)/(3)))/(4) * (sqrt(3) + 1) + (1)/(2)",
            "e**( - (pi)/(3))*( - (sqrt(3) + 1)/(4)) + (1)/(2)",
            "( - e**( - (pi)/(3))*((sqrt(3))/(2) + (1)/(2)) + 1)/(2)",
            "( - e**(( - pi)/(3))*((sqrt(3))/(2) + (1)/(2)) + 1)/(2)",
            "( - e**( - (pi)/(3)) - sqrt(3) * e**(( - pi)/(3)) + 2)/(4)",
            "- (sqrt(3) + 1 - 2*e**((pi)/(3)))/(4*e**((pi)/(3)))",
            "- (sqrt(3) + 1)/(4*e**((pi)/(3))) + (1)/(2)",
            "- (sqrt(3) * e**( - (pi)/(3)))/(4) - (e**( - (pi)/(3)))/(4) + (1)/(2)",
            "( - sqrt(3) * e**( - (pi)/(3)) - e**( - (pi)/(3)))/(4) + (1)/(2)"
        ]
    },
    "(C*(((1)/(x_1)) - ((1)/(x_2)))  + D*(x_2 - x_1) )": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "C*(((1)/(x_1)) - (1)/(x_2)) + D*(x_2 - x_1)",
            "C*((1)/(x_1) - (1)/(x_2)) + D*(x_2 +  - x_1)",
            "C*((1)/(x_1) - (1)/(x_2)) + D*(x_2 - x_1)",
            "C*( - (1)/(x_2) + (1)/(x_1)) + D*x_2 - D*x_1",
            "- C*((1)/(x_2) - (1)/(x_1)) + D*(x_2 - x_1)",
            "C*( - (1)/(x_2) + (1)/(x_1)) + D*(x_2 - x_1)",
            "C*(( - (1)/(x_2)) + ((1)/(x_1))) + D*(x_2 - x_1)",
            "( - C + D*(x_2)**(2))/(x_2) + (C - D*(x_1)**(2))/(x_1)",
            "C*(x_1**( - 1) - x_2**( - 1)) + D*(x_2 - x_1)",
            "(C)/(x_1) - (C)/(x_2) - D*x_1 + D*x_2",
            "((C)/(x_1) - (C)/(x_2)) + (D*x_2 - D*x_1)",
            "((C)/(x_1) - (C)/(x_2)) + D*x_2 - D*x_1",
            "(C)/(x_1) - (C)/(x_2) + D*x_2 - D*x_1",
            "((C)/(x_1)) - ((C)/(x_2)) + D*(x_2 - x_1)",
            "(C)/(x_1) - (C)/(x_2) + D*(x_2 - x_1)",
            "(C)/(x_1) - D*x_1 - (C)/(x_2) + D*x_2",
            "( - C*x_1 + D*x_1*x_2**(2) + C*x_2 - D*x_1**(2)*x_2)/(x_1*x_2)",
            "(( - C*x_1) + (D*x_1*(x_2)**(2)) + (C*x_2) + ( - D*(x_1)**(2) * x_2))/(x_1*x_2)",
            "( - C*(x_1) + D*(x_1) * (x_2)**(2) + C*(x_2) - D*(x_1)**(2) * (x_2))/((x_1) * (x_2))",
            "(C)/(x_1) + D*x_2 - (C)/(x_2) - D*x_1",
            "((C + x_1*x_2*D) * (x_2 - x_1))/(x_1*x_2)",
            "- C*((x_1 - x_2)/(x_1*x_2)) + D*(x_2 - x_1)",
            "(( - C*(x_2)**( - 1))/(1)) + D*(x_2) - ((( - C*(x_1)**( - 1))/(1)) + D*(x_1))",
            "((C*(x_2)**( - 1))/( - 1) + D*x_2) - ((C*(x_1)**( - 1))/( - 1) + D*x_1)",
            "((C*x_2**( - 1))/( - 1) + D*x_2) - ((C*x_1**( - 1))/( - 1) + D*x_1)",
            "(C*x_2**( - 1) - C*x_1**( - 1))/( - 1) + D*(x_2 - x_1)",
            "( - C*(x_2)**( - 1) + D*(x_2)) - ( - C*(x_1)**( - 1) + D*(x_1))",
            "( - C*x_2**( - 1) + D*x_2) - ( - C*x_1**( - 1) + D*x_1)",
            "(( - C*(x_2)**( - 1)) + (D*x_2)) - (( - C*(x_1)**( - 1)) + (D*x_1))",
            "- C*(x_2)**( - 1) + D*(x_2) + C*(x_1)**( - 1) - D*(x_1)",
            "- C*(x_2)**( - 1) + D*(x_2) - ( - C*(x_1)**( - 1) + D*(x_1))",
            "- C*(x_2)**( - 1) + D*x_2 + (C) * (x_1**( - 1)) - D*x_1",
            "- C*(x_2)**( - 1) + D*x_2 + C*(x_1)**( - 1) - D*x_1",
            "- C*(x_2)**( - 1) + D*x_2 + C*x_1**( - 1) - D*x_1",
            "- C*x_2**( - 1) + D*x_2 + C*x_1**( - 1) - D*x_1",
            "- C*x_2**( - 1) + D*x_2 + C*x_1**(-1) - D*x_1",
            "- C*x_2**(-1) + D*x_2 + C*x_1**(-1) - D*x_1",
            "C*( - (x_2)**( - 1) + (x_1)**( - 1)) + D*(x_2 - x_1)",
            "C*( - (x_2**( - 1)) + (x_1**( - 1))) + D*(x_2 - x_1)",
            "C*( - x_2**( - 1) + x_1**( - 1)) + D*(x_2 - x_1)",
            "( - C)/(x_2) + (C)/(x_1) + D*x_2 - D*x_1",
            "- (C)/(x_2) + (C)/(x_1) + D*x_2 - D*x_1",
            "- (C)/(x_2) + (C)/(x_1) + D*(x_2 - x_1)",
            "( - (C)/(x_2) + D*(x_2)) - ( - (C)/(x_1) + D*(x_1))",
            "( - (C)/(x_2) + D*x_2) - ( - (C)/(x_1) + D*x_1)",
            "( - C)/(x_2) + D*x_2 + (C)/(x_1) - D*x_1",
            "(( - C)/(x_2) + D*x_2) - (( - C)/(x_1) + D*x_1)",
            "(C)/( - x_2) + D*x_2 + (C)/(x_1) - D*x_1",
            "- (C)/(x_2) + D*(x_2) + (C)/(x_1) - D*(x_1)",
            "- (C)/(x_2) + D*x_2 + (C)/(x_1) - D*x_1",
            "(C*(x_2 - x_1)/(x_2*x_1)) - D*(x_1 - x_2)",
            "(D*x_1*x_2*(x_2 - x_1) - C*(x_1 - x_2))/(x_1*x_2)",
            "((D*(x_2)**(2) - C)/(x_2)) - ((D*(x_1)**(2) - C)/(x_1))",
            "(D*(x_2)**(2) - C)/(x_2) - (D*(x_1)**(2) - C)/(x_1)",
            "(D*(x_2)**(2) - C)/(x_2) - (D*(x_1**(2)) - C)/(x_1)",
            "(D*x_2**(2) - C)/(x_2) - (D*x_1**(2) - C)/(x_1)",
            "D*(x_2) + C*(x_1)**( - 1) - D*(x_1) - C*(x_2)**( - 1)",
            "D*x_2 + (C)/(x_1) - (C)/(x_2) - D*x_1",
            "D*x_2 - C*x_2**( - 1) + C*x_1**( - 1) - D*x_1",
            "D*x_2 - C*x_2**(-1) + C*x_1**(-1) - D*x_1",
            "D*x_2 - (C)/(x_2) + (C)/(x_1) - D*x_1",
            "(D*x_2 - (C)/(x_2)) - (D*x_1 - (C)/(x_1))",
            "D*x_2 - (C)/(x_2) - D*x_1 + (C)/(x_1)",
            "D*x_2 - D*x_1 + ((C)/(x_1)) - ((C)/(x_2))",
            "D*x_2 - D*x_1 + (C)/(x_1) - (C)/(x_2)",
            "D*x_2 - D*x_1 - C*x_2**( - 1) + C*x_1**( - 1)",
            "D*x_2 - D*x_1 - (C)/(x_2) + (C)/(x_1)",
            "D*(x_2 - x_1) + C*(((1)/(x_1)) - (1)/(x_2))",
            "D*(x_2 - x_1) + C*((1)/(x_1) - (1)/(x_2))",
            "D*(x_2 - x_1) + C*( - (1)/(x_2) + (1)/(x_1))",
            "D*(x_2 - x_1) - C*((1)/(x_2) - ((1)/(x_1)))",
            "D*(x_2 - x_1) - C*((1)/(x_2) - (1)/(x_1))",
            "D*(x_2 - x_1) + C*(x_1**( - 1) - x_2**( - 1))",
            "D*(x_2 - x_1) + (C)/(x_1) - (C)/(x_2)",
            "D*(x_2 - x_1) - C*((x_1 - x_2)/(x_1*x_2))",
            "D*(x_2 - x_1) - (C)/(x_2) + (C)/(x_1)",
            "- ((x_1 - x_2) * (C + D*x_1*x_2))/(x_2*x_1)",
            "(x_2**(2)*D - C)/(x_2) - (D*(x_1)**(2) - C)/(x_1)",
            "(x_2 - x_1) * (D + (C)/(x_1*x_2))",
            "(((x_2 - x_1) * (D*x_1*x_2 + C))/(x_1*x_2))",
            "( - ( - x_2 + x_1) * (D*x_1*x_2 + C))/(x_2*x_1)",
            "((x_2 - x_1))/(x_1*x_2) * C + D*(x_2 - x_1)"
        ]
    },
    "((A)/(6*a**(6))) - ((B)/(12*a**(12)))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(1)/(12) * (2*(A)/(a**(6)) - (B)/(a**(12)))",
            "((1)/(6*a**(6))) * (A - (B)/(2*a**(6)))",
            "(1)/(6*a**(6)) * (A - (B)/(2*a**(6)))",
            "(((1)/(6)) * A*a**( - 6)) - (1)/(12) * B*a**( - 12)",
            "((1)/(6) * A*a**( - 6)) - ((1)/(12)) * B*a**( - 12)",
            "(1)/(6) * (A)/(a**(6)) - (1)/(12) * (B)/(a**(12))",
            "(1)/(6) * A*a**( - 6) - (1)/(12) * B*a**( - 12)",
            "- (( - (1)/(6) * A*a**( - 6)) - ( - (1)/(12) * B*a**( - 12)))",
            "(2*a**(6)*A - B)/(12*a**(12))",
            "(2*A*a**(6) - B)/(12*a**(12))",
            "(2*A*(a)**(6) - B)/(12*(a)**(12))",
            "(2*A*(a**( - 6)) + B*( - a**( - 12)))/(12)",
            "(2*A*(a**( - 6)) - B*a**( - 12))/(12)",
            "(2*A*a**( - 6) - B*a**( - 12))/(12)",
            "- ((( - 2*A*a**( - 6)) + B*a**( - 12))/(12))",
            "- (2*A*(a)**( - 6) - B*(a)**( - 12))/( - 12)",
            "((A)/(1) - (B)/(2*a**(6))) * (1)/(6*a**(6))",
            "((A*2*a**(6)) - B)/(12*a**(12))",
            "(A)/(6) * (1)/(a**(6)) - (B)/(12) * (1)/(a**(12))",
            "- (a**( - 6))/(6) * ((B)/(2) * a**( - 6) - A)",
            "(a**( - 6)*(A)/(6)) - a**( - 12)*(B)/(12)",
            "((A)/(6*a**(6)) - (B)/(12*a**(12)))",
            "((A)/(6*a**(6))) - ((B)/(12*a**(12)))",
            "(A)/(6*a**(6)) + (B)/( - 12*a**(12))",
            "(A)/(6*a**(6)) - ((B)/(12*a**(12)))",
            "(A)/(6*a**(6)) - (B)/(12*a**(12))",
            "- ((A)/( - 6*a**(6)) + (B)/(12*a**(12)))",
            "- ((A)/( - 6*a**(6)) - (B)/( - 12*a**(12)))",
            "- (A)/( - 6*a**(6)) - (B)/(12*a**(12))",
            "(A)/(6) * a**( - 6) - ((B)/(12) * a**( - 12))",
            "(A)/(6) * a**( - 6) - (B)/(12) * a**( - 12)",
            "(A)/(6) * a**(-6) - (B)/(12) * a**(-12)",
            "- ( - (A)/(6) * (a)**( - 6) + (B)/(12) * (a)**( - 12))",
            "- (A)/( - 6) * a**( - 6) + (B)/( - 12) * a**( - 12)",
            "a**( - 6)*((A)/(6) - (B)/(12) * a**( - 6))",
            "((A*a**( - 6))/(6)) - ((B*a**( - 12))/(12))",
            "(A)/(a**(6)*6) - (B)/(a**(12)*12)",
            "(A*(a)**( - 6))/(6) - (B*(a)**( - 12))/(12)",
            "(A*(a**( - 6))/(6)) - (B*(a**( - 12))/(12))",
            "(A*a**( - 6))/(6) - ((B*a**( - 12))/(12))",
            "(A*a**( - 6))/(6) - (B*(a**( - 12))/(12))",
            "(A*a**( - 6))/(6) - (B*a**( - 12))/(12)",
            "(A*a**(-6))/(6) - (B*a**(-12))/(12)",
            "+ (A*a**( - 6))/(6) - (B*a**( - 12))/(12)",
            "- (( - A*a**( - 6))/(6) + (B*a**( - 12))/(12))",
            "- (( - A*a**( - 6))/(6)) - ((B*a**( - 12))/(12))",
            "- (( - A*a**( - 6))/(6)) - (B*a**( - 12))/(12)",
            "- ((A*a**( - 6))/( - 6) + (B*a**( - 12))/(12))",
            "- ((A*a**( - 6))/( - 6) - (B*a**( - 12))/( - 12))",
            "- (A*a**(-6))/(-6) + (B*a**(-12))/(-12)",
            "A*(a**( - 6))/(6) - B*(a**( - 12))/(12)",
            "- ((B)/(12*a**(12)) - (A)/(6*a**(6)))",
            "- ((B)/(12*a**(12))) + ((A)/(6*a**(6)))",
            "- (B)/(12*a**(12)) + (A)/(6*a**(6))",
            "( - B + 2*a**(6)*A)/(12*a**(12))",
            "- ((B - 2*a**(6)*A)/(12*a**(12)))",
            "- (B - 2*a**(6)*A)/(12*a**(12))",
            "- (B - 2*A*a**(6))/(12*a**(12))"
        ]
    },
    "((M-m)/(M+m))*u": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(M - m)/(M + m) * u",
            "( - ((m - M) * u))/(m + M)",
            "((M - m) * u)/(m + M)",
            "(M - m) * (u)/(m + M)",
            "(M*u - ((2*M*m*u)/(M + m)))/(M)",
            "((M*u) - ((2*m*u)/(1 + ((m)/(M)))))/(M)",
            "(M*u - m*((2*M*u)/(M + m)))/(M)",
            "(M*u - m*(2*M*u)/(M + m))/(M)",
            "(M*u - m*(2*M*u*m)/(M*m + m**(2)))/(M)",
            "(M*u - m*((2*u*M)/(m + M)))/(M)",
            "( - m*u + M*u)/(m + M)",
            "(M*u - m*u)/(m + M)",
            "(M*u - m*u)/(M + m)",
            "(M*u - u*m)/(m + M)",
            "u*(1 - (2*m)/(m + M))",
            "u - (2*m**(2)*u)/(m**(2) + m*M)",
            "u - (2*m**(2)*u)/(M*m + m**(2))",
            "u - (2*M*m*u)/(M**(2) + M*m)",
            "u - (2*m*u)/(m + M)",
            "u - 2*m*(u)/(m + M)",
            "u - ((2*m*u)/(M + m))",
            "u - (2*m*(u)/(M + m))",
            "u - (2*m*u)/(M + m)",
            "u - (2*u*m**(2))/(m**(2) + M*m)",
            "u - (2*u*m**(2)*M)/(m**(2)*M + M**(2)*m)",
            "u - ((2*u*(m)/(M))/(1 + (m)/(M)))",
            "u - (2*u*m)/(m + M)",
            "u - ((2*u*m)/(M + m))",
            "u - (2*u*m)/(M + m)",
            "(u*(M + m) - 2*u*m)/(M + m)",
            "(u*(M - m))/(M + m)",
            "u*(M - m)/(M + m)",
            "(u*M - u*m)/(m + M)"
        ]
    },
    "v==((M-m)/(M+m))*u": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "u - (2*M*m**(2)*u)/(M*m**(2) + M**(2)*m) == v",
            "v == (2*M*u)/(M + m) - u",
            "v == (2*u)/(1 + (m)/(M)) - u",
            "v == (2*u*M)/(M + m) - u",
            "v == (M**(2)*u - M*u*m)/(M*m + M**(2))",
            "v == (M - m)/(M + m) * u",
            "v == ( - M*m*u + M**(2)*u)/(M*m + M**(2))",
            "v == (M*u - (2*M*m*u)/(M + m))/(M)",
            "v == (M*u - m*((2*M*u)/(M + m)))/(M)",
            "v == (m*u - M*u)/( - M - m)",
            "v == ((M*u) - (m*u))/(m + M)",
            "v == (M*u - m*(u))/(m + M)",
            "v == (M*u - m*u)/(m + M)",
            "v == (M*u - m*u)/(M + m)",
            "v == (M*u - u*m)/(m + M)",
            "v == (M*u - u*m)/(M + m)",
            "v == u*(1 - (2*m)/(M + m))",
            "v == u*(1 - (2*(m)/(m + M)))",
            "v == (u*(1 - (m)/(M))/(1 + (m)/(M)))",
            "v == u - (2*m**(2)*u)/(m**(2) + M*m)",
            "v == u - (2*m**(2)*u)/(M*m + m**(2))",
            "v == u - (2*M*m**(2)*u)/(M*m**(2) + M**(2)*m)",
            "v == u - (2*M*m*u)/(M*(m + M))",
            "v == u - (2*m*u)/(m + M)",
            "v == u - ((2*m*u)/(M + m))",
            "v == u - (2*m*u)/(M + m)",
            "v == u - ((2*m*u)/((m)/(M) + 1))/(M)",
            "v == u - (2*M*u*m)/(M*m + M**(2))",
            "v == u - (2*u*m**(2))/(M*m + m**(2))",
            "v == u - (2*u*m)/(m + M)",
            "v == (u*(M - m))/(m + M)",
            "v == (u*(M - m))/(M + m)",
            "v == u*(M - m)/(M + m)"
        ]
    },
    "m == a*(b*c - n)/b ": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(a*b*c - a*n)/(b) == m",
            "(a*b*c - n*a)/(b) == m",
            "(a*(b*c - n))/(b) == m",
            "(a*c*b - a*n)/(b) == m",
            "(a*(c*b - n))/(b) == m",
            "a*(c - ((n)/(b))) == m",
            "a*(c - (n)/(b)) == m",
            "(c*a*b - a*n)/(b) == m",
            "(c*a*b - n*a)/(b) == m",
            "c*a - (n*a)/(b) == m",
            "(c - (n)/(b)) * a == m",
            "m == ((a*b*c) - (a*n))/(b)",
            "m == (a*b*c - a*n)/(b)",
            "m == ((a*b*c - n*a))/(b)",
            "m == ((a*b*c - n*a)/(b))",
            "m == (a*b*c - n*a)/(b)",
            "m == (a*(b*c - n))/(b)",
            "m == a*(b*c - n)/(b)",
            "m == (a*c - a*((n)/(b)))",
            "m == a*c - ((a*n)/(b))",
            "m == a*c - (a*(n)/(b))",
            "m == a*c - (a*n)/(b)",
            "m == a*c - a*((n)/(b))",
            "m == a*c - a*(n)/(b)",
            "m == (a*c*b - a*n)/(b)",
            "m == (a*(c*b - n))/(b)",
            "m == a*((c*b - n)/(b))",
            "m == a*(c*b - n)/(b)",
            "m == a*c - (n*(a)/(b))",
            "m == a*c - (n*a)/(b)",
            "m == a*c - n*(a)/(b)",
            "m == (a) * ((c) - (n)/(b))",
            "m == a*(c - ((n)/(b)))",
            "m == a*(c - (n)/(b))",
            "m == (a*( - n + b*c))/(b)",
            "m == (a*( - n + b*c)/(b))",
            "m == ( - a*n + c*a*b)/(b)",
            "m == (b*a*c - a*n)/(b)",
            "m == (b*a*c - n*a)/(b)",
            "m == (b*c - n)/(b) * a",
            "m == c*a - ((a*n)/(b))",
            "m == c*a - (a*(n)/(b))",
            "m == c*a - (a*n)/(b)",
            "m == c*a - a*(n)/(b)",
            "m == (c*a*b - a*n)/(b)",
            "m == ((c*a*b) - (n*a))/(b)",
            "m == (c*a*b - n*a)/(b)",
            "m == (c*a) - (n*a)/(b)",
            "m == c*a - ((n*a)/(b))",
            "m == c*a - (n*(a)/(b))",
            "m == c*a - (n*a)/(b)",
            "m == c*a - n*(a)/(b)",
            "m == c*a - (n)/(b) * a",
            "m == (c*b*a - a*n)/(b)",
            "m == (c*b*a - n*a)/(b)",
            "m == ((c*b - n)/(b)) * a",
            "m == (c - (n)/(b))/((1)/(a))",
            "m == (c - ((n)/(b))) * a",
            "m == (c - (n)/(b)) * a"
        ]
    },
    "b == (4*a*c)/(3*(1-4*a))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "( - 4*a*c)/(12*a - 3) == b",
            "(-4*a*c)/(12*a - 3) == b",
            "(4*a*c)/( - 12*a + 3) == b",
            "- (4*a*c)/(12*a - 3) == b",
            "(4*a*c)/(3 - 12*a) == b",
            "4*a*(c)/(3 - 12*a) == b",
            "((4*a*c)/(3*(1 - 4*a))) == b",
            "(4*a*c)/(3*(1 - 4*a)) == b",
            "( - 4*a*c)/(3*(4*a - 1)) == b",
            "- (4*a*c)/(3*(4*a - 1)) == b",
            "- (4*c*a)/((3) * (4*a - 1)) == b",
            "- (4*c*a)/(3*(4*a - 1)) == b",
            "b == (1)/(3) * ((4*a*c)/(1 - 4*a))",
            "b == (1)/(3) * (4*a*(c)/(1 - 4*a))",
            "b == ((1)/(3) * a*c)/((1)/(4) - a)",
            "b == (1)/(3) * ((c)/((1)/(4*a) - 1))",
            "b == ((4)/(3) * a*c)/( - 4*a + 1)",
            "b ==  - ((4*a*c)/(12*a - 3))",
            "b ==  - (4*a*c)/(12*a - 3)",
            "b ==  - 4*a*(c)/(12*a - 3)",
            "b == ( - 4*a*c)/(12*a - 3)",
            "b == (( - 4*a*c)/(12*a - 3))",
            "b == (-4*a*c)/(12*a - 3)",
            "b == (4*a*c)/( - 12*a + 3)",
            "b == ((4*a*c)/(1 - 4*a))/(3)",
            "b == (4*a*c)/((1 - 4*a) * 3)",
            "b == ( - 4*a*c)/( - 3 + 12*a)",
            "b == ((4*a*c))/(3 - 12*a)",
            "b == ((4*a*c)/(3 - 12*a))",
            "b == (-4*a*c)/(-3 + 12*a)",
            "b == (4*a*c)/(3 - (12*a))",
            "b == (4*a*c)/(3 - 12*a)",
            "b == 4*a*(c)/(3 - 12*a)",
            "b == ( - 4*a*c)/(3*( - 1 + 4*a))",
            "b == ((4*a*c)/(3))/(1 - 4*a)",
            "b == (4*a*c)/((3) * (1 - 4*a))",
            "b == (4*a*c)/(3*(1 - 4*a))",
            "b == 4*a*(c)/(3*(1 - 4*a))",
            "b ==  - ((4*a*c)/(3*(4*a - 1)))",
            "b ==  - (4*a*c)/(3*(4*a - 1))",
            "b == ( - 4*a*c)/(3*(4*a - 1))",
            "b ==  - (4*c*a)/(12*a - 3)",
            "b == ( - 4*c*a)/(12*a - 3)",
            "b == (4*c*a)/(3 - 12*a)",
            "b ==  - (4*c*a)/(3*(4*a - 1))",
            "b == ( - 4*c*a)/(3*(4*a - 1))",
            "b == ((c)/((1 - (1)/(4*a))/( - 1)))/(3)",
            "b == (( - c)/(1 - (1)/(4*a)))/(3)",
            "b == (((c)/((1)/(4*a) - 1)))/(3)",
            "b == ((c)/(((1)/(4*a)) - 1))/(3)",
            "b == ((c)/((1)/(4*a) - 1))/(3)",
            "b == ((c)/((1 - 4*a)/(4*a)))/(3)",
            "b == (c)/((1 - 4*a)/((4*a)/(3)))",
            "b == ( - c)/(3*(1 - (1)/(4*a)))",
            "b ==  - (c)/(3*(1 - ((1)/(4))/(a)))",
            "b == ((c)/(3))/((1)/((4*a)) - 1)",
            "b == ((c)/(3))/((1)/(4*a) - 1)",
            "b == (c)/(3*((1)/(4*a) - 1))",
            "b ==  - (c)/(3 - (3)/(4*a))",
            "b == (c)/((3)/(4*a) - 3)",
            "b == c*(4*a)/(3 - 12*a)",
            "((c)/((1)/(4*a) - 1))/(3) == b",
            "(c)/(((1)/(4*a) - 1) * 3) == b",
            "( - c)/(3 - (3)/(4*a)) == b",
            "(( - c)/(3 - (3)/(4*a))) == b",
            "(c)/((3)/(4*a) - 3) == b"
        ]
    },
    "sqrt(2*r/(p*r - 3))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "((2*r)**((1)/(2)))/((p*r - 3)**((1)/(2)))",
            "((2*r)/(p*r - 3))**((1)/(2))",
            "(2*(r)/(p*r - 3))**((1)/(2))",
            "((2*r)/(r*p - 3))**((1)/(2))",
            "sqrt( - (2)/(((3)/(r)) - p))",
            "sqrt((2)/((p - (3)/(r))))",
            "sqrt((2)/((p) - ((3)/(r))))",
            "sqrt((2)/(p - ((3)/(r))))",
            "sqrt((2)/(p - (3)/(r)))",
            "sqrt((2)/(p - 3*r**(-1)))",
            "sqrt( - (2*r)/(3 - p*r))",
            "sqrt(( - 2*r)/(3 - p*r))",
            "sqrt((2*r)/( - 3 + p*r))",
            "sqrt(( - 2*r)/(3 - r*p))",
            "sqrt((2*r)/((p*r - 3)))",
            "sqrt((2*r)/(p*r - 3))",
            "sqrt(2*(r)/(p*r - 3))",
            "(sqrt(2*r*(p*r - 3)))/(p*r - 3)",
            "sqrt((2*r)/(r*p - 3))",
            "(sqrt(2*r))/(sqrt(p*r - 3))",
            "((sqrt(2)) * (sqrt(r)))/(sqrt(p*r - 3))",
            "(sqrt(2) * sqrt(r))/(sqrt(p*r - 3))"
        ]
    },
    "S == sqrt(2*r/(p*r - 3))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "((2*r)/(p*r - 3))**((1)/(2)) == S",
            "S == ((2)/(p - 3*r**( - 1)))**((1)/(2))",
            "S == ((2)/(p - (3)/(r)))**((1)/(2))",
            "S == ((2*r)/(p*r - 3))**((1)/(2))",
            "S == ((2*(r)/(p*r - 3))**((1)/(2)))",
            "S == ((2*r*(p*r - 3))**((1)/(2)))/(p*r - 3)",
            "S == ((2*r)/(r*p - 3))**((1)/(2))",
            "sqrt((2)/(p - (3)/(r))) == S",
            "(sqrt(2*r*(p*r - 3)))/(p*r - 3) == S",
            "sqrt((2*r)/(p*r - 3)) == S",
            "sqrt(2*(r)/(p*r - 3)) == S",
            "S == sqrt((2)/( - (3)/(r) + p))",
            "S == sqrt((2)/(( - (3)/(r)) + p))",
            "S == ((sqrt((2)/(p - (3)/(r)))))",
            "S == (sqrt((2)/(p - (3)/(r))))",
            "S == sqrt((2)/((p - (3)/(r))))",
            "S == sqrt((2)/(p - ((3)/(r))))",
            "S == sqrt((2)/(p - (3)/(r)))",
            "S == sqrt((2)/(p - 3*r**(-1)))",
            "S == (sqrt(2*p - (6)/(r)))/(p - (3)/(r))",
            "S == (sqrt(2*p*r**(2) - 6*r))/(p*r - 3)",
            "S == sqrt((2)/((p*r - 3)/(r)))",
            "S == (sqrt(2*r**(2)*p - 6*r))/(r*p - 3)",
            "S == sqrt( - (2*r)/(3 - p*r))",
            "S == sqrt(( - 2*r)/(3 - p*r))",
            "S == sqrt((2*r)/( - 3 + p*r))",
            "S == sqrt(( - 2*r)/(3 - r*p))",
            "S == (sqrt((2*r)/(p*r - 3)))",
            "S == sqrt(((2*r)/(p*r - 3)))",
            "S == sqrt((2*r)/((p*r - 3)))",
            "S == sqrt((2*r)/(p*r - (3)))",
            "S == sqrt((2*r)/(p*r - 3))",
            "S == sqrt(2*(r)/(p*r - 3))",
            "S == (sqrt(2*r*(p*r - 3)))/(p*r - 3)",
            "S == sqrt((2*r)/((r*p - 3)))",
            "S == sqrt((2*r)/(r*p - 3))",
            "S == (sqrt(2*r))/(sqrt(p*r - 3))",
            "S == sqrt(2) * sqrt((r)/( - 3 + p*r))",
            "S == (sqrt(2) * sqrt(r))/(sqrt(p*r - 3))",
            "S == (sqrt( - 6*r + 2*p*r**(2)))/( - 3 + p*r)",
            "S == (sqrt(8*p*r**(2) - 24*r))/(2*p*r - 6)"
        ]
    },
    "sqrt(z**2/(a + b*z**2))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(sqrt((1)/(((a)/(z**(2))) + b)))",
            "(sqrt((1)/((a)/(z**(2)) + b)))",
            "sqrt((1)/(((a)/(z**(2))) + b))",
            "sqrt((1)/((a)/(z**(2)) + b))",
            "sqrt((1)/((b + (a)/(z**(2)))))",
            "sqrt((1)/((b) + ((a)/(z**(2)))))",
            "sqrt((1)/(b + ((a)/(z**(2)))))",
            "sqrt((1)/(b + (a)/(z**(2))))",
            "sqrt((1)/(b + a*z**(-2)))",
            "sqrt((1)/(b + (a)/(z*(z))))",
            "sqrt((b + (a)/(z**(2)))**( - 1))",
            "sqrt((z**(2))/((a + b*z**(2))))",
            "sqrt((z**(2))/(a + b*z**(2)))",
            "sqrt((z**(2))/(a + z**(2)*b))",
            "sqrt(((z)**(2))/(b*z**(2) + a))",
            "sqrt(((z**(2))/(b*z**(2) + a)))",
            "sqrt((z**(2))/((b*z**(2) + a)))",
            "sqrt((z**(2))/(b*(z**(2)) + a))",
            "sqrt((z**(2))/(b*z**(2) + a))",
            "sqrt((z**(2))/((z**(2)*b) + a))",
            "sqrt((z**(2))/(z**(2)*b + a))",
            "((z**(2))/(b*z**(2) + a))**((1)/(2))",
            "(z)/((a + b*z**(2))**((1)/(2)))",
            "z*sqrt((1)/(a + b*z**(2)))",
            "(z)/(sqrt(a + b*z**(2)))",
            "(z*sqrt((a + b*z**(2))))/(a + b*z**(2))",
            "(z*sqrt(a + b*z**(2)))/(a + b*z**(2))",
            "(z*sqrt(a + z**(2)*b))/(a + z**(2)*b)",
            "(z)/(sqrt(b*z**(2) + a))",
            "(z*sqrt(b*z**(2) + a))/(b*z**(2) + a)",
            "(z)/(sqrt((z**(2)*b + a)))",
            "(z)/(sqrt(z**(2)*b + a))"
        ]
    },
    "Y == sqrt(z**2/(a + b*z**2))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "sqrt((1)/(b + (a)/(z**(2)))) == Y",
            "sqrt((z**(2))/((b*z**(2) + a))) == Y",
            "sqrt((z**(2))/(b*z**(2) + a)) == Y",
            "Y == ((1)/(b + (a)/(z**(2))))**((1)/(2))",
            "Y == ((1)/(b + a*z**( - 2)))**((1)/(2))",
            "Y == (1)/(sqrt(b + (a)/(z**(2))))",
            "Y == (abs(z) * sqrt(z**(2)*b + a))/(z**(2)*b + a)",
            "Y == sqrt((1)/(((a)/(z**(2))) + b))",
            "Y == sqrt((1)/((a)/(z**(2)) + b))",
            "Y == sqrt(((1)/(b + (a)/(z**(2)))))",
            "Y == sqrt((1)/((b + (a)/(z**(2)))))",
            "Y == sqrt((1)/(b + ((a)/(z**(2)))))",
            "Y == sqrt((1)/(b + (a)/(z**(2))))",
            "Y == sqrt((1)/(b + a*z**(-2)))",
            "Y == sqrt((1)/(b + (a)/(z*(z))))",
            "Y == sqrt((1)/((b*z**(2) + a)/(z**(2))))",
            "Y == sqrt((b + (a)/(z**(2)))**( - 1))",
            "Y == (sqrt(b + (a)/(z**(2))))/(b + (a)/(z**(2)))",
            "Y == sqrt((z**(2))/(a + b*z**(2)))",
            "Y == sqrt((z**(2))/(a + z**(2)*b))",
            "Y == (sqrt((z**(2))/(b*z**(2) + a)))",
            "Y == sqrt((z**(2))/((b*z**(2) + a)))",
            "Y == sqrt((z**(2))/((b*z**(2)) + (a)))",
            "Y == sqrt((z**(2))/((b*z**(2)) + a))",
            "Y == sqrt((z**(2))/(b*z**(2) + a))",
            "Y == sqrt((z**(2))/((z**(2)*b + a)))",
            "Y == sqrt((z**(2))/(z**(2)*b + a))",
            "Y == (((z**(2))/(b*z**(2) + a))**((1)/(2)))",
            "Y == ((z**(2))/(b*z**(2) + a))**((1)/(2))",
            "Y == ((z**(2))/(z**(2)*b + a))**((1)/(2))",
            "Y == (z*((b*z**(2) + a)**((1)/(2))))/(b*z**(2) + a)",
            "Y == (z)/(sqrt(a + b*z**(2)))",
            "Y == (z*sqrt(a + b*z**(2)))/(a + b*z**(2))",
            "Y == z*(sqrt(a + b*z**(2)))/(a + b*z**(2))",
            "Y == (z*sqrt(a + z**(2)*b))/(a + z**(2)*b)",
            "Y == (z)/(sqrt((b*z**(2) + a)))",
            "Y == (z)/(sqrt(b*z**(2) + a))",
            "Y == (z*(sqrt(b*z**(2) + a)))/(b*z**(2) + a)",
            "Y == (z*sqrt(b*z**(2) + a))/(b*z**(2) + a)",
            "(z)/((b*(z)**(2) + a)**((1)/(2))) == Y"
        ]
    },
    "tan(theta)*x - (g*x**2)*(1 + (tan(theta))**2)/(2*v**2)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "- (g*x**(2))/(2*v**(2)) * tan(theta)**(2) + x*tan(theta) - (g*x**(2))/(2*v**(2))",
            "tan(theta) * x - g*(x**(2))/(2*v**(2)*(cos(theta))**(2))",
            "x*tan(theta) - (1)/(2) * g*((x**(2))/(v**(2))) * (1 + tan(theta)**(2))",
            "x*tan(theta) - (1)/(2) * g*(x**(2))/(v**(2)) * (1 + tan(theta)**(2))",
            "x*tan(theta) - (1)/(2) * g*(x**(2))/(v**(2)*cos(theta)**(2))",
            "x*tan(theta) - (g)/(2*v**(2)) * x**(2)*(1 + tan(theta)**(2))",
            "x*tan(theta) - ((g*x**(2)) * (1 + tan(theta)**(2)))/(2*v**(2))",
            "x*tan(theta) - (g*x**(2)*(1 + tan(theta)**(2)))/(2*v**(2))",
            "x*tan(theta) - g*x**(2)*(1 + tan(theta)**(2))/(2*v**(2))",
            "x*tan(theta) - ((g*x**(2))/(2*v**(2))) * (1 + (tan(theta))**(2))",
            "x*tan(theta) - ((g*x**(2))/(2*v**(2)*cos(theta)**(2)))",
            "x*tan(theta) - (g*x**(2))/(2*v**(2)*cos(theta)**(2))",
            "x*tan(theta) - (g*x**(2))/(2*v**(2)) * (tan(theta)**(2) + 1)",
            "x*tan(theta) - (g*x**(2)*(tan(theta)**(2) + 1))/(2*v**(2))",
            "x*tan(theta) - g*x**(2)*(tan(theta)**(2) + 1)/(2*v**(2))"
        ]
    },
    "y == tan(theta)*x - (g*x**2)*(1 + (tan(theta))**2)/(2*v**2)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "y ==  - (1)/(2) * g*((x**(2))/(v**(2)) * (tan(theta)**(2) + 1)) + tan(theta) * x",
            "y ==  - (1)/(2) * g*(x**(2))/(v**(2)) * tan(theta)**(2) + x*tan(theta) - (1)/(2) * g*(x**(2))/(v**(2))",
            "y ==  - (g*(tan(theta)**(2) + 1))/(2*v**(2)) * x**(2) + x*tan(theta)",
            "y ==  - (g*x**(2))/(2*v**(2)) * tan(theta)**(2) + x*tan(theta) - (g*x**(2))/(2*v**(2))",
            "y == tan(theta) * x - (1)/(2*v**(2)) * (1 + tan(theta)**(2)) * g*x**(2)",
            "y == tan(theta) * x - ((g*(1 + tan(theta)**(2)))/(2*v**(2))) * x**(2)",
            "y == tan(theta) * x - (g)/(2*v**(2)) * x**(2)*(1 + tan(theta)**(2))",
            "y == tan(theta) * x - (g*x**(2))/(2*v**(2)) * (1 + tan(theta)**(2))",
            "y == tan(theta) * x - (g*x**(2))/(2*v**(2)*(cos(theta)**(2)))",
            "y == tan(theta) * x - (g*x**(2))/(2*v**(2)*cos(theta)**(2))",
            "y == tan(theta) * x - g*(x**(2))/(2*v**(2)*cos(theta)**(2))",
            "y == tan(theta) * x - (g*x**(2)*(tan(theta)**(2) + 1))/(2*v**(2))",
            "y == tan(theta) * x - g*x**(2)*(tan(theta)**(2) + 1)/(2*v**(2))",
            "y == (x*tan(theta)) - ((1)/(2) * g*((x**(2))/(v**(2))) * (1 + (tan(theta))**(2)))",
            "y == x*tan(theta) - (1)/(2) * g*(x**(2))/(v**(2)) * (1 + tan(theta)**(2))",
            "y == x*tan(theta) - (1)/(2) * g*(x**(2))/(v**(2)*cos(theta)**(2))",
            "y == x*tan(theta) - ((1)/(2)) * (g) * ((x**(2))/(v**(2))) * (tan(theta)**(2) + 1)",
            "y == x*tan(theta) - ((1)/(2) * g*((x)/(v*cos(theta)))**(2))",
            "y == x*tan(theta) - (1)/(2) * g*((x)/(v*cos(theta)))**(2)",
            "y == x*tan(theta) - (1 + (tan(theta)**(2))) * (g*x**(2))/(2*v**(2))",
            "y == x*tan(theta) - (g)/(2*v**(2)) * x**(2)*(1 + tan(theta)**(2))",
            "y == x*tan(theta) - (g)/(2) * (x**(2)) * (tan(theta)**(2) + 1)/(v**(2))",
            "y == x*tan(theta) - (g)/(2) * (x**(2))/(v**(2)) * (1 + tan(theta)**(2))",
            "y == x*tan(theta) - ((g*x**(2)*(1 + tan(theta)**(2)))/(2*v**(2)))",
            "y == x*tan(theta) - (g*x**(2)*(1 + tan(theta)**(2)))/(2*v**(2))",
            "y == x*tan(theta) - g*x**(2)*(1 + tan(theta)**(2))/(2*v**(2))",
            "y == x*tan(theta) - ((g*x**(2))/(2*v**(2))) * (1 + (tan(theta))**(2))",
            "y == x*tan(theta) - (g*x**(2))/(2*v**(2)) * (1 + (tan(theta))**(2))",
            "y == x*tan(theta) - (g*x**(2))/(2*v**(2)) * (1 + tan(theta)**(2))",
            "y == x*tan(theta) - g*(x**(2))/(2*v**(2)) * (1 + tan(theta)**(2))",
            "y == x*tan(theta) - ((g*x**(2))/(2*v**(2)*cos(theta)**(2)))",
            "y == x*tan(theta) - (g*x**(2))/(2*v**(2)*(cos(theta)**(2)))",
            "y == x*tan(theta) - (g*x**(2))/(2*v**(2)*cos(theta)**(2))",
            "y == x*tan(theta) - (g*x**(2))/(2*v**(2)) * (tan(theta)**(2) + 1)",
            "y == x*tan(theta) - (g*x**(2))/(2*v**(2)) * tan(theta)**(2) - (g*x**(2))/(2*v**(2))",
            "y == x*tan(theta) - ((g*x**(2))/(2*(v*cos(theta))**(2)))",
            "y == x*tan(theta) - (g*x**(2) + g*x**(2)*tan(theta)**(2))/(2*v**(2))",
            "y == x*tan(theta) - (g*x**(2)*sec(theta)**(2))/(2*v**(2))",
            "y == x*tan(theta) - (g*x**(2)*(tan(theta)**(2) + 1))/(2*v**(2))",
            "y == x*tan(theta) - g*x**(2)*(tan(theta)**(2) + 1)/(2*v**(2))",
            "y == x*(tan(theta) - (g*x)/(2*(v*cos(theta))**(2)))",
            "y == x*tan(theta) - (x**(2)*g*(1 + tan(theta)**(2)))/(2*v**(2))",
            "y == x*tan(theta) - (x**(2)*g)/(2*v**(2)) * (1 + tan(theta)**(2))",
            "y == x*tan(theta) - (x**(2)*g)/(2*v**(2)) * (tan(theta)**(2) + 1)"
        ]
    },
    "n_0*e**(((d - 1) * r - r_l) * t)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "n_0*e**((((d - 1) * r) - r_l) * t)",
            "n_0*e**(((d - 1) * r - r_l) * t)",
            "n_0*(e**(((d - 1) * r - r_l) * t))",
            "n_0*e**((d - 1) * r*t - r_l*t)",
            "n_0*(e**((d - 1) * r*t - r_l*t))",
            "n_0*e**((d - 1) * r*t - t*r_l)",
            "n_0*e**((r*(d - 1) - r_l) * t)",
            "n_0*e**(r*t*(d - 1) - (r_l) * t)",
            "n_0*e**(r*t*(d - 1) - t*r_l)",
            "n_0*((e**(t*(d - 1) * r))/(e**(t*r_l)))",
            "n_0*e**(t*((d - 1) * r - r_l))",
            "n_0*(e**(t*(((d - 1) * r) - r_l)))",
            "n_0*e**(t*(dr - (r_l) - r))",
            "n_0*e**(t*(dr - r_l - r))",
            "n_0*e**(t*(r*(d - 1) - r_l))",
            "n_0*e**(t*(r*d - r - r_l))"
        ]
    },
    "n == n_0*e**(((d - 1) * r - r_l) * t)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "n == e**(((d - 1) * r - r_l) * t)*n_0",
            "n == n_0*e**((((d - 1) * r) - r_l) * t)",
            "n == n_0*e**(((d - 1) * (r) - r_l) * t)",
            "n == n_0*e**(((d - 1) * r - (r_l)) * t)",
            "n == n_0*e**(((d - 1) * r - r_l) * t)",
            "n == (n_0) * e**(((d - 1) * r - r_l) * t)",
            "n == n_0*(e**(((d - 1) * r - r_l) * t))",
            "n == (n_0*e**((d - 1) * r*t))/(e**(r_l*t))",
            "n == n_0*e**((d - 1) * r*t)*e**( - (r_l*t))",
            "n == n_0*(e**((d - 1) * r*t))/(e**(r_l*t))",
            "n == n_0*(e**((d - 1) * r*t)*(e**( - r_l*t)))",
            "n == (n_0*e**((d - 1) * r*t))/(e**(t*r_l))",
            "n== n_0*e**((d - 1) * r*t - r_l*t)",
            "n == n_0*e**((d - 1) * r*t - r_l*t)",
            "n == (n_0) * e**((d - 1) * r*t - (r_l*t))",
            "n == n_0*e**((d - 1) * r*t - t*r_l)",
            "n == n_0*e**((dr - r_l - r) * t)",
            "n == n_0*e**((d*r - r - r_l) * t)",
            "n == n_0*e**((dr - r - r_l) * t)",
            "n == n_0*e**(d*r*t - r*t - r_l*t)",
            "n == n_0*e**((r*(d - 1) - r_l) * t)",
            "n == n_0*e**(r*(d - 1) * t - r_l*t)",
            "n == n_0*e**((r*d - r - r_l) * t)",
            "n == n_0*e**(r*t*(d - 1) - r_l*t)",
            "n == n_0*(e**(r*t*(d - 1) - r_l*t))",
            "n == n_0*e**(r*t*(d - 1) - t*r_l)",
            "n == n_0*e**(t*((d - 1) * r - r_l))",
            "n == n_0*e**(t*(d - 1) * r - r_l*t)",
            "n == n_0*e**(t*(d - 1) * r - t*r_l)",
            "n == n_0*e**(t*(dr - r - r_l))",
            "n == n_0*e**(t*(r*(d - 1) - r_l))",
            "n == n_0*(e**(t*(r*(d - 1) - r_l)))",
            "n == n_0*e**(t*r*(d - 1) - t*r_l)",
            "n == n_0*e**(t*(r*d - r - r_l))",
            "n == n_0*(e**(t*(r*d - r - r_l)))"
        ]
    },
    "(1)/(t_0) * (1)/(1 + sqrt(alpha) - (1 - sqrt(alpha)) * ((T_n)/(t_0)))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(1)/((1 + sqrt(alpha)) * t_0 - (1 - sqrt(alpha)) * T_n)",
            "(1)/(2*sqrt(alpha) * t_0 - ((T_n - t_0) * (1 - sqrt(alpha))))",
            "(1)/(2*sqrt(alpha) * t_0 - (T_n - t_0) * (1 - sqrt(alpha)))",
            "(1)/(2*t_0 - ((1 - sqrt(alpha)) * (T_n + t_0)))",
            "(1)/(2*t_0 - (1 - sqrt(alpha)) * (T_n + t_0))",
            "(1)/(2*t_0*(1 - ((T_n)/(t_0) + 1)/(2) * (1 - alpha**((1)/(2)))))",
            "(1)/(2*t_0) * (1 - ((T_n)/(t_0) + 1)/(2) * (1 - sqrt(alpha)))**( - 1)",
            "(1)/(2*t_0 + (alpha**((1)/(2)) - 1) * (T_n + t_0))",
            "(1)/(2*t_0*(sqrt(alpha) - (1)/(2) * ((T_n)/(t_0) - 1) * (1 - sqrt(alpha))))",
            "(1)/((2*t_0) * (sqrt(alpha) - (((1 - sqrt(alpha)) * (T_n - t_0))/(2*t_0))))",
            "(1)/(2*t_0*sqrt(alpha)**(2*((ln((t_0*sqrt(alpha) + t_0 + T_n*sqrt(alpha) - T_n)/(2*t_0)))/(ln(alpha)))))",
            "(1)/(2*t_0*sqrt(alpha) - (T_n - t_0) * (1 - sqrt(alpha)))",
            "(1)/(2*t_0 - (T_n + t_0) * (1 - alpha**((1)/(2))))",
            "(1)/(2*t_0 - (T_n + t_0) * (1 - sqrt(alpha)))",
            "(1)/(2*t_0*(((T_n)/(t_0) + 1) * (sqrt(alpha) - 1)/(2) + 1))",
            "(1)/(2*t_0 + (T_n + t_0) * (sqrt(alpha) - 1))",
            "(1)/(t_0*(1 + alpha**((1)/(2))) - T_n*(1 - alpha**((1)/(2))))",
            "(1)/(t_0*(1 + sqrt(alpha) - (1 - sqrt(alpha)) * (T_n)/(t_0)))",
            "(1)/(t_0*(1 + sqrt(alpha)) - T_n*(1 - sqrt(alpha)))",
            "(1)/(t_0*(1 + sqrt(alpha) - T_n*(1 - sqrt(alpha))/(t_0)))",
            "(1)/(t_0) * (2 - ((T_n)/(t_0) + 1) * (1 - sqrt(alpha)))**( - 1)",
            "(1)/(t_0*(sqrt(alpha) + 1 - (1 - sqrt(alpha)) * ((T_n)/(t_0))))",
            "(1)/(t_0*(sqrt(alpha) + 1) - T_n*(1 - 1*sqrt(alpha)))",
            "(1)/(t_0*(sqrt(alpha) + 1) + T_n*(sqrt(alpha) - 1))",
            "(1)/(t_0 - T_n + alpha**((1)/(2))*(T_n + t_0))",
            "(1)/(t_0 - T_n + sqrt(alpha) * (T_n + t_0))",
            "(1)/(t_0*(((T_n)/(t_0) + 1) * (alpha**((1)/(2)) - 1) + 2))",
            "(1)/((t_0 - T_n) + (t_0 + T_n) * alpha**((1)/(2)))",
            "(1)/( - T_n*(1 - sqrt(alpha)) + t_0*sqrt(alpha) + t_0)",
            "(1)/(T_n*(alpha**((1)/(2)) - 1) + t_0*(alpha**((1)/(2)) + 1))",
            "(1)/((T_n + t_0) * (sqrt(alpha) - 1) + 2*t_0)",
            "(1)/((T_n - t_0) * (sqrt(alpha) - 1) + 2*t_0*sqrt(alpha))",
            "(2*t_0 - (T_n + t_0) * (1 - sqrt(alpha)))**( - 1)"
        ]
    },
    "f_n == (1)/(t_0) * (1)/(1 + sqrt(alpha) - (1 - sqrt(alpha)) * ((T_n)/(t_0)))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(1)/(t_0 + t_0*(alpha)**((1)/(2)) - T_n*(1 - (alpha)**((1)/(2)))) == f_n",
            "f_n == (1)/(1 - sqrt(alpha)) * (1)/(t_0*(1 + sqrt(alpha))/(1 - sqrt(alpha)) - T_n)",
            "f_n == (1)/(2*t_0*(1 - (1)/(2) * (1 - alpha**((1)/(2))) * ((T_n)/(t_0) + 1)))",
            "f_n == (1)/(2*t_0*alpha**((1)/(2)) - (T_n - t_0) * (1 - alpha**((1)/(2))))",
            "f_n == (1)/(2*t_0*(sqrt(alpha) - (1)/(2) * ((T_n)/(t_0) - 1) * (1 - sqrt(alpha))))",
            "f_n == (1)/(2*t_0 + (sqrt(alpha) - 1) * (T_n + t_0))",
            "f_n == (1)/(2*t_0 - (T_n + t_0) * (1 - (alpha)**((1)/(2))))",
            "f_n == (1)/(2*t_0 - (T_n + t_0) * (1 - alpha**((1)/(2))))",
            "f_n == (1)/(2*t_0 - (T_n + t_0) * (1 - sqrt(alpha)))",
            "f_n == (1)/((sqrt(alpha) - 1) * T_n + (sqrt(alpha) + 1) * t_0)",
            "f_n == (1)/((sqrt(alpha) - 1) * (T_n + t_0) + 2*t_0)",
            "f_n == (1)/((t_0*(1 + alpha**((1)/(2)))) + (alpha**((1)/(2)) - 1) * T_n)",
            "f_n == (1)/(t_0*(1 + alpha**((1)/(2))) - T_n*(1 - alpha**((1)/(2))))",
            "f_n == (1)/(t_0*(1 + sqrt(alpha)) - T_n*(1 - sqrt(alpha)))",
            "f_n == (1)/(t_0*(1 + sqrt(alpha)) + T_n*(sqrt(alpha) - 1))",
            "f_n == (1)/(t_0 - T_n + T_n*sqrt(alpha) + sqrt(alpha) * t_0)",
            "f_n == (1)/(T_n*(alpha**((1)/(2)) - 1) + t_0*(alpha**((1)/(2)) + 1))",
            "f_n == (1)/(T_n*(sqrt(alpha) - 1) + t_0*(sqrt(alpha) + 1))",
            "f_n == (1)/((T_n + t_0) * (alpha**((1)/(2)) - 1) + 2*t_0)",
            "f_n == (1)/((T_n + t_0) * (sqrt(alpha) - 1) + 2*t_0)",
            "f_n == (1)/((T_n - t_0) * (sqrt(alpha) - 1) + 2*t_0*sqrt(alpha))"
        ]
    },
    "h_0*(1 + alpha)/(1 - alpha)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(1 + alpha)/(1 - alpha) * h_0",
            "(1 + alpha) * (h_0)/(1 - alpha)",
            "(2*alpha*(h_0))/(1 - alpha) + h_0",
            "(2*alpha*h_0)/(1 - alpha) + h_0",
            "(2*(alpha) * (h_0))/(1 - alpha) + h_0",
            "(2*h_0)/(1 - alpha) - h_0",
            "2*((h_0)/(1 - (alpha))) - (h_0)",
            "2*((h_0)/(1 - (alpha))) - h_0",
            "2*((h_0)/(1 - alpha)) - h_0",
            "2*(h_0)/(1 - (alpha)) - h_0",
            "2*(h_0)/(1 - alpha) - h_0",
            "(2*h_0*alpha)/(1 - alpha) + h_0",
            "2*(h_0*alpha)/(1 - alpha) + h_0",
            "2*h_0*(alpha)/(1 - alpha) + h_0",
            "(alpha + 1)/(1 - alpha) * h_0",
            "((alpha + 1) * h_0)/(1 - alpha)",
            "h_0*(1 + (2*alpha)/(1 - alpha))",
            "h_0*(1 + (2*(alpha)/(1 - alpha)))",
            "h_0*(1 + 2*((alpha)/(1 - alpha)))",
            "h_0*(1 + 2*(alpha)/(1 - alpha))",
            "(h_0) * ((1 + alpha)/(1 - alpha))",
            "(h_0) * (1 + alpha)/(1 - alpha)",
            "(h_0*(1 + alpha))/(1 - alpha)",
            "h_0*((1 + alpha)/(1 - alpha))",
            "h_0*(1 + alpha)/(1 - alpha)",
            "h_0*(((2)/(1 - alpha)) - 1)",
            "h_0*((2)/(1 - alpha) - 1)",
            "h_0*((2*(alpha)/(1 - alpha)) + 1)",
            "h_0 + (2*alpha*h_0)/(1 - alpha)",
            "h_0 + 2*alpha*(h_0)/(1 - alpha)",
            "h_0 + 2*((alpha*h_0)/(1 - alpha))",
            "h_0 + 2*(alpha*h_0)/(1 - alpha)",
            "h_0 - (2*alpha*h_0)/(alpha - 1)",
            "h_0 + 2*h_0*alpha*((1)/(1 - alpha))",
            "h_0 + (2*h_0*alpha)/(1 - alpha)",
            "h_0 + (2*(h_0*alpha))/(1 - alpha)",
            "h_0 + 2*(h_0*alpha)/(1 - alpha)",
            "h_0 + 2*h_0*((alpha)/(1 - alpha))",
            "h_0 + 2*h_0*(alpha)/(1 - alpha)",
            "h_0 + (alpha*2*h_0)/(1 - alpha)",
            "(h_0 + alpha*h_0)/(1 - alpha)",
            "(h_0 + h_0*alpha)/(1 - alpha)",
            "(h_0 + h_0*(alpha))/(1 - alpha)"
        ]
    },
    "H == h_0*(1 + alpha)/(1 - alpha)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "h_0*(1 + alpha)/(1 - alpha) == H",
            "H == (1 + alpha)/(1 - alpha) * h_0",
            "H == (2*alpha*h_0)/(1 - alpha) + h_0",
            "H == (2*h_0)/(1 - alpha) - (h_0)",
            "H == (2*h_0)/(1 - alpha) - h_0",
            "H == 2*(h_0)/(1 - alpha) - h_0",
            "H == (alpha + 1)/(1 - alpha) * h_0",
            "H == h_0*((1 + alpha)/(1 - alpha))",
            "H == h_0*(1 + alpha)/(1 - alpha)",
            "H == h_0*2*(alpha)/(1 - alpha) + h_0",
            "H == h_0 + (2*alpha*h_0)/(1 - alpha)",
            "H == h_0 + 2*(alpha*h_0)/(1 - alpha)",
            "H == h_0 + (2*h_0*alpha)/(1 - alpha)",
            "H == h_0 + (2*h_0*(alpha))/(1 - alpha)",
            "H == h_0 + 2*(h_0*alpha)/(1 - alpha)",
            "H == h_0 + 2*h_0*(alpha)/(1 - alpha)",
            "H == ((h_0) + alpha*(h_0))/(1 - alpha)",
            "H == (h_0 + alpha*h_0)/(1 - alpha)",
            "H == (h_0 + h_0*alpha)/(1 - alpha)"
        ]
    },
    "(m_0 - (100*q)/(p)) * e**((p*t)/(100)) + (100*q)/(p)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(100*(((m_0*p)/(100) - q) * e**((p*t)/(100)) + q))/(p)",
            "((100)/(p)) * (e**((p*t)/(100))*((p*m_0)/(100) - q) + q)",
            "((100)/(p)) * ((((m_0*p)/(100) - q) * e**((p)/(100) * t)) + q)",
            "(100)/(p) * (((p)/(100) * m_0 - q) * e**((p)/(100) * t) + q)",
            "100*(q)/(p) + (m_0 - 100*(q)/(p)) * e**((p)/(100) * t)",
            "(100*q)/(p) + (m_0 - (100*q)/(p)) * e**(p*(t)/(100))",
            "(100*q)/(p) + (m_0 - 100*(q)/(p)) * e**((p*t)/(100))",
            "100*(q)/(p) + ((m_0) - 100*(q)/(p)) * e**(p*(t)/(100))",
            "100*(q)/(p) + (m_0 - 100*(q)/(p)) * e**(p*(t)/(100))",
            "(1)/(p) * ((m_0*p - 100*q) * e**(p*(t)/(100)) + 100*q)",
            "((e**((p*t)/(100))) * (m_0*p - 100*q) + 100*q)/(p)",
            "(m_0 - (100)/(p) * q) * e**((p)/(100) * t) + (100)/(p) * q",
            "(m_0 - 100*(q)/(p)) * e**(((p)/(100)) * t) + 100*(q)/(p)",
            "(m_0 - 100*(q)/(p)) * e**((p)/(100) * t) + 100*(q)/(p)",
            "(m_0 - (100*q)/(p)) * (e**((p*t)/(100))) + ((100*q)/(p))",
            "(m_0 - (100*q)/(p)) * (e**((p*t)/(100))) + (100*q)/(p)",
            "(m_0 - (100*q)/(p)) * e**((p*t)/(100)) + (100*q)/(p)",
            "(m_0 - 100*(q)/(p)) * e**(p*(t)/(100)) + 100*(q)/(p)",
            "(m_0 - ((100*q)/(p))) * e**((t*p)/(100)) + (100*q)/(p)",
            "(m_0 - (100*(q)/(p))) * e**((t*p)/(100)) + (100*q)/(p)",
            "m_0*e**((p*t)/(100)) + (100)/(p) * q*(1 - e**(((p)/(100)) * t))",
            "m_0*e**((p*t)/(100)) + (100*q)/(p) * (1 - e**((p*t)/(100)))",
            "((m_0*p - 100*q) * e**((p*t)/(100)) + 100*q)/(p)",
            "((m_0*p - 100*q) * e**(p*(t)/(100)) + 100*q)/(p)",
            "((m_0*p - 100*q)/(p)) * e**((p*t)/(100)) + (100*q)/(p)",
            "((p*m_0 - 100*q) * e**(p*(t)/(100)) + 100*q)/(p)",
            "((p*m_0 - 100*q) * e**((p*t)/(100)))/(p) + 100*(q)/(p)",
            "(((p*m_0)/(100) - q) * e**((p*t)/(100)) + q) * (100)/(p)"
        ]
    },
    "m == (m_0 - (100*q)/(p)) * e**((p*t)/(100)) + (100*q)/(p)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "m == (100)/(p) * (e**((p*t)/(100))*((p*m_0)/(100) - q) + q)",
            "m == (100)/(p) * ((m_0*(p)/(100) - q) * e**(p*(t)/(100)) + q)",
            "m == (100)/(p) * (((p)/(100) * m_0 - q) * e**((p)/(100) * t) + q)",
            "m == ((100)/(p)) * ((p*m_0)/(100) - q) * e**((p*t)/(100)) + 100*(q)/(p)",
            "m == (100)/(p) * (((p*m_0)/(100) - q) * e**(p*(t)/(100)) + q)",
            "m == (100)/(p) * q + (m_0 - (100)/(p) * q) * e**(p*(t)/(100))",
            "m == (100)/(p) * (q + ((m_0*p)/(100) - q) * e**((p*t)/(100)))",
            "m == (100)/(p) * (q + ((m_0*p)/(100) - q) * e**(p*(t)/(100)))",
            "m == (100)/(p) * (q + (p*(m_0)/(100) - q) * e**(p*(t)/(100)))",
            "m == (100)/(p) * (q + (p*(m_0)/(100) - q) * e**(t*(p)/(100)))",
            "m == 100*q*(1 - e**(p*(t)/(100)))/(p) + m_0*e**(p*(t)/(100))",
            "m == 100*(q)/(p) + (1)/(p) * (p*m_0 - 100*q) * e**(p*(t)/(100))",
            "m == 100*(q)/(p) + (e**(p*(t)/(100))) * (m_0 - 100*(q)/(p))",
            "m == 100*(q)/(p) + e**(p*(t)/(100))*(m_0 - 100*(q)/(p))",
            "m == (100*q + (p*m_0 - 100*q) * e**(p*(t)/(100)))/(p)",
            "m == (100*q)/(p) + (m_0 - (100*q)/(p)) * e**((p*t)/(100))",
            "m == (100*q)/(p) + (m_0 - (100*q)/(p))/(e**(( - p*t)/(100)))",
            "m == 100*(q)/(p) + (m_0 - 100*(q)/(p)) * e**(p*(t)/(100))",
            "m == 100*(q)/(p) + (m_0 - 100*(q)/(p)) * e**(t*(p)/(100))",
            "m == (100*q)/(p) + (p*m_0 - 100*q)/(p*e**( - (p)/(100) * t))",
            "m == (1)/(p) * (100*q + e**((p*t)/(100))*(m_0*p - 100*q))",
            "m == (1)/(p) * (100*q + e**(p*(t)/(100))*(p*m_0 - 100*q))",
            "m == (1)/(p) * (100*q + (m_0*p - 100*q) * e**(p*(t)/(100)))",
            "m == (1)/(p) * (e**(p*(t)/(100))*((m_0) * p - 100*q) + 100*q)",
            "m == (1)/(p) * (e**(t*(p)/(100))*(p*m_0 - 100*q) + 100*q)",
            "m == (1)/(p) * ((m_0*p - 100*q) * e**((p*t)/(100)) + 100*q)",
            "m == (1)/(p) * ((p*m_0 - 100*q) * e**(p*(t)/(100)) + 100*q)",
            "m == (1)/(p) * ((p*m_0 - 100*q) * e**(t*(p)/(100)) + 100*q)",
            "m == e**(p*(t)/(100))*(m_0 - (100)/(p) * q) + (100)/(p) * q",
            "m == e**((p*t)/(100))*(m_0 - (100*q)/(p)) + (100*q)/(p)",
            "m == e**(p*(t)/(100))*(m_0 - 100*(q)/(p)) + 100*(q)/(p)",
            "m == (e**((p*t)/(100))*(m_0*p - 100*q) + 100*q)/(p)",
            "m == (e**(p*(t)/(100))*(m_0*p - 100*q) + 100*q)/(p)",
            "m == (e**((p*t)/(100))*(p*m_0 - 100*q) + 100*q)/(p)",
            "m == (e**((p*t)/(100))*(p*m_0 - 100*q) + 100*q)/(p)",
            "m == ((e**((p*t)/(100)))/(p)) * (p*m_0 - 100*q) + (100*q)/(p)",
            "m == (e**(t*(p)/(100))*(p*m_0 - 100*q) + 100*q)/(p)",
            "m == (m_0 - (100)/(p) * q) * e**((p)/(100) * t) + ((100)/(p)) * q",
            "m == (m_0 - (100)/(p) * q) * e**((p*t)/(100)) + 100*(q)/(p)",
            "m == (m_0 - 100*(q)/(p)) * e**((p)/(100) * t) + 100*(q)/(p)",
            "m == (m_0 - (100*q)/(p)) * e**((p*t)/(100)) + (100*q)/(p)",
            "m == (m_0 - (100*q)/(p)) * e**((p*t)/(100)) + (100*q)/(p)",
            "m == (m_0 - (100*q)/(p)) * e**((p*t)/(100)) + 100*(q)/(p)",
            "m == (m_0 - 100*((q)/(p))) * e**(p*(t)/(100)) + 100*((q)/(p))",
            "m == (m_0 - 100*(q)/(p)) * (e**((p*t)/(100))) + 100*(q)/(p)",
            "m == (m_0 - 100*(q)/(p)) * (e**(p*(t)/(100))) + 100*(q)/(p)",
            "m == (m_0 - 100*(q)/(p)) * e**((p*t)/(100)) + 100*(q)/(p)",
            "m == (m_0 - 100*(q)/(p)) * e**(p*(t)/(100)) + 100*(q)/(p)",
            "m == m_0*e**((p)/(100) * t) + (100*q)/(p) * (1 - e**((p)/(100) * t))",
            "m == m_0*e**((p)/(100) * t) + 100*(q)/(p) * (1 - e**((p)/(100) * t))",
            "m == m_0*e**((p*t)/(100)) + (100*q)/(p) * (1 - e**((p*t)/(100)))",
            "m == m_0*e**(p*(t)/(100)) + (100*q)/(p) * (1 - e**((p*t)/(100)))",
            "m == m_0*e**(p*(t)/(100)) + 100*(q)/(p) * (1 - e**(p*(t)/(100)))",
            "m == ((m_0*p - 100*q) * e**((p*t)/(100)) + 100*q)/(p)",
            "m == ((m_0*p - 100*q) * e**(p*(t)/(100)) + 100*q)/(p)",
            "m == (m_0*p - 100*q)/(p) * e**((p*t)/(100)) + 100*(q)/(p)",
            "m == ((p*m_0 - 100*q) * e**((p*t)/(100)) + 100*q)/(p)",
            "m == ((p*m_0 - 100*q) * e**(p*(t)/(100)) + 100*q)/(p)",
            "m == ((p*m_0 - 100*q) * e**(t*(p)/(100)) + 100*q)/(p)"
        ]
    },
    "z == (1 + tanh((u)/(2)))/(2)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(1)/(2) * tanh((u)/(2)) + (1)/(2) == z",
            "z == (1)/(2) + (1)/(2) * tanh((u)/(2))",
            "z == (1)/(2) * (tanh((1)/(2) * u) + 1)",
            "z == (1)/(2) * tanh((1)/(2) * u) + (1)/(2)",
            "z == (1)/(2) * (tanh((u)/(2)) + 1)",
            "z == ((1)/(2)) * tanh((u)/(2)) + (1)/(2)",
            "z == (1)/(2) * tanh((u)/(2)) + (1)/(2)",
            "z == (cosh(u) + sinh(u))/(cosh(u) + sinh(u) + 1)",
            "z == ((sinh(u) + cosh(u))/(1 + sinh(u) + cosh(u)))",
            "z == (sinh(u) + cosh(u))/(1 + sinh(u) + cosh(u))",
            "z == 1 - (1)/(1 + cosh(u) + sinh(u))",
            "z == (1)/(1 + cosh(u) - sinh(u))",
            "z == 1 - (1)/(cosh(u) + sinh(u) + 1)",
            "z == 1 - (1)/(sinh(u) + cosh(u) + 1)",
            "z == (1)/(2) + (1)/(2) * tanh((u)/(2))",
            "z == ((1)/(2)) + ((1)/(2)) * tanh((u)/(2))",
            "z == (1)/(2) + (1)/(2) * tanh((u)/(2))",
            "z == (1 + (2)/( - 1 + coth((u)/(2))))/(2 + (2)/( - 1 + coth((u)/(2))))",
            "z == (1)/(2) * (1 + coth(u) - cosech(u))",
            "z == (1)/(2) * (1 + tanh((1)/(2) * u))",
            "z == (1)/(2) * (1 + tanh((u)/(2)))",
            "z == (1 + (2)/(coth((u)/(2)) - 1))/(2 + (2)/(coth((u)/(2)) - 1))",
            "z == (1)/(2) * (tanh((1)/(2) * u) + 1)",
            "z == (1)/(2) * tanh((1)/(2) * u) + (1)/(2)",
            "z == (1)/(2) * (tanh((u)/(2)) + 1)",
            "z == (1)/(2) * tanh((u)/(2)) + (1)/(2)",
            "z == ((1)/(2)) + (tanh((u)/(2)))/(2)",
            "z == (1)/(2) + (tanh((u)/(2)))/(2)",
            "z == (1)/(cosh(u) - sinh(u) + 1)",
            "z == (1)/(sqrt((1 - tanh(u))/(1 + tanh(u))) + 1)",
            "z == (1 + tanh((1)/(2) * u))/(2)",
            "z == (1 + tanh((u)/(2)))/(2)",
            "z == ((1 + tanh((u)/(2)))/(2))",
            "z == (1 + tanh((u)/(2)))/(2)",
            "z == (1 - tanh( - (u)/(2)))/(2)",
            "z == (1 - tanh((u)/(2))**(2))/(2*(1 - tanh((u)/(2))))",
            "z == (1 + tanh(u))/(sech(u) + 1 + tanh(u))",
            "z == (cosh((u)/(2)) + sinh((u)/(2)))/(2*cosh((u)/(2)))",
            "z == (cosh((u)/(2)) - sinh((u)/(2)))/(2*(cosh((u)/(2))) * (cosh(u) - sinh(u)))",
            "z == (cosh(u) + sinh(u))/(1 + cosh(u) + sinh(u))",
            "z == (cosh(u) + sinh(u))/(1 + cosh(u) + sinh(u)**(1))",
            "z == (cosh(u) + sinh(u))/(1 + sinh(u) + cosh(u))",
            "z == (cosh(u) + sinh(u))/(cosh(u)**(2) - sinh(u)**(2) + cosh(u) + sinh(u))",
            "z == (cosh(u) + sinh(u))/(cosh(u) + sinh(u) + 1)",
            "z == sech((u)/(2)) * ((1)/(2) * cosh((u)/(2)) + (1)/(2) * sinh((u)/(2)))",
            "z == (sinh((1)/(2) * u) + cosh((1)/(2) * u))/(2*cosh((1)/(2) * u))",
            "z == (sinh((u)/(2)) + cosh((u)/(2)))/(2*cosh((u)/(2)))",
            "z == (sinh((u)/(2)) + cosh((u)/(2))) * (sech((u)/(2)))/(2)",
            "z == (sinh(u) + cosh(u) + 1)/(2*cosh(u) + 2)",
            "z == (sinh(u) + cosh(u))/(1 + sinh(u) + cosh(u))",
            "z == (sinh(u) + cosh(u))/(cosh(u)**(2) - sinh(u)**(2) + sinh(u) + cosh(u))",
            "z == (sinh(u) + cosh(u))/((sinh(u) + cosh(u)) + 1)",
            "z == (sinh(u) + cosh(u))/(sinh(u) + cosh(u) + 1)",
            "z == tanh((u)/(2)) + (1)/(1 + sinh(u) + cosh(u))",
            "z == (tanh((u)/(2)) + 1)/(2)",
            "z == (tanh((u)/(2)))/(2) + (1)/(2)"
        ]
    },
    "y_i*z_i**(beta)*e**( - (z_i + y_i))*e**(z)*z**( - beta)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "e**( - y_i - z_i)*(y_i*z_i**(beta)) * e**(z)*z**( - beta)",
            "(e**( - (z_i + y_i))*y_i*z_i**(beta)) * e**(z)*z**( - beta)",
            "(e**(z)*y_i*z_i**(beta))/(e**(y_i + z_i)*z**(beta))",
            "e**(z)*z**( - beta)*y_i*z_i**(beta)*e**( - y_i - z_i)",
            "((y_i*e**( - y_i))/(e**(z_i)*z_i**( - beta))) * e**(z)*z**( - beta)",
            "(y_i*e**( - y_i))/(e**(z_i)*z_i**( - beta)) * e**(z)*z**( - beta)",
            "(y_i*e**( - y_i)*e**( - z_i)*z_i**(beta)) * (e**(z)*z**( - beta))",
            "(y_i*e**( - y_i)*e**( - z_i)*z_i**(beta)) * e**(z)*z**( - beta)",
            "y_i*(e**( - y_i))/(e**(z_i)*z_i**( - beta)) * e**(z)*z**( - beta)",
            "((y_i*e**( - y_i)) * (e**(z)) * (z**( - beta)))/((e**(z_i)) * (z_i**( - beta)))",
            "((y_i)/(e**(y_i))) * ((e**(z)*z_i**(beta))/(e**(z_i)*z**(beta)))",
            "(y_i*e**( - y_i))/(((z_i)**( - beta)) * e**(z_i)) * z**( - beta)*e**(z)",
            "(y_i*e**( - y_i))/(z_i**( - beta)*e**(z_i)) * z**( - beta)*e**(z)",
            "y_i*e**( - y_i - z_i)*e**(z)*((z)/(z_i))**( - beta)",
            "y_i*e**( - (y_i + z_i))*(z_i)**(beta) * (e**(z)*z**( - beta))",
            "y_i*e**( - y_i - z_i)*z_i**(beta)*(e**(z))/(z**(beta))",
            "y_i*e**( - (y_i))*((z)/(z_i))**( - beta) * e**(z - z_i)",
            "y_i*e**( - y_i)*(((z)/(z_i))**( - beta) * e**(z - z_i))",
            "y_i*e**(z - z_i - y_i)*z**( - beta)*z_i**(beta)",
            "y_i*e**(z - z_i - y_i)*((z_i)/(z))**(beta)",
            "(y_i*z_i**(beta))/(e**(y_i)*e**(z_i)) * (e**(z))/(z**(beta))",
            "(y_i*z_i**(beta)*e**( - y_i)*e**( - z_i)) * e**(z)*z**( - beta)",
            "(y_i*z_i**(beta)*e**( - y_i - z_i)) * ((1)/(z**(beta))) * (e**(z))",
            "y_i*z_i**(beta)*e**( - y_i - z_i)*(1)/(z**(beta)) * e**(z)",
            "((y_i*z_i**(beta))/(e**(y_i + z_i))) * ((e**(z))/(z**(beta)))",
            "(y_i*z_i**(beta))/(e**(y_i + z_i)) * ((e**(z))/(z**(beta)))",
            "(y_i*z_i**(beta))/(e**(y_i + z_i)) * (e**(z))/(z**(beta))",
            "(y_i*z_i**(beta)*e**( - (y_i + z_i))) * (e**(z)*z**( - beta))",
            "(y_i*z_i**(beta)*e**( - (y_i + z_i))) * e**(z)*z**( - beta)",
            "(y_i*z_i**(beta)*e**( - y_i - z_i)) * ((e**(z))/(z**(beta)))",
            "(y_i*z_i**(beta)*e**( - y_i - z_i)) * e**(z)*z**( - beta)",
            "y_i*(z_i**(beta)) * e**( - (y_i + z_i))*e**(z)*z**( - beta)",
            "y_i*(z_i**(beta))/(e**(y_i + z_i)) * (e**(z))/(z**(beta))",
            "y_i*z_i**(beta)*(e**( - y_i - z_i)) * (e**(z))/(z**(beta))",
            "y_i*z_i**(beta)*e**( - (y_i + z_i))*((e**(z))/(z**(beta)))",
            "y_i*z_i**(beta)*e**( - (y_i + z_i))*e**(z)*z**( - beta)",
            "y_i*z_i**(beta)*e**( - y_i - z_i)*e**(z)*z**( - beta)",
            "((y_i)/(z_i**( - beta)) * e**( - y_i - z_i)) * (z**( - beta)*e**(z))",
            "(y_i*z_i**(beta))/(e**(y_i + z_i)) * (z**( - beta)*e**(z))",
            "(y_i*z_i**(beta)*e**( - (y_i + z_i))) * z**( - beta)*e**(z)",
            "y_i*(z_i)**(beta) * e**( - (y_i + z_i))*z**( - beta)*e**(z)",
            "y_i*(z_i**(beta)) * e**( - (y_i + z_i))*z**( - beta)*e**(z)",
            "y_i*z_i**(beta)*e**( - (y_i + z_i))*z**( - beta)*e**(z)",
            "y_i*z_i**(beta)*e**( - y_i - z_i)*(z**( - beta)) * (e**(z))",
            "y_i*z_i**(beta)*(e**(z))/(e**(y_i + z_i)*z**(beta))",
            "((y_i*(z_i)**(beta))/(e**(z_i + y_i))) * e**(z)*z**( - beta)",
            "(y_i*z_i**(beta))/(e**(z_i + y_i)) * (e**(z))/(z**(beta))",
            "(y_i*z_i**(beta)*e**( - (z_i + y_i))) * e**(z)*z**( - beta)",
            "(y_i*z_i**(beta)*e**( - z_i - y_i)) * (e**(z)*z**( - beta))",
            "y_i*z_i**(beta)*e**( - z_i - y_i)*e**(z)*z**( - beta)",
            "y_i*z_i**(beta)*e**( - (z_i + y_i))*(z**( - beta)*e**(z))",
            "y_i*z_i**(beta)*e**( - (z_i + y_i))*z**( - beta)*e**(z)",
            "y_i*z_i**(beta)*e**(z - (y_i + z_i))*z**( - beta)",
            "y_i*z_i**(beta)*e**(z - y_i - z_i)*z**( - beta)",
            "(y_i*z_i**(beta)*e**(z))/(z**(beta)*e**(z_i)*e**(y_i))",
            "y_i*z_i**(beta)*z**( - beta)*(e**( - y_i - z_i)) * (e**(z))",
            "y_i*((z_i)/(z))**(beta) * e**(z - (y_i + z_i))",
            "y_i*((z_i)/(z))**(beta) * e**(z - z_i - y_i)",
            "z**( - beta)*e**(z)*y_i*e**( - y_i)*z_i**(beta)*e**( - z_i)",
            "((z_i**(beta)*y_i)/(e**(y_i + z_i))) * e**(z)*z**( - beta)",
            "((z_i)/(z))**(beta) * e**(z - z_i - y_i)*y_i",
            "((z_i)/(z))**(beta) * y_i*e**(z - y_i - z_i)"
        ]
    },
    "ln(x + 2) * ((x**(2))/(4) - 1) - (1)/(8) * (x - 6) * (x + 2) + c": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(1)/(2) * ((1)/(2) * (x + 2) * (x - 2) * ln(x + 2) - (1)/(4) * x**(2) + x + 3) + c",
            "(1)/(2) * ln(sqrt(x + 2)) * (x + 2)**(2) - ln(x + 2) * (x + 2) - (1)/(8) * (x + 2)**(2) + (x + 2) + c",
            "((1)/(2) * (x + 2)**(2) - 2*(x + 2)) * ln((x + 2)**((1)/(2))) - (1)/(8) * (x + 2)**(2) + (x + 2) + c",
            "(1)/(2) * (x**(2) - 4) * ln(sqrt(x + 2)) + (1)/(8) * (12 + 4*x - x**(2)) + c",
            "(1)/(2) * x**(2)*ln(sqrt(x + 2)) - (1)/(8) * (x + 2)**(2) - ln(x + 2) + x + 2 + c",
            "(1)/(2) * x**(2)*ln(sqrt(x + 2)) - (1)/(8) * (x + 2)**(2) + x + 2 - ln(abs(x + 2)) + c",
            "(1)/(2) * x**(2)*ln(sqrt(x + 2)) - (1)/(8) * (x + 2)**(2) + x + 2 - ln(x + 2) + c",
            "(1)/(4) * ln(x + 2) * (x + 2)**(2) - (1)/(8) * (x + 2)**(2) - ln(x + 2) * (x + 2) + (x + 2) + c",
            "(1)/(4) * (x + 2)**(2) * (ln(x + 2) - (1)/(2)) - (x + 2) * (ln(x + 2) - 1) + c",
            "((1)/(4)) * (x + 2)**(2) * ln(x + 2) - ((1)/(8)) * (x + 2)**(2) - (x + 2) * ln(x + 2) + x + 2 + c",
            "(1)/(4) * (x + 2)**(2) * ln(x + 2) - (1)/(8) * (x + 2)**(2) - (x + 2) * ln(x + 2) + (x + 2) + c",
            "(1)/(4) * (x + 2)**(2) * ln(x + 2) - (1)/(8) * (x + 2)**(2) - (x + 2) * ln(x + 2) + x + 2 + c",
            "(1)/(4) * (x + 2)**(2) * ln(x + 2) - (x + 2) * ln(x + 2) - (1)/(8) * (x + 2)**(2) + (x + 2) + c",
            "(1)/(4) * ((x**(2) - 4) * ln(x + 2) - (x + 2) * ((x)/(2) - 3)) + c",
            "(1)/(4) * x**(2)*ln(abs(x + 2)) - (1)/(8) * (x + 2)**(2) - ln(abs(x + 2)) + (x + 2) + c",
            "((1)/(4)) * (x**(2)) * ln(abs(x + 2)) - ((x + 2)**(2))/(8) + (x + 2) - ln(abs(x + 2)) + c",
            "(1)/(4) * (x**(2)*ln(x + 2) - (1)/(2) * (x + 2)**(2) + 4*(x + 2) - 4*ln(x + 2)) + c",
            "(1)/(4) * x**(2)*ln(x + 2) - (1)/(8) * (x + 2)**(2) - ln(x + 2) + x + c + 2",
            "(1)/(4) * x**(2)*ln(x + 2) - (1)/(8) * (x + 2)**(2) + (x + 2) - ln(x + 2) + c",
            "(1)/(4) * x**(2)*ln(x + 2) - (1)/(8) * (x + 2)**(2) + x + 2 - ln(x + 2) + c",
            "(1)/(8) * (2*x**(2)*ln(x + 2) - 8*ln(x + 2) - x**(2) + 4*x + 12) + c",
            "(1)/(8) * (2*x**(2)*ln(x + 2) - (x + 2)**(2) + 8*(x + 2) - 8*ln(x + 2)) + c",
            "((1)/(8)) * (x + 2) * (2*ln(x + 2) * (x - 2) - x + 6) + c",
            "(1)/(8) * (x + 2) * (2*(x - 2) * ln(x + 2) - x + 6) + c",
            "(2*x**(2)*ln(x + 2) - 8*ln(x + 2) - x**(2) + 4*x + 12)/(8) + c",
            "(2*(x + 2) * (x - 2) * ln(x + 2) - x**(2) + 4*x + 12)/(8) + c",
            "(x + 2) * (1 - (x + 2)/(8) - ln(x + 2) + (x + 2)/(4) * ln(x + 2)) + c",
            "((((x + 2)**(2))/(2) - 2*(x + 2)) * ln(x + 2))/(2) - ((x + 2)**(2))/(8) + (x + 2) + c",
            "(x + 2)**(2) * ((2*ln(x + 2) - 1)/(8)) + (x + 2) * (1 - ln(x + 2)) + c",
            "(((x + 2)**(2))/(4) - x - 2) * ln(x + 2) - ((x + 2)**(2))/(8) + x + 2 + c",
            "(x**(2))/(2) * ln(sqrt(x + 2)) + (1)/(2) * ( - (x**(2))/(4) + x + 3 - 2*ln(x + 2)) + c",
            "(x**(2))/(2) * ln(sqrt(x + 2)) - (1)/(4) * (((x + 2)**(2))/(2) - 4*(x + 2) + 4*ln(x + 2)) + c",
            "(x**(2))/(2) * ln(sqrt(x + 2)) - 2*ln(sqrt(x + 2)) - (1)/(8) * (x + 2)**(2) + x + 2 + c",
            "(x**(2))/(2) * ln(sqrt(x + 2)) - ((x**(2))/(2) - 2*x - 6 + 4*ln(x + 2))/(4) + c",
            "(x**(2))/(2) * ln(sqrt(x + 2)) - ((x + 2)**(2))/(8) + x + 2 - ln(x + 2) + c",
            "(x + 2)**(2) * (ln(x + 2) - (1)/(2))/(4) - ((x + 2) * ln(x + 2) - (x + 2)) + c",
            "((x + 2)**(2) * ln(x + 2))/(4) - ((x + 2)**(2))/(8) - (x + 2) * ln(x + 2) + x + 2 + c",
            "(x + 2)**(2) * (ln(x + 2))/(4) - (x + 2) * ln(x + 2) - ((x + 2)**(2))/(8) + x + 2 + c",
            "((x + 2) * (2*(x - 2) * ln(x + 2) - x + 6))/(8) + c",
            "(x + 2) * (2*(x - 2) * ln(x + 2) - x + 6)/(8) + c",
            "((x**(2))/(4) - 1) * ln(x + 2) - ((x + 2)**(2))/(8) + (x + 2) + c",
            "(x**(2))/(4) * ln(x + 2) - (1)/(8) * (x + 2)**(2) + (x + 2) - ln(x + 2) + c",
            "(x**(2))/(4) * ln(x + 2) - ((x + 2)**(2))/(8) + x + 2 - ln(x + 2) + c",
            "((x + 2)/(8)) * (2*ln(x + 2) * (x - 2) - x + 6) + c",
            "(x + 2)/(8) * ((2*x - 4) * ln(x + 2) - x + 6) + c",
            "((x**(2)) * ln(sqrt(x + 2)))/(2) - ((x + 2)**(2))/(8) + x + 2 - ln(x + 2) + c",
            "((x**(2)) * ln(sqrt(x + 2)))/(2) - (x**(2))/(8) + (x)/(2) + (3)/(2) - ln(x + 2) + c",
            "(x**(2)*ln(sqrt(x + 2)))/(2) + x + 2 - ((x + 2)**(2))/(8) - ln(x + 2) + c",
            "((x**(2)*ln(x + 2))/(2) - ((x + 2)**(2))/(4) + 2*x + 4 - 2*ln(x + 2))/(2) + c",
            "x**(2)*(ln(x + 2))/(4) - ln(x + 2) - ((x + 2)**(2))/(8) + x + 2 + c",
            "(x**(2)*(ln(x + 2))/(4)) - ((x + 2)**(2))/(8) + (x + 2) - ln(x + 2) + c",
            "(x**(2)*ln(x + 2))/(4) - ((x + 2)**(2))/(8) + x + 2 - ln(x + 2) + c",
            "x**(2)*(ln(x + 2))/(4) - ((x + 2)**(2))/(8) + x + 2 - ln(x + 2) + c",
            "(x + 2) * ((x + 2)/(4) - 1) * ln(x + 2) - ((x + 2)**(2))/(8) + x + 2 + c",
            "x + 2 - (x + 2) * ln(x + 2) + ((x + 2)**(2))/(4) * ln(x + 2) - ((x + 2)**(2))/(8) + c"
        ]
    },
    "ln(x + 2) * ((x**(2))/(4) - 1) - (x**(2))/(8) + (x)/(2) + c": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(1)/(2) * (ln(x + 2) * (x**(2))/(2) - (x**(2))/(4) + x - 2*ln(x + 2)) + c",
            "(1)/(2) * ((x**(2))/(2) * ln(x + 2) - (1)/(2) * ((x**(2))/(2) - 2*x + 4*ln(x + 2))) + c",
            "(1)/(2) * ((x**(2))/(2) * ln(x + 2) - (x**(2))/(4) + x - 2*ln(x + 2)) + c",
            "(1)/(2) * x**(2)*ln(sqrt(x + 2)) - (1)/(4) * ((x**(2))/(2) - 2*x + 4*ln(x + 2)) + c",
            "(1)/(2) * x**(2)*ln(sqrt(x + 2)) - (1)/(8) * x**(2) + (1)/(2) * x - ln(abs(x + 2)) + c",
            "(1)/(2) * x**(2)*ln(sqrt(x + 2)) - (1)/(8) * x**(2) + (1)/(2) * x - ln(x + 2) + c",
            "(1)/(2) * x**(2)*ln(sqrt(x + 2)) - ln(x + 2) - (1)/(8) * x**(2) + (1)/(2) * x + c",
            "(1)/(2) * x**(2)*ln(sqrt(x + 2)) - (x**(2))/(8) + (x)/(2) - ln(abs(x + 2)) + c",
            "((1)/(2)) * (x**(2)) * (ln(sqrt(x + 2))) - (x**(2))/(8) + (x)/(2) - ln(x + 2) + c",
            "(1)/(2) * x**(2)*ln(sqrt(x + 2)) - (x**(2))/(8) + (x)/(2) - ln(x + 2) + c",
            "(1)/(2) * x**(2)*ln((x + 2)**((1)/(2))) - (1)/(8) * x**(2) + (1)/(2) * x - ln(x + 2) + c",
            "(1)/(4) * (2*x**(2)*ln(sqrt(x + 2)) - (x**(2))/(2) + 2*x - 4*ln(x + 2)) + c",
            "(1)/(4) * ln(x + 2) * (x**(2) - 4) - (1)/(8) * (x**(2) - 4*x) + c",
            "((1)/(4) * x**(2) - 1) * ln(x + 2) - (1)/(8) * x**(2) + (1)/(2) * x + c",
            "((1)/(4) * x**(2) - 1) * ln(x + 2) - (1)/(8) * x**(2) + (x)/(2) + c",
            "(1)/(4) * (x**(2) - 4) * ln(x + 2) - (1)/(8) * (x)**(2) + (1)/(2) * x + c",
            "(1)/(4) * x**(2)*ln(abs(x + 2)) - ln(abs(x + 2)) - (1)/(8) * x**(2) + (1)/(2) * x + c",
            "(1)/(4) * (x**(2)*ln(x + 2) - (1)/(2) * x**(2) + 2*x - 4*ln(x + 2)) + c",
            "(1)/(4) * x**(2)*ln(x + 2) - (1)/(4) * ((1)/(2) * x**(2) - 2*x + 4*ln(x + 2)) + c",
            "(1)/(4) * x**(2)*ln(x + 2) - (1)/(8) * x**(2) + (1)/(2) * x - ln(x + 2) + c",
            "(1)/(4) * x**(2)*ln(x + 2) - (1)/(8) * x**(2) - ln(x + 2) + (1)/(2) * x + c",
            "(1)/(4) * x**(2)*ln(x + 2) - ln(x + 2) - (1)/(8) * x**(2) + (1)/(2) * x + c",
            "(1)/(4) * (x**(2)*ln(x + 2) - (x**(2))/(2) + 2*x - 4*ln(x + 2)) + c",
            "(1)/(4) * x**(2)*ln(x + 2) - (x**(2))/(8) + (x)/(2) - ln(x + 2) + c",
            "(1)/(8) * (2*(x**(2) - 4) * ln(x + 2) + (4 - x) * x) + c",
            "(1)/(8) * (2*(x**(2) - 4) * ln(x + 2) - (x - 4) * x) + c",
            "(1)/(8) * (2*(x**(2) - 4) * ln(x + 2) - x*(x - 4)) + c",
            "(1)/(8) * ( - ( - 4 + x) * x + 2*( - 4 + x**(2)) * ln(2 + x)) + c",
            "(2*(x**(2) - 4) * ln(x + 2) - x*(x - 4))/(8) + c",
            "((2*x**(2) - 8) * ln(x + 2) - x**(2) + 4*x)/(8) + c",
            "(2*(x - 2) * (x + 2) * ln(x + 2) - (x - 4) * x)/(8) + c",
            "(2*(x + 2) * (x - 2) * ln(x + 2) - x*(x - 4))/(8) + c",
            "ln(sqrt(x + 2)) * (x**(2))/(2) - ln(x + 2) - (x**(2))/(8) + (x)/(2) + c",
            "ln(x + 2) * ((x**(2))/(4) - 1) - (1)/(8) * x**(2) + (1)/(2) * x + c",
            "ln(x + 2) * ((x**(2))/(4) - 1) - (x**(2))/(8) + (x)/(2) + c",
            "(x**(2))/(2) * ln(sqrt(x + 2)) - (1)/(4) * ((x**(2))/(2) - 2*x + 4*ln(x + 2)) + c",
            "(x**(2))/(2) * (ln(sqrt(x + 2)) - (1)/(4)) + (x)/(2) - ln(x + 2) + c",
            "(x**(2))/(2) * ln(sqrt(x + 2)) - (x**(2))/(8) + (x)/(2) - ln(x + 2) + c",
            "(x**(2))/(2) * ln((x + 2)**((1)/(2))) - (1)/(8) * x**(2) + (1)/(2) * x - ln(x + 2) + c",
            "x**(2)*(2*ln(x + 2) - 1)/(8) + (x)/(2) - ln(x + 2) + c",
            "(x**(2))/(4) * ln(x + 2) - ln(x + 2) - (x**(2) - 4*x)/(8) + c",
            "(x**(2))/(4) * ln(x + 2) - ln(x + 2) - (x**(2))/(8) + (x)/(2) + c",
            "(x**(2))/(4) * ln(x + 2) - (x**(2))/(8) + (x)/(2) - ln(x + 2) + c",
            "(x**(2)*ln(abs(x + 2)))/(4) - (x**(2))/(8) + (x)/(2) - ln(abs(x + 2)) + c",
            "((x**(2)) * ln(sqrt(x + 2)))/(2) - (x**(2))/(8) + (x)/(2) - ln(x + 2) + c",
            "((x**(2)*ln(x + 2))/(2) - (4*ln(x + 2) + (x**(2) - 4*x)/(2))/(2))/(2) + c"
        ]
    },
    "- ((1)/(3)) * sqrt(16 - x**(2)) * (x**(2) + 32) + c": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "- (1)/(2) * (32*(16 - x**(2))**((1)/(2)) - (2)/(3) * (16 - x**(2))**((3)/(2))) + c",
            "- (1)/(3) * (16 - x**(2))**((1)/(2)) * (32 + x**(2)) + c",
            "- (1)/(3) * ((16 - x**(2))**((1)/(2)) * (x**(2) + 32)) + c",
            "((1)/(3)) * (16 - x**(2))**((3)/(2)) - 16*(16 - x**(2))**((1)/(2)) + c",
            "(1)/(3) * (16 - x**(2))**((3)/(2)) - 16*(16 - x**(2))**((1)/(2)) + c",
            "(1)/(3) * (16 - x**(2))**((3)/(2)) - 16*sqrt(16 - x**(2)) + c",
            "(1)/(3) * (16 - x**(2))**((3)/(2)) - 4*(16 - x**(2))**((1)/(2)) - 12*(16 - x**(2))**((1)/(2)) + c",
            "(1)/(3) * (sqrt(16 - x**(2)))**(3) - 16*sqrt(16 - x**(2)) + c",
            "(1)/(3) * sqrt((16 - x**(2))**(3)) - 16*sqrt((16 - x**(2))) + c",
            "(1)/(3) * sqrt((16 - x**(2))**(3)) - 16*sqrt(16 - x**(2)) + c",
            "(1)/(3) * sqrt(16 - x**(2))**(3) - 16*sqrt(16 - x**(2)) + c",
            "(1)/(3) * (sqrt(16 - x**(2)))**(3) - 16*(sqrt(16 - x**(2))) + c",
            "- (1)/(3) * sqrt(16 - x**(2)) * (32 + x**(2)) + c",
            "- (1)/(3) * (sqrt(16 - x**(2)) * (x**(2) + 32)) + c",
            "- (1)/(3) * sqrt(16 - x**(2)) * (x**(2) + 32) + c",
            "- (1)/(3) * sqrt(16 - x**(2)) * (x*x + 32) + c",
            "- (1)/(3) * ((x**(2)) + 32) * sqrt(16 - x**(2)) + c",
            "- (1)/(3) * (x**(2) + 32) * (sqrt(16 - x**(2))) + c",
            "- (1)/(3) * (x**(2) + 32) * sqrt(16 - x**(2)) + c",
            "- ((1)/(3)) * x**(2)*sqrt(16 - x**(2)) - ((32)/(3)) * sqrt(16 - x**(2)) + c",
            "- 16*(16 - x**(2))**((1)/(2)) + ((1)/(3)) * (16 - x**(2))**((3)/(2)) + c",
            "- 16*(16 - x**(2))**((1)/(2)) + (1)/(3) * (16 - x**(2))**((3)/(2)) + c",
            "- 16*(16 - x**(2))**((1)/(2)) + (64)/(3) * (((16 - x**(2))**((1)/(2)))/(4))**(3) + c",
            "(16)/(3) * cos(3*arcsin((x)/(4))) - 48*cos(arcsin((x)/(4))) + c",
            "- (16)/(3) * sin(3*arccos((x)/(4))) - 48*sin(arccos((x)/(4))) + c",
            "- (1)/(6) * (96*(16 - x**(2))**((1)/(2)) - 2*(16 - x**(2))**((3)/(2))) + c",
            "(16*cos(3*arcsin((x)/(4))))/(3) - 12*sqrt(16 - x**(2)) + c",
            "- 16*sqrt(16 - x**(2)) + ((1)/(3)) * (16 - x**(2))**((3)/(2)) + c",
            "- 16*sqrt(16 - x**(2)) + (1)/(3) * (16 - x**(2))**((3)/(2)) + c",
            "- 16*(sqrt(16 - x**(2))) + (1)/(3) * (sqrt(16 - x**(2)))**(3) + c",
            "- 16*sqrt(16 - x**(2)) + ((sqrt(16 - x**(2)))**(3))/(3) + c",
            "- 16*sqrt(16 - x**(2)) + (sqrt(16 - x**(2))**(3))/(3) + c",
            "(16 - x**(2))**((1)/(2)) * ((1)/(3) * (16 - x**(2)) - 16) + c",
            "- (16 - x**(2))**((1)/(2)) * (16 - (16 - x**(2))/(3)) + c",
            "(16 - x**(2))**((1)/(2)) * ( - (32)/(3) - (x**(2))/(3)) + c",
            "- ((16 - x**(2))**((1)/(2)) * (x**(2) + 32))/(3) + c",
            "((16 - x**(2))**((3)/(2)))/(3) - 16*(16 - x**(2))**((1)/(2)) + c",
            "((16 - x**(2))**((3)/(2)))/(3) - 16*sqrt(16 - x**(2)) + c",
            "((16 - x**(2))**((3)/(2)))/(3) - (16*(sqrt(16 - x**(2)))) + c",
            "((16 - x**(2)) * sqrt(16 - x**(2)))/(3) - 16*sqrt(16 - x**(2)) + c",
            "(16 - x**(2)) * (sqrt(16 - x**(2)))/(3) - 16*sqrt(16 - x**(2)) + c",
            "(16 - x**(2)) * (sqrt(16 - x**(2)))/(3) - 16*(sqrt(16 - x**(2))) + c",
            "64*(((1)/(3) * (sqrt(1 - (x**(2))/(16)))**(3)) - (sqrt(1 - (x**(2))/(16)))) + c",
            "64*((1)/(3) * (sqrt(1 - (x**(2))/(16)))**(3) - sqrt(1 - (x**(2))/(16))) + c",
            "64*((1)/(3) * sqrt(1 - (x**(2))/(16))**(3) - sqrt(1 - (x**(2))/(16))) + c",
            "64*(((16 - x**(2)) * sqrt(16 - x**(2)))/(192) - (sqrt(16 - x**(2)))/(4)) + c",
            "64*(1 - (x**(2))/(16))**((1)/(2)) * ( - (2)/(3) - (x**(2))/(48)) + c",
            "- 64*(1 - (x**(2))/(16))**((1)/(2)) + (64)/(3) * (1 - (x**(2))/(16))**((3)/(2)) + c",
            "(64)/(3) * (1 - ((x)/(4))**(2))**((3)/(2)) - 64*(1 - ((x)/(4))**(2))**((1)/(2)) + c",
            "- (64)/(3) * sqrt(1 - (x**(2))/(16)) * ((x**(2))/(16) + 2) + c",
            "64*(cos(arcsin((x)/(4)))**(3))/(3) - 64*cos(arcsin((x)/(4))) + c",
            "- 64*cos(arcsin((x)/(4))) + ((64)/(3)) * cos(arcsin((x)/(4)))**(3) + c",
            "- 64*cos(arcsin((x)/(4))) + (64)/(3) * (cos(arcsin((x)/(4)))**(3)) + c",
            "- 64*(sin(arccos((x)/(4))) - (sin(arccos((x)/(4)))**(3))/(3)) + c",
            "64*sqrt(1 - (x**(2))/(16)) * ( - 1 + (1 - (x**(2))/(16))/(3)) + c",
            "64*( - sqrt(1 - (x**(2))/(16)) + ((1 - (x**(2))/(16))**((3)/(2)))/(3)) + c",
            "- 64*sqrt(1 - (x**(2))/(16)) * ((2)/(3) + (x**(2))/(48)) + c",
            "64*sqrt(1 - (x**(2))/(16)) * ( - (2)/(3) - (x**(2))/(48)) + c",
            "- 64*sqrt(1 - (x**(2))/(16)) + 64*((1 - (x**(2))/(16)) * sqrt(1 - (x**(2))/(16)))/(3) + c",
            "- 64*sqrt(1 - (x**(2))/(16)) + (64)/(3) * (1 - (x**(2))/(16))**((3)/(2)) + c",
            "- 64*(sqrt(1 - ((x**(2))/(16)))) + ((64)/(3)) * (1 - ((x**(2))/(16)))**((3)/(2)) + c",
            "64*( - sqrt(1 - ((x)/(4))**(2)) + (1)/(3) * (1 - ((x)/(4))**(2))**((3)/(2))) + c",
            "64*sqrt(1 - ((x)/(4))**(2)) * ( - (2)/(3) - (1)/(3) * ((x)/(4))**(2)) + c",
            "sqrt(16 - x**(2)) * ((1)/(3) * (16 - x**(2)) - 16) + c",
            "- sqrt(16 - x**(2)) * (16 - (16 - x**(2))/(3)) + c",
            "sqrt(16 - x**(2)) * ((16 - x**(2))/(3) - 16) + c",
            "- sqrt(16 - x**(2)) * ((32)/(3) + (x**(2))/(3)) + c",
            "( - sqrt(16 - x**(2)) * (32 + x**(2)))/(3) + c",
            "((sqrt(16 - x**(2))) * (( - 32 - x**(2))/(3))) + c",
            "(sqrt(16 - x**(2))**(3))/(3) - 16*sqrt(16 - x**(2)) + c",
            "- (sqrt(16 - x**(2)))/(3) * (x**(2) + 32) + c",
            "( - sqrt(16 - x**(2)) * (x**(2) + 32))/(3) + c",
            "(sqrt(16 - x**(2)) * ( - x**(2) - 32))/(3) + c",
            "- ((sqrt(16 - x**(2))) * (x**(2) + 32))/(3) + c",
            "- (sqrt((16 - x**(2))) * (x**(2) + 32))/(3) + c",
            "- (sqrt(16 - x**(2)) * (x**(2) + 32))/(3) + c",
            "- (sqrt(16 - x**(2))) * (x**(2) + 32)/(3) + c",
            "- sqrt(16 - x**(2)) * ((x**(2) + 32)/(3)) + c",
            "- sqrt(16 - x**(2)) * (x**(2) + 32)/(3) + c",
            "sqrt(16 - x**(2)) * ( - (x**(2))/(3) - (32)/(3)) + c",
            "- x**(2)*(16 - x**(2))**((1)/(2)) - (2)/(3) * (16 - x**(2))**((3)/(2)) + c",
            "- (x**(2) + 32) * ((16 - x**(2))**((1)/(2)))/(3) + c",
            "( - (x**(2) + 32) * sqrt(16 - x**(2)))/(3) + c",
            "- x**(2)*sqrt(16 - x**(2)) - (2)/(3) * (16 - x**(2))**((3)/(2)) + c",
            "- x**(2)*sqrt(16 - x**(2)) - (2)/(3) * sqrt(16 - x**(2))**(3) + c"
        ]
    },
    "((2)/(15)) * (1 + x)**(((3)/(2))) * (3*x - 2)+c": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(1)/(15) * (1 + x)**((3)/(2)) * (6*x - 4) + c",
            "(2)/(15) * (1 + x)**((3)/(2)) * (3*x - 2) + c",
            "(2)/(15) * (1 + x) * (3*x - 2) * sqrt(1 + x) + c",
            "(2)/(15) * (x + 1)**((3)/(2)) * (3*x - 2) + c",
            "2*(1 + x) * ((1)/(5) * (1 + x)**((3)/(2)) - (1)/(3) * (1 + x)**((1)/(2))) + c",
            "2*(1 + x) * ((1)/(5) * sqrt(1 + x)**(3) - (1)/(3) * sqrt(1 + x)) + c",
            "2*(1 + x)**((3)/(2)) * ((1)/(5) * x - (2)/(15)) + c",
            "(2*(1 + x)**((3)/(2)) * (3*x - 2))/(15) + c",
            "2*(1 + x)**((3)/(2)) * (3*x - 2)/(15) + c",
            "2*((1 + x)**((3)/(2)))/(3) * (x - (2 + 2*x)/(5)) + c",
            "(2*(1 + x)**((5)/(2)))/(5) - (2*(1 + x)**((3)/(2)))/(3) + c",
            "2*((1 + x)**((5)/(2)))/(5) - 2*((1 + x)**((3)/(2)))/(3) + c",
            "(2)/(3) * (1 + x)**((3)/(2)) * ((3)/(5) * x - (2)/(5)) + c",
            "(2)/(3) * (1 + x)**((3)/(2)) * (x - (2)/(5) * (1 + x)) + c",
            "(2)/(3) * (1 + x)**((3)/(2)) * x - ((4)/(15)) * (1 + x)**((5)/(2)) + c",
            "(2)/(3) * (1 + x)**((3)/(2)) * x - (4)/(15) * (1 + x)**((5)/(2)) + c",
            "(2)/(3) * (x + 1)**((3)/(2)) * x - (4)/(15) * (x + 1)**((5)/(2)) + c",
            "(2)/(3) * (x*(1 + x)**((3)/(2)) - (2)/(5) * (1 + x)**((5)/(2))) + c",
            "((2)/(3) * x) * (1 + x)**((3)/(2)) - ((4)/(15)) * (1 + x)**((5)/(2)) + c",
            "((2)/(3)) * x*(1 + x)**((3)/(2)) - ((4)/(15)) * (1 + x)**((5)/(2)) + c",
            "(2)/(3) * (x) * (1 + x)**((3)/(2)) - (4)/(15) * (1 + x)**((5)/(2)) + c",
            "(2)/(3) * x*(1 + x)**((3)/(2)) - ((4)/(15)) * (1 + x)**((5)/(2)) + c",
            "(2)/(3) * x*(1 + x)**((3)/(2)) - (4)/(15) * (1 + x)**((5)/(2)) + c",
            "(2)/(3) * x*sqrt((1 + x)**(3)) - (4)/(15) * sqrt((1 + x)**(5)) + c",
            "(2)/(3) * x*sqrt(1 + x)**(3) - (4)/(15) * sqrt(1 + x)**(5) + c",
            "(2)/(3) * (x*(x + 1)**((3)/(2)) - (2)/(5) * (1 + x)**((5)/(2))) + c",
            "(2)/(5) * (1 + x)**((3)/(2)) * (x - (2)/(3)) + c",
            "((2)/(5)) * (1 + x)**((5)/(2)) - ((2)/(3)) * ((1 + x)**((3)/(2))) + c",
            "((2)/(5)) * (1 + x)**((5)/(2)) - ((2)/(3)) * (1 + x)**((3)/(2)) + c",
            "((2)/(5)) * (1 + x)**((5)/(2)) - (2)/(3) * (1 + x)**((3)/(2)) + c",
            "(2)/(5) * (1 + x)**((5)/(2)) - (2)/(3) * (1 + x)**((3)/(2)) + c",
            "(2)/(5) * (sqrt(1 + x))**(5) - (2)/(3) * (sqrt(1 + x))**(3) + c",
            "(2)/(5) * (sqrt(1 + x)**(5)) - (2)/(3) * (sqrt(1 + x)**(3)) + c",
            "(2)/(5) * sqrt(1 + x)**(5) - (2)/(3) * sqrt(1 + x)**(3) + c",
            "(2)/(5) * sqrt(1 + x)**(5) - (2)/(3) * sqrt(1 + x)**(3) + c**(1**(1))",
            "(2)/(5) * (sqrt(x + 1))**(5) - (2)/(3) * (sqrt(x + 1))**(3) + c",
            "(2)/(5) * sqrt(x + 1)**(5) - (2)/(3) * sqrt(x + 1)**(3) + c",
            "((2)/(5) * (x + 1)**((5)/(2)) - (2)/(3) * (x + 1)**((3)/(2))) + c",
            "(2)/(5) * (x + 1)**((5)/(2)) - ((2)/(3)) * (x + 1)**((3)/(2)) + c",
            "(2)/(5) * (x + 1)**((5)/(2)) - (2)/(3) * (x + 1)**((3)/(2)) + c",
            "2*sqrt(1 + x) * (1 + 2*x + x**(2))/(5) - 2*(1 + x) * (sqrt(1 + x))/(3) + c",
            "2*(sqrt(1 + x)**(3)) * ((1)/(5) * (1 + x) - (1)/(3)) + c",
            "2*(x + 1)**((3)/(2)) * ((1 + x)/(5) - (1)/(3)) + c",
            "(2*(x + 1)**((3)/(2)) * (3*x - 2))/(15) + c",
            "2*(x + 1)**((3)/(2)) * (3*x - 2)/(15) + c",
            "2*(x + 1)**((3)/(2)) * ((x + 1)/(5) - (1)/(3)) + c",
            "(2*(x + 1)**((5)/(2)))/(5) - (2*(x + 1)**((3)/(2)))/(3) + c",
            "2*((x + 1)**((5)/(2)))/(5) - 2*((x + 1)**((3)/(2)))/(3) + c",
            "2*x*((1 + x)**((3)/(2)))/(3) - (4)/(15) * (1 + x)**((5)/(2)) + c",
            "(2*x*(1 + x)**((3)/(2)))/(3) - (4*(1 + x)**((5)/(2)))/(15) + c",
            "(2*x)/(3) * (1 + x)**((3)/(2)) - ((4)/(15)) * (1 + x)**((5)/(2)) + c",
            "(2*x)/(3) * (1 + x)**((3)/(2)) - (4)/(15) * (1 + x)**((5)/(2)) + c",
            "2*(x)/(3) * (1 + x)**((3)/(2)) - (4)/(15) * (1 + x)**((5)/(2)) + c",
            "2*x*(sqrt(1 + x)**(3))/(3) - (4)/(15) * sqrt(1 + x)**(5) + c",
            "(2*x*(x + 1)**((3)/(2)))/(3) - (4*(1 + x)**((5)/(2)))/(15) + c",
            "(6*(1 + x)**((5)/(2)) - 10*(1 + x)**((3)/(2)))/(15) + c",
            "(sqrt(x + 1))/(15) * (6*x**(2) + 2*x - 4) + c",
            "((x + 1)**((3)/(2)) * ((1)/(5) * (x + 1) - (1)/(3))) * 2 + c",
            "(x + 1)**((3)/(2)) * ((2)/(5) * x - (4)/(15)) + c",
            "x*(2)/(3) * (1 + x)**((3)/(2)) - (4)/(15) * (1 + x)**((5)/(2)) + c"
        ]
    },
    "((1)/(2)) * (tan(x) * sec(x) + ln(((cos((x)/(2)) + sin((x)/(2))))/((cos((x)/(2)) - sin((x)/(2))))))+c": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(1)/(2) * (ln(abs(tan(x) + sec(x)))) + (1)/(2) * sec(x) * tan(x) + c",
            "(1)/(2) * ln(abs(tan(x) + sec(x))) + (1)/(2) * sec(x) * tan(x) + c",
            "(1)/(2) * ln(sec(x) + tan(x)) + (sec(x) * tan(x))/(2) + c",
            "(1)/(2) * (ln(sec(x) + tan(x)) + sec(x) * tan(x)) + c",
            "(1)/(2) * (ln(sec(x) + tan(x)) + tan(x) * sec(x)) + c",
            "(1)/(2) * ln(tan(x) + sec(x)) + (1)/(2) * sec(x) * tan(x) + c",
            "(1)/(2) * ln(tan(x) + sec(x)) + (1)/(2) * tan(x) * sec(x) + c",
            "(1)/(2) * ln(tan(x) + sec(x)) + (sec(x) * tan(x))/(2) + c",
            "(1)/(2) * (ln(tan(x) + sec(x)) + sec(x) * tan(x)) + c",
            "(1)/(2) * sec(x) * tan(x) + (1)/(2) * ln(abs(sec(x) + tan(x))) + c",
            "(1)/(2) * (sec(x)) * tan(x) + (1)/(2) * ln(abs(tan(x) + sec(x))) + c",
            "((1)/(2)) * sec(x) * tan(x) + ((1)/(2)) * ln(sec(x) + tan(x)) + c",
            "(1)/(2) * (sec(x) * tan(x)) + (1)/(2) * (ln(sec(x) + tan(x))) + c",
            "(1)/(2) * (sec(x) * tan(x)) + (1)/(2) * ln(sec(x) + tan(x)) + c",
            "(1)/(2) * sec(x) * tan(x) + (1)/(2) * ln(sec(x) + tan(x)) + c",
            "(1)/(2) * sec(x) * tan(x) + (1)/(2) * ln(tan(x) + sec(x)) + c",
            "(1)/(2) * sec(x) * tan(x) + (1)/(4) * ln((1 + sin(x))/(1 - sin(x))) + c",
            "(1)/(2) * (sec(x) * tan(x) + ln((1 + tan((x)/(2)))/(1 - tan((x)/(2))))) + c",
            "(1)/(2) * (sec(x) * tan(x) + ln(abs(sec(x) + tan(x)))) + c",
            "(1)/(2) * (sec(x) * tan(x) + ln((cos(x))/(1 - sin(x)))) + c",
            "(1)/(2) * ((sec(x)) * (tan(x)) + ln(sec(x) + tan(x))) + c",
            "(1)/(2) * (sec(x) * tan(x) + ln(sec(x) + tan(x))) + c",
            "(1)/(2) * (sec(x) * tan(x) + ln(tan(x) + sec(x))) + c",
            "(1)/(2) * (sin(x))/(cos(x)**(2)) + (1)/(4) * ln((1 + sin(x))/(1 - sin(x))) + c",
            "(1)/(2) * (sqrt(tan(x)**(2) + 1) * tan(x) + ln(tan(x) + sec(x))) + c",
            "(1)/(2) * tan(x) * sec(x) + (1)/(2) * ln((1 + tan((1)/(2) * x))/(1 - tan((1)/(2) * x))) + c",
            "(1)/(2) * tan(x) * sec(x) + (1)/(2) * ln(abs(sec(x) + tan(x))) + c",
            "(1)/(2) * (tan(x) * sec(x)) + (1)/(2) * ln(sec(x) + tan(x)) + c",
            "(1)/(2) * tan(x) * sec(x) + (1)/(2) * (ln(sec(x) + tan(x))) + c",
            "(1)/(2) * tan(x) * sec(x) + (1)/(2) * ln(sec(x) + tan(x)) + c",
            "((1)/(2)) * tan(x) * sec(x) + (1)/(2) * ln(tan(x) + sec(x)) + c",
            "(1)/(2) * (tan(x) * sec(x)) + (1)/(2) * ln(tan(x) + sec(x)) + c",
            "(1)/(2) * tan(x) * sec(x) + (1)/(2) * ln(tan(x) + sec(x)) + c",
            "(1)/(2) * tan(x) * sec(x) + (1)/(4) * ln((abs(1 + sin(x)))/(abs(1 - sin(x)))) + c",
            "(1)/(2) * (tan(x) * sec(x) + ln(abs(sec(x) + tan(x)))) + c",
            "(1)/(2) * (tan(x) * sec(x) + ln(abs(tan(x) + sec(x)))) + c",
            "(1)/(2) * (tan(x) * sec(x) - ln(cos((x)/(2)) - sin((x)/(2))) + ln(sin((x)/(2)) + cos((x)/(2)))) + c",
            "(1)/(2) * ((tan(x)) * (sec(x)) + ln(sec(x) + tan(x))) + c",
            "(1)/(2) * (tan(x) * sec(x) + ln(sec(x) + tan(x))) + c",
            "(1)/(2) * (tan(x) * sec(x) + ln(tan(x) + sec(x))) + c",
            "(1)/(4) * (2*(sin(x))/(1 - sin(x)**(2)) + ln((1 + sin(x))/(1 - sin(x)))) + c",
            "(1)/(4) * (ln((1 + sin(x))/(1 - sin(x))) + 2*(sin(x))/(1 - sin(x)**(2))) + c",
            "(ln(abs(tan(x) + sec(x))))/(2) + (sec(x) * tan(x))/(2) + c",
            "(ln(abs(tan(x) + sec(x))) + sec(x) * tan(x))/(2) + c",
            "(ln(abs(tan(x) + sec(x))) + (tan(x) * sec(x)))/(2) + c",
            "(ln(sec(x) + tan(x)))/(2) + (sec(x) * tan(x))/(2) + c",
            "(ln(sec(x) + tan(x)))/(2) + sec(x) * (tan(x))/(2) + c",
            "(ln(sec(x) + tan(x)) + sec(x) * tan(x))/(2) + c",
            "(ln(sin(x) + 1))/(4) - (ln(1 - sin(x)))/(4) - (sin(x))/(2*sin(x)**(2) - 2) + c",
            "(ln(tan(x) + sec(x)) + sec(x) * tan(x))/(2) + c",
            "sec(x) * (tan(x))/(2) + ((1)/(2)) * ln(abs(sec(x) + tan(x))) + c",
            "sec(x) * (tan(x))/(2) + (ln((1 + sin(x))/(1 - sin(x))))/(4) + c",
            "sec(x) * (tan(x))/(2) + (ln((1 + sin(x))/(cos(x))))/(2) + c",
            "sec(x) * (tan(x))/(2) + (ln(abs(tan(x) + sec(x))))/(2) + c",
            "sec(x) * (tan(x))/(2) + (ln(sec(x) + tan(x)))/(2) + c",
            "sec(x) * (tan(x))/(2) + (ln(tan(x) + sec(x)))/(2) + c",
            "(sec(x) * tan(x) + ln(abs(sec(x) + tan(x))))/(2) + c",
            "(sec(x) * tan(x) + ln(abs(tan(x) + sec(x))))/(2) + c",
            "((sec(x) * tan(x)) + ln(sec(x) + tan(x)))/(2) + c",
            "(sec(x) * tan(x) + ln(sec(x) + tan(x)))/(2) + c",
            "(sec(x) * tan(x) + ln(tan(x) + sec(x)))/(2) + c",
            "(sin(x))/(2*cos(x)**(2)) + (ln((1 + sin(x))/(cos(x))))/(2) + c",
            "tan(x) * (sec(x))/(2) + (1)/(2) * ln(sec(x) + tan(x)) + c",
            "tan(x) * (sec(x))/(2) + (ln(sec(x) + tan(x)))/(2) + c",
            "(tan(x) * sec(x) + ln(sec(x) + tan(x)))/(2) + c",
            "(tan(x) * sec(x) + ln(tan(x) + sec(x)))/(2) + c"
        ]
    },
    "cos(x) * (1 - ln(sin(x))) + ln(tan((x)/(2))) + c": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "- ((1)/(2)) * cos(x) * ln(sin(x)**(2)) + cos(x) - ((1)/(2)) * ln(cos(x) + 1) + ((1)/(2)) * ln(1 - cos(x)) + c",
            "- (1)/(2) * ln((1 + cos(x))/(1 - cos(x))) + cos(x) - cos(x) * ln(abs(sin(x))) + c",
            "2*ln((sin(x))/(cos(x) + 1)) + ( - cos(x) - 1) * ln(sin(x)) + ln(cos(x) + 1) + cos(x) + c",
            "2*ln((sin(x))/(cos(x) + 1)) - (cos(x) + 1) * ln(sin(x)) + ln(cos(x) + 1) + cos(x) + c",
            "c + cos(x) + ln(tan((x)/(2))) - cos(x) * ln(sin(x))",
            "cos(x) + (1)/(2) * ln((1 - cos(x))/(1 + cos(x))) - cos(x) * ln(sin(x)) + c",
            "cos(x) * (1 - ln(abs(sin(x)))) - ln(abs((1)/(sin(x)) + cot(x))) + c",
            "cos(x) * (1 - ln(abs(sin(x)))) - ln(abs(cosec(x) + cot(x))) + c",
            "cos(x) * (1 - ln(sin(x))) - ln(abs(cosec(x) + cot(x))) + c",
            "cos(x) * (1 - ln(sin(x))) + ln(cosec(x) - cot(x)) + c",
            "cos(x) * (1 - ln(sin(x))) + ln((sin(x))/(1 + cos(x))) + c",
            "cos(x) * (1 - ln(sin(x))) + ln((sin(x))/(cos(x) + 1)) + c",
            "cos(x) - cos(x) * ln(abs(sin(x))) - ln(abs((1)/(sin(x)) + (cos(x))/(sin(x)))) + c",
            "cos(x) - cos(x) * ln(abs(sin(x))) + ln(abs(cosec(x) - cot(x))) + c",
            "cos(x) - cos(x) * ln(abs(sin(x))) - ln(abs(cosec(x) + cot(x))) + c",
            "cos(x) - cos(x) * ln(sin(x)) + (1)/(2) * ln(abs((cos(x) - 1)/(cos(x) + 1))) + c",
            "cos(x) - cos(x) * ln(sin(x)) - ln((1 + cos(x))/(sin(x))) + c",
            "cos(x) - cos(x) * ln(sin(x)) - ln((1)/(sin(x)) + (1)/(tan(x))) + c",
            "cos(x) - cos(x) * ln(sin(x)) - ln((1)/(sin(x)) + (cos(x))/(sin(x))) + c",
            "cos(x) - cos(x) * (ln(sin(x))) - ln(cosec(x) + cot(x)) + c",
            "cos(x) - cos(x) * ln(sin(x)) + ln(cosec(x) - cot(x)) + c",
            "cos(x) - cos(x) * ln(sin(x)) - ln(cosec(x) + cot(x)) + c",
            "cos(x) - cos(x) * ln(sin(x)) + ln(sin((x)/(2))) - ln(cos((x)/(2))) + c",
            "cos(x) - cos(x) * ln(sin(x)) + ln(tan((x)/(2))) + c",
            "cos(x) - (ln(abs(cosec(x) + cot(x)))) - (cos(x)) * (ln(abs(sin(x)))) + c",
            "- cos(x) * ln(abs(sin(x))) - (1)/(2) * ln(abs((1 + cos(x))/(1 - cos(x)))) + cos(x) + c",
            "- cos(x) * (ln(abs(sin(x))) - 1) - ln((1)/(sin(x)) + (1)/(tan(x))) + c",
            "- cos(x) * (ln(abs(sin(x))) - 1) - ln(abs(cosec(x) + cot(x))) + c",
            "- cos(x) * ln(abs(sin(x))) + cos(x) + (1)/(2) * (ln(1 - cos(x))) - (1)/(2) * (ln(1 + cos(x))) + c",
            "- cos(x) * ln(abs(sin(x))) + cos(x) - ((1)/(2)) * ln(abs(1 + cos(x))) + ((1)/(2)) * ln(abs(1 - cos(x))) + c",
            "- cos(x) * ln(abs(sin(x))) + cos(x) + (1)/(2) * ln((abs(cos(x) - 1))/(abs(cos(x) + 1))) + c",
            "- cos(x) * ln(abs(sin(x))) + cos(x) - ln(abs((1)/(sin(x)) + (1)/(tan(x)))) + c",
            "- cos(x) * ln(abs(sin(x))) + cos(x) - ln(abs(cosec(x) + cot(x))) + c",
            "- cos(x) * ln(abs(sin(x))) + cos(x) - (ln(abs(cos(x) + 1)))/(2) + (ln(abs(cos(x) - 1)))/(2) + c",
            "- cos(x) * ln(abs(sin(x))) + cos(x) - ln(abs(cot(x) + cosec(x))) + c",
            "- cos(x) * ln(abs(sin(x))) + cos(x) + ln(abs(tan((x)/(2)))) + c",
            "- cos(x) * ln(abs(sin(x))) + cos(x) - ln(cot(x) + (1)/(sin(x))) + c",
            "- cos(x) * ln(abs(sin(x))) + cos(x) - ln(cot(x) + cosec(x)) + c",
            "- cos(x) * ln(abs(sin(x))) - ln(abs((1)/(tan(x)) + (1)/(sin(x)))) + cos(x) + c",
            "- cos(x) * ln(abs(sin(x))) - ln(abs(cosec(x) + cot(x))) + cos(x) + c",
            "- cos(x) * ln(abs(sin(x))) + ln(abs(tan((x)/(2)))) + cos(x) + c",
            "- cos(x) * ln(abs(sin(x))) - ln(cosec(x) + cot(x)) + cos(x) + c",
            "- cos(x) * ln(abs(sin(x))) - (ln(cos(x) + 1))/(2) + (ln(1 - cos(x)))/(2) + cos(x) + c",
            "cos(x) - ln(cosec(x) + cot(x)) - cos(x) * ln(sin(x)) + c",
            "- cos(x) * ln(sin(x)) + (1)/(2) * ln((1 - cos(x))/(1 + cos(x))) + cos(x) + c",
            "- cos(x) * ln(sin(x)) - (1)/(2) * (ln((1 + cos(x))/(1 - cos(x)))) + cos(x) + c",
            "- cos(x) * ln(sin(x)) + (1)/(2) * ln(abs((cos(x) - 1)/(cos(x) + 1))) + cos(x) + c",
            "- cos(x) * (ln(sin(x)) - 1) - ln(abs(cot(x) + cosec(x))) + c",
            "- cos(x) * (ln(sin(x)) - 1) - ln(cosec(x) + cot(x)) + c",
            "- cos(x) * ln(sin(x)) + cos(x) + (1)/(2) * ln(1 - cos(x)) - (1)/(2) * ln(1 + cos(x)) + c",
            "- cos(x) * ln(sin(x)) + cos(x) - (1)/(2) * ln((1 + cos(x))/(1 - cos(x))) + c",
            "- cos(x) * ln(sin(x)) + cos(x) + (1)/(2) * ln(abs(((cos(x) - 1)/(cos(x) + 1)))) + c",
            "- cos(x) * ln(sin(x)) + cos(x) - arctanh(cos(x)) + c",
            "- cos(x) * ln(sin(x)) + cos(x) + ln((1 - cos(x))/(sin(x))) + c",
            "- cos(x) * ln(sin(x)) + cos(x) - ln((1)/(sin(x)) + (1)/(tan(x))) + c",
            "- cos(x) * ln(sin(x)) + cos(x) + ln(((1)/(sin(x))) - (cos(x))/(sin(x))) + c",
            "- cos(x) * ln(sin(x)) + cos(x) - ln(abs(cosec(x) + cot(x))) + c",
            "- cos(x) * ln(sin(x)) + cos(x) + ln(cosec(x) - cot(x)) + c",
            "- cos(x) * ln(sin(x)) + cos(x) - ln(cosec(x) + cot(x)) + c",
            "- cos(x) * ln(sin(x)) + cos(x) - ln((cos(x) + 1)/(sin(x))) + c",
            "- cos(x) * ln(sin(x)) + cos(x) + ln( - cot(x) + cosec(x)) + c",
            "- cos(x) * ln(sin(x)) + cos(x) - ln(cot(x) + cosec(x)) + c",
            "- cos(x) * ln(sin(x)) + cos(x) + ln((sin(x))/(cos(x) + 1)) + c",
            "cos(x) - ln(sin(x)) * cos(x) + ln((sqrt(1 - cos(x)))/(sqrt(1 + cos(x)))) + c",
            "- cos(x) * ln(sin(x)) + cos(x) + ln(tan((1)/(2) * x)) + c",
            "- cos(x) * ln(sin(x)) + cos(x) + ln(tan((x)/(2))) + c",
            "- cos(x) * ln(sin(x)) + cot(x) * sin(x) - ln(cosec(x) + cot(x)) + c",
            "- cos(x) * ln(sin(x)) - ln((1 + cos(x))/(sin(x))) + cos(x) + c",
            "- cos(x) * ln(sin(x)) + ln((1)/(sin(x)) - (1)/(tan(x))) + cos(x) + c",
            "- cos(x) * ln(sin(x)) - ln((1)/(sin(x)) + (1)/(tan(x))) + cos(x) + c",
            "- cos(x) * ln(sin(x)) + ln((1)/(sin(x)) - (cos(x))/(sin(x))) + cos(x) + c",
            "- cos(x) * ln(sin(x)) - ln(abs(cosec(x) + cot(x))) + cos(x) + c",
            "- cos(x) * (ln(sin(x))) - ln(cosec(x) + cot(x)) + cos(x) + c",
            "- cos(x) * ln(sin(x)) + ln(cosec(x) - cot(x)) + cos(x) + c",
            "- cos(x) * ln(sin(x)) - ln(cosec(x) + cot(x)) + cos(x) + c",
            "- cos(x) * ln(sin(x)) - ln(cot(x) + cosec(x)) + cos(x) + c",
            "- cos(x) * ln(sin(x)) + ln(tan((1)/(2) * x)) + cos(x) + c",
            "- cos(x) * ln(sin(x)) + ln(tan((x)/(2))) + cos(x) + c",
            "- cos(x) * ln(sin(x)) + sin(x) * (tan(x))**( - 1) - ln((sin(x))**( - 1) + (tan(x))**( - 1)) + c",
            "- (ln(1 - cos(x)**(2)) * cos(x) - 2*cos(x) + ln((1 + cos(x))/(1 - cos(x))))/(2) + c",
            "ln((1)/(sin(x)) - (1)/(tan(x))) + cos(x) - cos(x) * ln(sin(x)) + c",
            "- ln((1)/(sin(x)) + (1)/(tan(x))) - cos(x) * (ln(sin(x)) - 1) + c",
            "- ln((1)/(tan(x)) + (1)/(sin(x))) - cos(x) * ln(sin(x)) + cos(x) + c",
            "- ln(abs((1)/(sin(x)) + cot(x))) - cos(x) * (ln(sin(x)) - 1) + c",
            "- ln(abs(cosec(x) + cot(x))) + cos(x) - cos(x) * ln(sin(x)) + c",
            "- ln(abs(cosec(x) + cot(x))) - cos(x) * (ln(sin(x)) - 1) + c",
            "- ln(abs(sin(x))) * cos(x) - (1)/(2) * ln(abs((1 + cos(x))/(1 - cos(x)))) + cos(x) + c",
            "- ln(abs(sin(x))) * cos(x) + cos(x) + ln(abs(tan((x)/(2)))) + c",
            "- ln(abs(sin(x))) * cos(x) + ln(abs(tan((x)/(2)))) + cos(x) + c",
            "- ln(cosec(x) + cot(x)) + cos(x) * (1 - ln(sin(x))) + c",
            "- ln(cosec(x) + cot(x)) + cos(x) - cos(x) * ln(sin(x)) + c",
            "- ln(cosec(x) + cot(x)) - cos(x) * (ln(sin(x)) - 1) + c",
            "- ln(cosec(x) + cot(x)) - cos(x) * ln(sin(x)) + cos(x) + c",
            "ln(cosec(x) - cot(x)) - cos(x) * ln(sin(x)) + cos(x) + c",
            "(ln((sin(x))/(cos(x) + 1))) + cos(x) * (1 - ln(abs(sin(x)))) + c",
            "ln((sin(x))/(cos(x) + 1)) + cos(x) * (1 - ln(sin(x))) + c",
            "ln((sin(x))/(cos(x) + 1)) + cos(x) - cos(x) * ln(sin(x)) + c",
            "- ln(sin(x)) * cos(x) + cos(x) + ln(tan((1)/(2) * x)) + c",
            "- ln(sin(x)) * (cos(x)) + (cot(x) * (sin(x))) - ln(cosec(x) + cot(x)) + c",
            "- ln(sin(x)) * cos(x) + cot(x) * sin(x) - ln(cosec(x) + cot(x)) + c",
            "- ln(sin(x)) * cos(x) - ln((1)/(sin(x)) + (1)/(tan(x))) + cos(x) + c",
            "- ln(sin(x)) * cos(x) - ln(cosec(x) + cot(x)) + cos(x) + c",
            "- (ln(sin(x))) * cos(x) + ln(tan((1)/(2) * x)) + cos(x) + c",
            "- ln(sin(x)) * cos(x) + ln(tan((x)/(2))) + cos(x) + c",
            "ln(tan((x)/(2))) + cos(x) - cos(x) * ln(sin(x)) + c"
        ]
    },
    "((1)/(2))*(a_n+((m*a_n**(2))/(F_r))) t**(2)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(1)/(2) * a_n*t**(2) + (1)/(2) * ((m*a_n**(2)*t**(2))/(F_r))",
            "(1)/(2) * a_n*t**(2) + ((1)/(2) * m*(a_n*t)**(2))/(F_r)",
            "(1)/(2) * a_n*t**(2) + (1)/(2) * (m*(a_n*t)**(2))/(F_r)",
            "(1)/(2) * a_n*t**(2)*(1 + (a_n*m)/(F_r))",
            "(1)/(2) * a_n*t**(2)*(1 + a_n*(m)/(F_r))",
            "(1)/(2) * a_n*t**(2)*(1 + (m*a_n)/(F_r))",
            "(1)/(2) * a_n*t**(2)*(1 + m*(a_n)/(F_r))",
            "(1)/(2) * a_n*t**(2) + (a_n**(2)*t**(2))/((2*F_r)/(m))",
            "(1)/(2) * a_n*t**(2) + ((a_n)**(2) * t**(2))/(2*(F_r)/(m))",
            "(((1)/(2)) * a_n*t**(2)) + (a_n**(2)*t**(2)*m)/(2*F_r)",
            "((1)/(2) * a_n*t**(2)) + ((a_n**(2)*t**(2)*m)/(2*F_r))",
            "((1)/(2) * a_n*t**(2)) + (a_n**(2)*t**(2)*m)/(2*F_r)",
            "(1)/(2) * a_n*t**(2) + ((a_n**(2)*t**(2)*m)/(2*F_r))",
            "(1)/(2) * a_n*t**(2) + (a_n**(2)*t**(2)*m)/(2*F_r)",
            "((1)/(2) * a_n*t**(2)) + ((a_n**(2)*t**(2)*m)/((F_r) * (2)))",
            "((1)/(2)) * a_n*t**(2) + ((a_n*t)**(2))/(2*((F_r)/(m)))",
            "(1)/(2) * (a_n) * (t**(2)) + ((a_n*t)**(2))/(2*((F_r)/(m)))",
            "(1)/(2) * a_n*t**(2) + ( - (a_n*t)**(2))/(2*(( - F_r)/(m)))",
            "(1)/(2) * a_n*t**(2) + (( - a_n*t)**(2))/(2*(F_r)/(m))",
            "(1)/(2) * a_n*t**(2) + ((a_n*t)**(2))/(2*((F_r)/(m)))",
            "(1)/(2) * a_n*t**(2) + ((a_n*t)**(2))/(2*(F_r)/(m))",
            "(1)/(2) * (a_n*t**(2) + ((a_n*t)**(2))/((F_r)/(m)))",
            "(1)/(2) * a_n*t**(2) + ((a_n*t)**(2))/(((F_r)/(m)) * 2)",
            "(1)/(2) * (a_n*t**(2)) + (((a_n*t)**(2) * m)/(2*F_r))",
            "(1)/(2) * (a_n*t**(2)) + ((a_n*t)**(2) * m)/(2*F_r)",
            "(1)/(2) * a_n*t**(2) + ((a_n*t)**(2) * m)/(2*F_r)",
            "(1)/(2) * a_n*t**(2) + (a_n*t)**(2) * (m)/(2*F_r)",
            "(1)/(2) * (a_n*t**(2) + (a_n*t)**(2) * (m)/(F_r))",
            "(1)/(2) * a_n*t**(2) + (m)/(2*F_r) * (a_n*t)**(2)",
            "(1)/(2) * (a_n) * t**(2) + (m*a_n**(2)*t**(2))/(2*F_r)",
            "(1)/(2) * (a_n*t**(2)) + (m*(a_n)**(2) * t**(2))/(2*F_r)",
            "(1)/(2) * a_n*t**(2) + (m*a_n**(2)*t**(2))/(2*F_r)",
            "(((1)/(2)) * a_n*(t)**(2)) + (m*(a_n*t)**(2))/(2*F_r)",
            "(1)/(2) * (a_n) * (t**(2)) + ((m) * (a_n*t)**(2))/(2*F_r)",
            "(1)/(2) * a_n*t**(2) + (m*(a_n*t)**(2))/(2*F_r)",
            "(1)/(2) * a_n*t**(2)*((m)/(F_r) * a_n + 1)",
            "(1)/(2) * a_n*t**(2) + t**(2)*a_n**(2)*(m)/(2*F_r)",
            "((1)/(2*F_r)) * (t**(2)*a_n*F_r + t**(2)*a_n**(2)*m)",
            "(1)/(2) * t**(2)*a_n*(1 + m*(a_n)/(F_r))",
            "(1)/(2) * (t**(2)*a_n + (t**(2)*(a_n)**(2) * m)/(F_r))",
            "(a_n**(2)*t**(2)*m)/(2*F_r) + (1)/(2) * a_n*t**(2)",
            "a_n**(2)*t**(2)*(m)/(2*F_r) + (1)/(2) * a_n*t**(2)",
            "((a_n)**(2) * t**(2)*m)/(2*F_r) + (a_n*t**(2))/(2)",
            "(a_n**(2)*t**(2)*m)/(2*F_r) + (a_n*t**(2))/(2)",
            "a_n*t**(2)*((1)/(2) + (m*a_n)/(2*F_r))",
            "(a_n) * (t**(2))/(2) * (1 + (2*m*a_n)/(2*F_r))",
            "(a_n*t**(2))/(2) * (1 + (a_n*m)/(F_r))",
            "(a_n*t**(2))/(2) * (1 + (m*a_n)/(F_r))",
            "(a_n*t**(2))/(2) * (1 + m*(a_n)/(F_r))",
            "a_n*(t**(2))/(2) * (1 + m*(a_n)/(F_r))",
            "(a_n*t**(2))/(2) * (1 + (m)/(F_r) * a_n)",
            "(a_n*t**(2))/(2) + abs((m*a_n**(2)*t**(2))/(2*F_r))",
            "(a_n*t**(2))/(2) + (a_n**(2)*m*t**(2))/(2*F_r)",
            "((a_n*t**(2))/(2)) + ((a_n**(2)*t**(2))/((2*F_r)/(m)))",
            "(a_n*t**(2))/(2) + (a_n**(2)*t**(2))/(2*((F_r)/(m)))",
            "((a_n*t**(2))/(2)) + ((a_n**(2)*t**(2)*m)/(2*F_r))",
            "(a_n*t**(2))/(2) + ((a_n)**(2) * t**(2)*m)/(2*F_r)",
            "(a_n*t**(2))/(2) + (a_n**(2)*t**(2)*m)/(2*F_r)",
            "a_n*(t**(2))/(2) + a_n**(2)*t**(2)*(m)/(2*F_r)",
            "((a_n) * t**(2))/(2) + (((a_n) * t)**(2))/(2*((F_r)/(m)))",
            "(a_n*t**(2))/(2) + ( - (a_n*t)**(2))/(2*( - F_r)/(m))",
            "(a_n*t**(2))/(2) + ((a_n*t)**(2))/(2*((F_r)/(m)))",
            "(a_n*t**(2))/(2) + ((a_n*t)**(2))/(2*(F_r)/(m))",
            "(a_n*t**(2))/(2) - ((a_n*t)**(2))/(2*( - F_r)/(m))",
            "((a_n) * t**(2))/(2) + (((a_n) * t)**(2))/(((F_r)/(m)) * 2)",
            "(a_n*t**(2))/(2) + ((a_n*t)**(2) * m)/(2*F_r)",
            "a_n*(t**(2))/(2) + ((a_n*t)**(2) * m)/(2*(F_r))",
            "( - (a_n*t)**(2))/(2*(( - F_r)/(m))) + (1)/(2) * (a_n*t**(2))",
            "(((a_n) * t)**(2))/(2*((F_r)/(m))) + ((a_n) * t**(2))/(2)",
            "(((a_n) * t)**(2))/(2*(F_r)/(m)) + ((a_n) * t**(2))/(2)",
            "((a_n*(t))**(2))/(2*((F_r)/(m))) + a_n*(t**(2))/(2)",
            "((a_n*t)**(2))/(2*((F_r)/(m))) + (a_n*t**(2))/(2)",
            "((a_n*t)**(2))/(2*(F_r)/(m)) + (a_n*t**(2))/(2)",
            "((a_n*t)**(2))/((2*F_r)/(m)) + ((a_n*t)**(2))/(2*a_n)",
            "(a_n*t**(2))/(2) + (m*a_n**(2)*t**(2))/(2*F_r)",
            "a_n*(t**(2))/(2) + (m*a_n**(2)*t**(2))/(2*F_r)",
            "a_n*(t**(2))/(2) + m*a_n**(2)*(t**(2))/(2*F_r)",
            "(a_n*t**(2))/(2) * ((m*a_n)/(F_r) + 1)",
            "(a_n*(t**(2))/(2)) + (m*((a_n*t)**(2))/(2*F_r))",
            "(a_n*t**(2))/(2) + (m*(a_n*t)**(2))/(2*F_r)",
            "(a_n*t**(2))/(2) + (m*t**(2)*a_n**(2))/(2*F_r)",
            "((a_n) * t**(2))/(2) + ((t*a_n)**(2))/(2*(F_r)/(m))",
            "(a_n*t**(2))/(2) + ((t*a_n)**(2))/(2*(F_r)/(m))",
            "(a_n*t**(2)*F_r + a_n**(2)*t**(2)*m)/(2*F_r)",
            "((a_n) * t**(2)*((F_r) + (a_n) * m))/(2*F_r)",
            "(a_n*t**(2)*(F_r + a_n*m))/(2*F_r)",
            "(a_n*t**(2)*(F_r + m*a_n))/(2*F_r)",
            "(((a_n*t)**(2) * m)/(2*F_r)) + (1)/(2) * (a_n*t**(2))",
            "((a_n*t)**(2) * m)/(2*F_r) + (1)/(2) * a_n*t**(2)",
            "((a_n*t)**(2) * m)/(2*F_r) + (a_n*t**(2))/(2)",
            "(a_n*t**(2)*(m*a_n + F_r))/(2*F_r)",
            "((a_n) * t)/(2) * (t + ((a_n*t*m)/(F_r)))",
            "a_n*t*(t)/(2) + m*a_n*a_n*t*(t)/(2*F_r)",
            "(F_r*a_n*t**(2) + (a_n*t)**(2) * m)/(2*F_r)",
            "(m)/(2*F_r) * (a_n*t)**(2) + (a_n*t**(2))/(2)",
            "(m*a_n**(2)*t**(2))/(2*F_r) + (1)/(2) * a_n*t**(2)",
            "(m*(a_n**(2)*t**(2)))/(2*F_r) + (a_n*t**(2))/(2)",
            "(m*a_n**(2)*t**(2))/(2*F_r) + (a_n*t**(2))/(2)",
            "(m*a_n**(2)*t**(2) + F_r*a_n*t**(2))/(2*F_r)",
            "(m*a_n**(2)*t**(2) + F_r*t**(2)*a_n)/(2*F_r)",
            "((m*a_n)/(F_r) + 1) * ((a_n*t**(2))/(2))",
            "(m*(a_n*t)**(2))/(2*F_r) + (1)/(2) * a_n*t**(2)",
            "(m*(a_n*t)**(2))/(2*F_r) + ((a_n) * t**(2))/(2)",
            "(m*(a_n*t)**(2))/(2*F_r) + (a_n*(t**(2))/(2))",
            "(m*(a_n*t)**(2))/(2*F_r) + (a_n*t**(2))/(2)",
            "(t**(2)*a_n)/(2) * (1 + (a_n*(m))/(F_r))",
            "(t**(2)*a_n)/(2) * (1 + (a_n*m)/(F_r))"
        ]
    },
    "a+((T)/(4*m))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(1)/(4*m) * T + a",
            "(((1)/(4) * T + a*m) * a)/(a*m)",
            "((1)/(4) * T + a*m)/(m)",
            "((1)/(4)) * (T)/(m) + a",
            "(1)/(4) * (T)/(m) + a",
            "(((1)/(4) * T) + m*a)/(m)",
            "(((1)/(4)) * T + (m*a))/(m)",
            "(((1)/(4)) * T + m*a)/(m)",
            "((1)/(4) * T + (m*a))/(m)",
            "((1)/(4) * T + m*a)/(m)",
            "(1)/(m) * ((1)/(4) * T + m*a)",
            "(1*T)/(4*m) + a",
            "(1*(T)/(4) + m*a)/(m)",
            "(4*m*a + T)/(4*m)",
            "((5)/(4) * T - T + a*m)/(m)",
            "(((5)/(4) * T - T + m*a))/(m)",
            "(((5)/(4) * T) - (T - m*a))/(m)",
            "((5)/(4) * T - (T - m*a))/(m)",
            "((5)/(4) * T - T + m*a)/(m)",
            "(5*T)/(4*m) - ((T)/(m) - a)",
            "((5*T)/(4))/(m) - ((T)/(m) - a)",
            "((5*T)/(4))/(m) - ((T - m*a)/(m))",
            "a + (((1)/(4) * T)/(m))",
            "a + ((1)/(4)) * ((T)/(m))",
            "a + (1)/(4) * ((T)/(m))",
            "a + ((5)/(4) * T)/(m) - (T)/(m)",
            "a + ((T)/(4*m))",
            "a + (T)/(4*m)",
            "(T + 4*a*m)/(4*m)",
            "((T)/(4) + a*m)/(m)",
            "((T)/(4*m)) + a",
            "(T)/(4*m) + a",
            "((T)/(4))/(m) + a",
            "(T + 4*m*a)/(4*m)",
            "(((T)/(4) + m*a))/(m)",
            "((T)/(4) + m*a)/(m)"
        ]
    },
    "a_n == a+((T)/(4*m))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(1)/(4*m) * T + a == a_n",
            "((1)/(4) * T + a*m)/(m) == a_n",
            "((1)/(4) * T)/(m) + a == a_n",
            "(1)/(4) * (T)/(m) + a == a_n",
            "((1)/(4) * T + m*a)/(m) == a_n",
            "((1*T)/(4) + m*a)/(m) == a_n",
            "(((5)/(4) * T - (T - m*a)))/(m) == a_n",
            "((5)/(4) * T - (T - m*a))/(m) == a_n",
            "a_n == (1)/(4*m) * T + a",
            "a_n == (1)/(4) * T*(1)/(m) + a",
            "a_n == ((1)/(4) * T)/(m) + a",
            "a_n == (1)/(4) * (T)/(m) + a",
            "a_n == (((1)/(4) * T) + m*a)/(m)",
            "a_n == ((1)/(4) * T + m*a)/(m)",
            "a_n == (1*T)/(4*m) + a",
            "a_n == ((5)/(4) * T - ( - m*a + T))/(m)",
            "a_n == (((5)/(4) * T) - (T - m*a))/(m)",
            "a_n == (((5)/(4) * T) - T + m*a)/(m)",
            "a_n == (((5)/(4)) * T - (T - m*a))/(m)",
            "a_n == ((5)/(4) * T - (T - m*a))/(m)",
            "a_n == ((5)/(4) * T - T + m*a)/(m)",
            "a_n == (5*T - 4*(T - m*a))/(4*m)",
            "a_n == a + (1)/(4*m) * T",
            "a_n == a + (T*(1)/(4))/(m)",
            "a_n == a + ((T)/(4*m))",
            "a_n == a + (T)/(4*m)",
            "a_n == ( - m*a - ((1)/(4)) * T)/( - m)",
            "a_n == ((T)/(4*m) + a)",
            "a_n == ((T)/(4*m)) + a",
            "a_n == (T)/(4*m) + a",
            "a_n == (T + 4*m*a)/(4*m)",
            "a_n == ((T)/(4) + m*a)/(m)",
            "a + (T)/(4*m) == a_n",
            "(T)/(4*m) + a == a_n",
            "((T)/(4) + m*a)/(m) == a_n",
            "(T)/(m) * (1)/(4) + a == a_n"
        ]
    },
    "(2)/(3) * mu*a*g*m": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(2)/(3) * a*(mu) * m*g",
            "(2)/(3) * a*mu*m*g",
            "(2)/(3) * g*m*mu*a",
            "(2)/(3) * g*mu*a*m",
            "(2)/(3) * g*mu*m*a",
            "(2)/(3) * m*a*g*mu",
            "(2)/(3) * m*g*a*mu",
            "(2)/(3) * m*g*mu*a",
            "(2)/(3) * m*mu*a*g",
            "(2)/(3) * m*mu*g*a",
            "(2)/(3) * mu*a*g*m",
            "(2)/(3) * mu*g*a*m",
            "(2)/(3) * (mu*g*m*a)",
            "(2)/(3) * mu*g*m*a",
            "(2)/(3) * mu*m*a*g",
            "((2)/(3)) * mu*m*g*a",
            "(2)/(3) * (mu*m*g*a)",
            "(2)/(3) * mu*m*g*a",
            "2*(a)/(3) * mu*m*g",
            "2*a*m*g*(mu)/(3)",
            "(2*a*mu*g*m)/(3)",
            "(2*g*mu*a*m)/(3)",
            "2*g*mu*a*(m)/(3)",
            "2*g*mu*m*(a)/(3)",
            "2*m*a*g*(mu)/(3)",
            "(2*m*a*mu*g)/(3)",
            "2*m*g*a*(mu)/(3)",
            "(2*m*g*mu*a)/(3)",
            "2*m*g*mu*(a)/(3)",
            "2*m*mu*a*(g)/(3)",
            "(2*m*mu*g*a)/(3)",
            "2*m*mu*g*(a)/(3)",
            "(2*mu*g*a*m)/(3)",
            "2*mu*g*a*(m)/(3)",
            "2*mu*g*(m)/(3) * a",
            "2*mu*g*m*(a)/(3)",
            "(2*mu*m*a*g)/(3)",
            "(2*mu*m*g*a)/(3)",
            "2*mu*m*g*(a)/(3)",
            "m*a*mu*g*(2)/(3)",
            "mu*a*2*m*(g)/(3)",
            "mu*g*2*a*(m)/(3)",
            "mu*g*a*m*(2)/(3)",
            "((mu) * (g) * (m) * (a) * 2)/(3)",
            "mu*m*g*((2)/(3) * a)"
        ]
    },
    "tau == (2)/(3) * mu*a*g*m": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "tau == (2)/(3) * a*m*g*mu",
            "tau == (2)/(3) * a*mu*g*m",
            "tau == (2)/(3) * m*g*mu*a",
            "tau == (2)/(3) * m*mu*g*a",
            "tau == (2)/(3) * mu*a*g*m",
            "tau == (2)/(3) * mu*g*m*a",
            "tau == (2)/(3) * mu*m*g*a",
            "tau == (2*m*g*mu*a)/(3)",
            "tau == 2*m*g*mu*(a)/(3)",
            "tau == (2*m*mu*g*a)/(3)",
            "tau == 2*(mu) * (g) * (m) * (a)/(3)",
            "tau == (2*mu*m*a*g)/(3)",
            "tau == 2*mu*m*g*(a)/(3)"
        ]
    },
    "11*R/6": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(1 + 1 + 1 + 8)/(1**(5) + 5) * R",
            "(1)/((1)/(2*R + 3*R) + (1)/(R)) + R",
            "(1)/((1)/(5*R) + (1)/(R)) + R",
            "((11)/(6)) * R",
            "(11)/(6) * (R)",
            "(11)/(6) * R",
            "((1)/(((1)/(R)) + ((1)/(5*R)))) + R",
            "(1)/(((1)/(R) + (1)/(5*R))) + R",
            "(1)/(((1)/(R)) + ((1)/(5*R))) + R",
            "(1)/((1)/(R) + (1)/(5*R)) + (R)",
            "(1)/((1)/(R) + (1)/(5*R)) + R",
            "(1)/(((1)/(R*3 + R*2)) + (1)/(R)) + R",
            "((11*R)/(6))",
            "(11*R)/(6)",
            "11*((R)/(6))",
            "11*(R)/(6)",
            "((1)/(2*R + 3*R) + ((1)/(R)))**( - 1) + R",
            "((1)/(2*R + 3*R) + (1)/(R))**( - 1) + R",
            "((1)/(3*R + 2*R) + (1)/(R))**( - 1) + R",
            "1*(5)/(6) * R + R",
            "(((1)/(5*R) + (1)/(1*R))**( - 1)) + 1*R",
            "((1)/(5*R) + (1)/(R))**( - 1) + R",
            "((1)/(R) + ((1)/(5*R)))**( - 1) + R",
            "((1)/(R) + (1)/(5*R))**( - 1) + R",
            "1*R + ((5)/(6)) * R",
            "1*R + (5)/(6) * R",
            "((5)/(6) + 1) * R",
            "(5)/(6) * R + 1*R",
            "(5)/(6) * R + R",
            "(5*R**(2))/(6*R) + R",
            "(5*R**(2))/(R + 5*R) + R",
            "((5*R)/(6)) + R",
            "(5*R)/(6) + R",
            "5*(R)/(6) + R",
            "(5*R + 6*R)/(6)",
            "(5*R*R)/(6*R) + R",
            "(9 + 2)/(6) * R",
            "(9 + 9 + 9 + 9 + 9 + 9 + 9 + 3)/(6) * (R)/(6)",
            "R + (1)/((1)/(2*R + 3*R) + (1)/(R))",
            "R*((11)/(6))",
            "R*(11)/(6)",
            "R + (1)/(((1)/(R)) + ((1)/(2*R + 3*R)))",
            "R + ((1)/(((1)/(R)) + ((1)/(5*R))))",
            "R + ((1)/((1)/(R) + (1)/(5*R)))",
            "R + (1)/(((1)/(R) + (1)/(5*R)))",
            "R + (1)/(((1)/(R)) + (1)/(5*R))",
            "R + (1)/((1)/(R) + (1)/((5*R)))",
            "R + (1)/((1)/(R) + (1)/(5*R))",
            "R + (1)/(2) * R + (1)/(3) * R",
            "R + ((1)/(2*R + 3*R) + (1)/(R))**( - 1)",
            "R + ((1)/(5*R) + (1)/(R))**( - 1)",
            "R + ((1)/((6)/(5*R)))",
            "R + ((1)/(R) + (1)/(2*R + 3*R))**( - 1)",
            "R + ((1)/(R) + (1)/(2*R + 3*R))**(-1)",
            "R + ((1)/(R) + (1)/(5*R))**( - 1)",
            "R + ((1)/(R) + (1)/(5*R))**(-1)",
            "R + ((1)/(R) + (1)/(R*2 + R*3))**( - 1)",
            "R + ((1)/(R) + (1)/(R*5))**( - 1)",
            "(R*(2*R + 3*R))/(R + 2*R + 3*R) + R",
            "(R*(2*R + 3*R)/(R + 2*R + 3*R)) + R",
            "R + ((5)/(6)) * R",
            "R + (5)/(6) * R",
            "R + (5*R**(2))/(6*R)",
            "R + (5*(R)**(2))/(6*R)",
            "R + 5*(R**(2))/(6*R)",
            "R + ((5*R)/(6))",
            "R + (5*R)/(6)",
            "R + (5*(R)/(6))",
            "R + 5*(R)/(6)"
        ]
    },
    "25*V^2/(121*R)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(150*V**(2))/(726*R)",
            "(25)/(121*R) * V**(2)",
            "(25)/(121) * V**(2)*((1)/(R))",
            "(25)/(121) * V**(2)*(1)/(R)",
            "(((25)/(121)) * (V**(2))/(R))",
            "(((25)/(121)) * V**(2))/(R)",
            "((25)/(121) * (V)**(2))/(R)",
            "((25)/(121) * V**(2))/(R)",
            "((25)/(121)) * ((V**(2))/(R))",
            "((25)/(121)) * (V**(2))/(R)",
            "(25)/(121) * ((V**(2))/(R))",
            "(25)/(121) * (V**(2))/(R)",
            "(25)/(121) * V**(2)*R**( - 1)",
            "(25)/(121) * V*(V)/(R)",
            "((25) * (V**(2))/(121)) * (1)/(R)",
            "((25*V**(2)))/(121*R)",
            "((25*V**(2))/(121*R))",
            "(25*V**(2))/(121*R)",
            "((25*V**(2))/(121))/(R)",
            "(25*(V)**(2))/(121*R)",
            "(25*(V**(2)))/(121*R)",
            "(25*V**(2))/((121) * R)",
            "25*(V**(2))/(121*R)",
            "(25*(V**(2))/(121))/(R)",
            "25*((V**(2))/(121))/(R)",
            "(25*V**(2)) * (121*R)**( - 1)",
            "25*V**(2)*(121*R)**( - 1)",
            "(25*V**(2))/(R*121)",
            "25*((V**(2))/(R))/(121)",
            "(25*V*V)/(121*R)",
            "25*V*(V)/(121*R)",
            "(((30)/(66) * V)**(2))/(R)",
            "(((5)/(11))**(2) * V**(2))/(R)",
            "((5)/(11) * V**(2))/((11)/(5) * R)",
            "((5)/(11) * V)**(2) * ((1)/(R))",
            "((5)/(11) * V)**(2) * (1)/(R)",
            "((((5)/(11)) * V)**(2))/(R)",
            "(((5)/(11) * V)**(2))/(R)",
            "((5)/(11) * V*(5)/(11) * V)/(R)",
            "((5)/(11)) * V*((5)/(11) * V)/(R)",
            "(5)/(11) * V*((5)/(11) * (V)/(R))",
            "(5)/(11) * V*(5)/(11) * (V)/(R)",
            "((5)/(11) * V)/(R) * (5)/(11) * V",
            "(5)/(11) * (V)/(R) * (5)/(11) * V",
            "((5)**(2) * V**(2))/(11*11*R)",
            "((5**(2)) * V**(2))/(11*11*R)",
            "5**(2)*(V**(2))/(R*(9 + 2)**(2))",
            "(((5*V)/(11))**(2))/(1*R)",
            "(((5*V)/(11))**(2))/(R)",
            "(((5*(V)/(11))**(2))/(R))",
            "((5*((V)/(11)))**(2))/(R)",
            "((5*(V)/(11))**(2))/(R)",
            "((5*V)/(11))**(2) * R**( - 1)",
            "((5*V)/(11)) * ((5*V)/(11*R))",
            "5*(V)/(11) * 5*(V)/(11*R)",
            "((5*(V)/(11*R))**(2)) * (R)",
            "((5*V)/(11*R)) * (5*V)/(11)",
            "((((6)/(11)) * ((5)/(6)) * V)**(2))/(R)",
            "(((6)/(11) * V*(5)/(6))**(2))/(R)",
            "((((V)/(11)) * 5)**(2))/(R)",
            "(((V)/((11)/(6)) * (5)/(6))**(2))/(R)",
            "(V**(2))/((121)/(25) * R)",
            "V**(2)*((25)/(121))/(R)",
            "((V)**(2))/(R*((11)/(5))**(2))",
            "((V**(2))/(R)) * ((25)/(121))",
            "(V**(2))/(R) * (25)/(121)",
            "(((V) * (5)/(11))**(2))/(R)",
            "((V*(5)/(11))**(2))/(R)",
            "(((V*(5)/(6))/((11)/(6)))**(2))/(R)",
            "((V*((5)/(6))/((11)/(6)))**(2))/(R)",
            "((V - (6*V)/(11))**(2))/(R)",
            "((V - 6*(V)/(11))**(2))/(R)",
            "((V - (V)/((11)/(6)))**(2))/(R)"
        ]
    },
    "11*V/(17*R)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(11)/(17) * R**( - 1)*V",
            "(11)/(17*R) * V",
            "((11)/(17) * V)/(R)",
            "((11)/(17)) * ((V)/(R))",
            "(11)/(17) * ((V)/(R))",
            "(11)/(17) * (V)/(R)",
            "(11)/(17) * V*R**( - 1)",
            "(11*V)/(17*R)",
            "11*(V)/(17*R)",
            "(11*(V))/((17) * R)",
            "11*((V)/(17))/(R)",
            "11*(V)/(17) * R**( - 1)",
            "11*(V)/(6*R + 11*R)",
            "11*(V)/(R*17)",
            "(1*V)/(((17)/(11) * R))",
            "(1*V)/(((17)/(11)) * R)",
            "(1*V)/((17)/(11) * R)",
            "(66*V)/(102*R)",
            "(V)/((1)/((11)/(6*R)) + R)",
            "V*(11)/(17*R)",
            "V*(((11)/(17))/(R))",
            "(V)/((1)/((1)/(2*R) + (1)/(3*R) + (1)/(R)) + R)",
            "(V)/(((11)/(6*R))**( - 1) + R)",
            "(V)/(((1)/(((1)/(R)) + ((1)/(2*R)) + ((1)/(3*R)))) + R)",
            "(V)/((1)/(((1)/(R)) + ((1)/(2*R)) + ((1)/(3*R))) + R)",
            "(V)/((1)/((1)/(R) + (1)/(2*R) + (1)/(3*R)) + R)",
            "(V)/((1)/((1)/(R) + (1)/(3*R) + (1)/(2*R)) + R)",
            "(V)/((1)/((1)/(R) + (1)/(R*2) + (1)/(R*3)) + R)",
            "(V)/(((1)/(2*R) + (1)/(R) + (1)/(3*R))**( - 1) + R)",
            "((V)/((17)/(11) * R))",
            "(V)/(((17)/(11) * R))",
            "(V)/(((17)/(11)) * R)",
            "(V)/((17)/(11) * R)",
            "(V)/((17)/(11)) * R**( - 1)",
            "V*((17)/(11) * R)**( - 1)",
            "(V)/(((17*R)/(11)))",
            "(V)/((17*R)/(11))",
            "(V)/(17*(R)/(11))",
            "(V)/((((1)/(R) + (1)/(2*R) + (1)/(3*R))**( - 1)) + R)",
            "(V)/((((1)/(R)) + ((1)/(2*R)) + ((1)/(3*R)))**( - 1) + R)",
            "(V)/(((1)/(R) + (1)/(2*R) + (1)/(3*R))**( - 1) + R)",
            "(V)/(((1)/(R) + (1)/(2*R) + (1)/(3*R))**(-1) + R)",
            "(V)/((6)/(11) * R + 1*R)",
            "(V)/((((6)/(11)) * R) + R)",
            "(V)/(((6)/(11) * R) + R)",
            "(V)/(((6)/(11)) * R + R)",
            "(V)/((6)/(11) * R + R)",
            "(V)/(((6*R)/(11) + R))",
            "(V)/(((6*R)/(11)) + R)",
            "(V)/((6*R)/(11) + (R))",
            "(V)/((6*R)/(11) + R)",
            "(V)/((6*(R)/(11)) + R)",
            "(V)/(6*(R)/(11) + R)",
            "(V)/((6*R**(3))/(11*R**(2)) + R)",
            "(V)/(6*(R**(3))/(11*R**(2)) + R)",
            "(V)/((6*R)/(9 + 2) + R)",
            "(V)/((9 + 8)/(9 + 2) * R)",
            "(V)/(R + (1)/((11)/(6*R)))",
            "((V)/(R)) * (11)/(17)",
            "(V)/(R) * (11)/(17)",
            "(V)/(R + (1)/(((1)/(R)) + ((1)/(2*R)) + ((1)/(3*R))))",
            "(V)/(R + (1)/((1)/(R) + (1)/(2*R) + (1)/(3*R)))",
            "(V)/(R*(17)/(11))",
            "(V)/(R + ((1)/(R) + (1)/(2*R) + (1)/(3*R))**( - 1))",
            "(V)/(R + ((1)/(R) + (1)/(3*R) + (1)/(2*R))**( - 1))",
            "(V)/(R + (6)/(11) * R)",
            "(V)/(R + (6*R)/(11))",
            "(V)/(R + 6*(R)/(11))",
            "(V)/(R + (R)/((1)/(1) + (1)/(2) + (1)/(3)))"
        ]
    },
    "V^2/(49*R)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(1)/(49*R) * V**(2)",
            "(1)/(49*R) * V*V",
            "(((1)/(49) * V**(2)))/(R)",
            "((1)/(49) * (V**(2)))/(R)",
            "((1)/(49) * V**(2))/(R)",
            "((1)/(49)) * ((V**(2))/(R))",
            "((1)/(49)) * (V**(2))/(R)",
            "(1)/(49) * ((V)**(2))/(R)",
            "(1)/(49) * ((V**(2))/(R))",
            "(1)/(49) * (V**(2))/(R)",
            "(1)/(49) * V**(2)*R**( - 1)",
            "(((1)/(49)) * (V*V))/(R)",
            "(1)/(49) * V*(V)/(R)",
            "(((1)/(7) * V) * ((1)/(7) * V))/(R)",
            "(((1)/(7)) * V*(1)/(7) * V)/(R)",
            "((1)/(7) * V) * ((1)/(7) * V)/(R)",
            "((1)/(7) * V*(1)/(7) * V)/(R)",
            "(1)/(7) * V*(((1)/(7) * V)/(R))",
            "(1)/(7) * V*((1)/(7) * V)/(R)",
            "(1)/(7) * V*(1)/(7) * (V)/(R)",
            "((((1)/(7) * V)**(2))/(R))",
            "((((1)/(7)) * V)**(2))/(R)",
            "(((1)/(7) * V)**(2))/(R)",
            "(((1)/(7) * V)/(R))**(2) * R",
            "(1*V**(2))/(49*R)",
            "1*(V**(2))/(49*R)",
            "(((1*V)/(7))**(2))/(R)",
            "((25)/(1225) * V**(2))/(R)",
            "(25)/(1225) * (V**(2))/(R)",
            "(25*V**(2))/(1225*R)",
            "((25*V**(2))/(1225))/(R)",
            "25*(V**(2))/(1225*R)",
            "((25*V**(2))/(35**(2)))/(R)",
            "(5)/(245) * (V**(2))/(R)",
            "((5**(2)*V**(2))/(35**(2)))/(R)",
            "(((5)/(35) * V)**(2))/(R)",
            "(((((5)/(6))/((35)/(6))) * V)**(2))/(R)",
            "((((5)/(6))/((35)/(6)) * V)**(2))/(R)",
            "((((5)/(6) * V)/((35)/(6)))**(2))/(R)",
            "(((5)/(6) * (V)/((35)/(6) * R) * R)**(2))/(R)",
            "((((5)/(6)) * ((V)/((35*R)/(6))))**(2)) * (R)",
            "((5*V)**(2))/(35**(2)*R)",
            "(((5*V)/(35))**(2))/(R)",
            "((5*(V)/(35))**(2))/(R)",
            "(((5*V)/(35*R))**(2)) * R",
            "6*(V**(2))/(35*R) * ((5)/(42))",
            "(R*V**(2))/(49*R**(2))",
            "(R*(V**(2)))/(49*(R**(2)))",
            "(V**(2)*((1)/(49)))/(R)",
            "V**(2)*((1)/(49))/(R)",
            "((V**(2))/(49)) * (1)/(R)",
            "(V**(2))/(49) * (1)/(R)",
            "((V)**(2))/(49*R)",
            "((V**(2))/(49*R))",
            "(V**(2))/(49*R)",
            "((V**(2))/(49))/(R)",
            "(V**(2))/((49) * R)",
            "(V**(2))/(R) * (1)/(49)",
            "(((V)/((35)/(6) * R)) * (5)/(6))**(2) * (R)",
            "((V)/(35*R) * 5)**(2) * R",
            "((V - 5*R*((V)/(((1)/(R) + (1)/(5*R))**( - 1) + 5*R)))**(2))/(R)",
            "((V - (5*R) * (V)/((35*R)/(6)))**(2))/(R)",
            "((((V)/(7))**(2))/(R))",
            "(((V)/(7))**(2))/(R)",
            "(V)/(7) * (5)/(6) * 6*(V)/(35*R)",
            "((V)/(7*R))**(2) * (R)",
            "((V)/(7*R))**(2) * R",
            "(((V)/(7)) * ((V)/(7)))/(R)",
            "((V)/(7)) * (((V)/(7))/(R))",
            "(V*V)/(49*R)",
            "V*(V)/(49*R)"
        ]
    },
    "6*V/(35*R)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "((6)/(35*R)) * V",
            "(6)/(35*R) * V",
            "((6)/(35)) * ((V)/(R))",
            "((6)/(35)) * (V)/(R)",
            "(6)/(35) * ((V)/(R))",
            "(6)/(35) * (V)/(R)",
            "(6)/(35) * V*R**( - 1)",
            "6*(V)/(35) * (1)/(R)",
            "(6*V)/(35*R)",
            "(6*V)/((35) * R)",
            "6*(V)/(35*R)",
            "6*((V)/(35))/(R)",
            "6*(V)/(35) * R**( - 1)",
            "(6*V)/(R*35)",
            "(V)/((1)/((1)/(3*R + 2*R) + (1)/(R)) + 2*R + 3*R)",
            "(V)/(((1)/((1)/(5*R) + (1)/(R))) + 5*R)",
            "(V)/((1)/((1)/(5*R) + (1)/(R)) + 5*R)",
            "(V)/((1)/((1)/(R) + (1)/(5*R)) + 5*R)",
            "(V)/(((1)/(2*R + 3*R) + (1)/(R))**( - 1) + 2*R + 3*R)",
            "(V)/(((1)/(3*R + 2*R) + (1)/(R))**( - 1) + 5*R)",
            "(V)/(((1)/(5*R) + (1)/(R))**( - 1) + 5*R)",
            "(V)/(((1)/(R) + (1)/(5*R))**( - 1) + 5*R)",
            "(V)/(2*R + 3*R + (5)/(6) * R)",
            "(V)/((35)/(6)) * (1)/(R)",
            "((V)/(((35)/(6)) * R))",
            "((V)/((35)/(6) * R))",
            "(V)/(((35)/(6) * R))",
            "(V)/(((35)/(6)) * R)",
            "(V)/((35)/(6) * (R))",
            "(V)/((35)/(6) * R)",
            "((V)/((35*R)/(6)))",
            "(V)/((35*R)/(6))",
            "(V)/((35) * (R)/(6))",
            "(V)/(35*(R)/(6))",
            "V*(35*(R)/(6))**( - 1)",
            "(V)/(((5)/(6)) * R + 5*R)",
            "(V)/((5)/(6) * R + 5*R)",
            "(V)/(5*R + (1)/((1)/(5*R) + (1)/(R)))",
            "(V)/(5*R + ((1)/((1)/(R) + (1)/(5*R))))",
            "(V)/(5*R + (1)/(((1)/(R)) + (1)/(5*R)))",
            "(V)/(5*R + (1)/((1)/(R) + (1)/(5*R)))",
            "(V)/(5*R + ((1)/(5*R) + (1)/(R))**( - 1))",
            "(V)/(5*R + ((1)/(R) + (1)/(5*R))**( - 1))",
            "(V)/(((5*R**(2))/(6*R)) + 5*R)",
            "(V)/(5*R + (5)/(6) * R)",
            "(V)/(5*R + 5*(R**(2))/(6*R))",
            "(V)/(5*R + (5*R)/(6))",
            "(V)/(5*R + (5*(R)/(6)))",
            "(V)/(5*R + 5*(R)/(6))",
            "(V)/((5*R)/(6) + 5*R)",
            "(V)/(5*(R)/(6) + 5*R)",
            "(V*6)/(35*R)",
            "V*(6)/(35*R)",
            "V*((6)/(35))/(R)",
            "(V)/(R*(35)/(6))",
            "(V)/(R*(5 + ((5)/(6))))",
            "(V)/(R) * (6)/(35)"
        ]
    },
    "35*R/6": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(1)/((1)/(3*R + 2*R) + ((1)/(R))) + 2*R + 3*R",
            "(1)/((1)/(3*R + 2*R) + (1)/(R)) + 2*R + 3*R",
            "(1)/((1)/(3*R + 2*R) + (1)/(R)) + 5*R",
            "((1)/((1)/(5*R) + (1)/(R))) + 5*R",
            "(1)/(((1)/(5*R)) + ((1)/(R))) + 5*R",
            "(1)/((1)/(5*R) + (1)/(R)) + 5*R",
            "(1)/((1)/(R) + (1)/(5*R)) + 5*R",
            "((1)/(2*R + 3*R) + (1)/(R))**( - 1) + 2*R + 3*R",
            "((1)/((3*R) + 2*R) + (1)/(R))**( - 1) + 5*R",
            "((1)/(3*R + 2*R) + (1)/(R))**( - 1) + 5*R",
            "((1)/(5*R) + (1)/(R))**( - 1) + 5*R",
            "((1)/(R) + (1)/(5*R))**( - 1) + 5*R",
            "2*R + 3*R + ((1)/((1)/(5*R) + (1)/(R)))",
            "2*R + 3*R + (1)/((1)/(5*R) + (1)/(R))",
            "2*R + 3*R + (1)/(((1)/(R)) + (1)/(5*R))",
            "2*R + 3*R + (5)/(6) * R",
            "((35)/(6) * R)",
            "((35)/(6)) * R",
            "(35)/(6) * R",
            "((35*R)/(6))",
            "(35*R)/(6)",
            "35*(R)/(6)",
            "3*R + (1)/(((1)/(R)) + ((1)/(2*R + 3*R))) + 2*R",
            "3*R + ((1)/(R) + (1)/(5*R))**( - 1) + 2*R",
            "(5 + (5)/(6)) * R",
            "((5)/(6)) * R + 5*R",
            "(5)/(6) * R + 5*R",
            "5*R + ((1)/((1)/(R) + (1)/(5*R)))",
            "5*R + (1)/(((1)/(R)) + (1)/(5*R))",
            "5*R + (1)/((1)/(R) + (1)/(5*R))",
            "5*R + ((1)/(5*R) + (1)/(R))**( - 1)",
            "5*R + ((1)/(R) + (1)/(5*R))**( - 1)",
            "5*R + ((1)/(R) + (1)/(5*R))**(-1)",
            "(((5*R**(2))/(6*R)) + 5*R)",
            "((5*R**(2))/(6*R)) + 5*R",
            "(5*R) + ((5)/(6)) * R",
            "5*R + ((5)/(6) * R)",
            "5*R + ((5)/(6)) * R",
            "5*R + (5)/(6) * R",
            "5*R + 5*(R**(2))/(6*R)",
            "5*R + (5*R)/(6)",
            "5*R + (5*(R)/(6))",
            "5*R + 5*(R)/(6)",
            "(5*R)/(6) + (5*R)",
            "(5*R)/(6) + 5*R",
            "(5*(R)/(6)) + 5*R",
            "5*(R)/(6) + 5*R",
            "((6)/(5*R))**( - 1) + 5*R",
            "R*(35)/(6)",
            "R*(5 + ((5)/(6)))"
        ]
    },
    "9*V^2/(961*R)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(27*V**(2))/(2883*R)",
            "(3**(2))/(31**(2)) * (V**(2))/(R)",
            "((3**(2))/(961) * V**(2))/(R)",
            "(((3)/(31))**(2) * V**(2))/(R)",
            "((3)/(31))**(2) * (V**(2))/(R)",
            "((((3)/(31)) * V)**(2))/(R)",
            "(((3)/(31) * (V))**(2))/(R)",
            "(((3)/(31) * V)**(2))/(R)",
            "((3)/(31) * V*(3)/(31) * V)/(R)",
            "(3)/(31) * V*(((3)/(31) * V)/(R))",
            "(3)/(31) * V*((3)/(31) * V)/(R)",
            "(3)/(31) * V*(3)/(31) * (V)/(R)",
            "(((3)/(7) * (V)/(4 + (3)/(7)))**(2))/(R)",
            "(((3*V)/(31))**(2))/(R)",
            "((3*(V)/(31))**(2))/(R)",
            "(3*(V)/(31*R))**(2) * R",
            "(9)/(31**(2)*R) * V**(2)",
            "(9)/(52) * ((V)/((93)/(52) * R)) * (3)/(31) * V",
            "(9)/(961*R) * V**(2)",
            "(((9)/(961)) * V**(2))/(R)",
            "((9)/(961) * V**(2))/(R)",
            "((9)/(961)) * ((V**(2))/(R))",
            "((9)/(961)) * (V**(2))/(R)",
            "(9)/(961) * ((V**(2))/(R))",
            "(9)/(961) * (V**(2))/(R)",
            "(9)/(961) * V**(2)*R**( - 1)",
            "(9*V**(2))/((31**(2)) * (R))",
            "(9*V**(2))/((31**(2)) * R)",
            "(9*V**(2))/(31**(2)*R)",
            "(9*(V**(2)))/((31**(2)) * R)",
            "(9*(V**(2)))/(31**(2)*R)",
            "9*(V**(2))/(31**(2)*R)",
            "(9*V**(2))/(961*R)",
            "((9*V**(2))/(961))/(R)",
            "(9) * (V**(2))/(961*R)",
            "(9*(V)**(2))/(961*R)",
            "9*((V**(2))/(961*R))",
            "9*(V**(2))/(961*R)",
            "(9*(V**(2))/(961))/(R)",
            "9*((V**(2))/(961))/(R)",
            "9*(V**(2))/(R*31**(2))",
            "(((9*V)/(93))**(2))/(R)",
            "(9*V*V)/(961*R)",
            "9*V*(V)/(961*R)",
            "(V**(2)*3**(2))/(31**(2)*R)",
            "((V - (28*V)/(31))**(2))/(R)",
            "((V - (28*(V)/(31)))**(2))/(R)",
            "V**(2)*(9)/(31*31*R)",
            "(V**(2)*(9)/(961))/(R)",
            "((V*(((3)/(7))/(4 + ((3)/(7)))))**(2))/(R)",
            "(V - ((V*28)/(31))) * ((V*3)/(31*R))"
        ]
    },
    "l_1-l_0+((k)/(2*m*g))*(l_0-l_1)^(2)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "((1)/(2) * k*(l_0 - l_1)**(2) + (l_1) * m*g)/(m*g) - l_0",
            "((((1)/(2)) * k*(l_0 - l_1)**(2))/(m*g)) - (l_0 - l_1)",
            "(((1)/(2)) * k*(l_0 - l_1)**(2))/(m*g) - (l_0 - l_1)",
            "((1)/(2) * k*(l_0 - l_1)**(2))/(m*g) - (l_0 - l_1)",
            "((1)/(2) * k*(l_0 - l_1)**(2))/(m*g) - l_0 + l_1",
            "(1)/(2) * k*((l_0 - l_1)**(2))/(m*g) - (l_0 - l_1)",
            "(1)/(2) * k*((l_0 - l_1)**(2))/(m*g) - l_0 + l_1",
            "((1)/(2) * k*(l_0 - l_1)**(2) - m*g*l_0 + m*g*l_1)/(m*g)",
            "(((1)/(2) * k*(l_0 - l_1)**(2)))/(m*g) + l_1 - l_0",
            "((1)/(2) * k*(l_0 - l_1)**(2))/(m*g) + l_1 - l_0",
            "((1)/(2) * k*(l_0 - l_1)**(2) + m*g*(l_1 - l_0))/(m*g)",
            "((1)/(2) * k*(l_0 - l_1)**(2) + m*g*l_1)/(m*g) - l_0",
            "((((1)/(2)) * k*(l_1 - l_0)**(2))/(m*g)) - (l_0 - l_1)",
            "((1)/(2) * k*((l_1 - l_0)**(2))/(m*g)) - (l_0 - l_1)",
            "((1)/(2)) * ((k*(l_1 - l_0)**(2))/(m*g)) - (l_0 - l_1)",
            "((1)/(2) * k*(l_1 - l_0)**(2))/(m*g) + (l_1 - l_0)",
            "(1)/(2) * k*(l_1 - l_0) * (l_1 - l_0)/(m*g) + l_1 - l_0",
            "((1)/(2) * (l_0 - l_1)**(2) * k)/(m*g) - (l_0 - l_1)",
            "((1)/(2) * (l_0 - l_1)**(2) * k)/(m*g) + l_1 - l_0",
            "(1)/(2*m*g) * k*(l_0 - l_1)**(2) - (l_0 - l_1)",
            "(1)/(2*m*g) * k*(l_0 - l_1)**(2) - l_0 + l_1",
            "(1)/(2*m*g) * k*(l_0 - l_1)**(2) + l_1 - l_0",
            "(2*m*g*l_1 - 2*m*g*l_0 + k*(l_0 - l_1)**(2))/(2*m*g)",
            "((2*m*g*(l_1 - l_0)) + (k*(l_0 - l_1)**(2)))/(2*m*g)",
            "(k*(1)/(2) * (l_0 - l_1)**(2))/(m*g) - (l_0 - l_1)",
            "((k)/(2) * (l_0 - l_1)**(2) - m*g*(l_0 - l_1))/(m*g)",
            "((k)/(2) * (l_0 - l_1)**(2) + m*g*l_1)/(m*g) - l_0",
            "((k)/(2) * (l_1 - l_0)**(2))/(m*g) - l_0 + l_1",
            "((k)/(2*m*g)) * (l_0 - l_1)**(2) - l_0 + l_1",
            "(k)/(2*m*g) * (l_0 - l_1)**(2) - l_0 + l_1",
            "((k)/(2*m*g)) * (l_0 - l_1)**(2) + l_1 - l_0",
            "(k)/(2*m*g) * (l_0 - l_1)**(2) + l_1 - l_0",
            "(k)/(2*m*g) * (l_1 - l_0)**(2) + l_1 - l_0",
            "k*(l_0**(2) - 2*l_0*l_1 + l_1**(2))/(2*m*g) - (l_0 - l_1)",
            "(k*(l_0 - l_1)**(2))/(2*g*m) - (l_0 - l_1)",
            "(k*(l_0 - l_1)**(2))/(2*m*g) - (l_0 - l_1)",
            "(k*(l_0 - l_1)**(2))/(2*m*g) - l_0 + l_1",
            "k*((l_0 - l_1)**(2))/(2*m*g) - (l_0 - l_1)",
            "k*((l_0 - l_1)**(2))/(2*m*g) - l_0 + l_1",
            "((k*(l_0 - l_1)**(2))/(2*m*g) + l_1) - l_0",
            "(k*(l_0 - l_1)**(2))/(2*m*g) + (l_1 - l_0)",
            "(k*(l_0 - l_1)**(2))/(2*m*g) + l_1 - l_0",
            "k*((l_0 - l_1)**(2))/(2*m*g) + (l_1 - l_0)",
            "k*((l_0 - l_1)**(2))/(2*m*g) + l_1 - l_0",
            "(k*(l_0 - l_1)**(2))/(2*(m*g)) + (l_1 - l_0)",
            "k*((l_0 - l_1)**(2))/(2*(m*g)) + (l_1 - l_0)",
            "(k*(l_0 - l_1)**(2) + 2*m*g*(l_1 - l_0))/(2*m*g)",
            "((k*(l_0 - l_1)**(2))/(m))/(2*g) - (l_0 - l_1)",
            "((k*(l_0 - l_1)) * (l_0 - l_1))/(2*m*g) - l_0 + l_1",
            "(k*(l_1**(2) - 2*l_1*l_0 + l_0**(2)))/(2*m*g) - l_0 + l_1",
            "((k*(l_1 - l_0)**(2))/(2*m*g)) - (l_0 - l_1)",
            "(k*(l_1 - l_0)**(2))/(2*m*g) - (l_0 - l_1)",
            "(k*(l_1 - l_0)**(2))/(2*m*g) - l_0 + l_1",
            "(k*(l_1 - l_0)**(2))/(2*m*g) + (l_1 - l_0)",
            "(k*(l_1 - l_0)**(2))/(2*m*g) + l_1 - l_0",
            "((l_0 - l_1) * ((1)/(2) * k*(l_0 - l_1) - m*g))/(m*g)",
            "((l_0 - l_1)**(2) * (1)/(2) * k)/(m*g) - (l_0 - l_1)",
            "((l_0 - l_1)**(2) * k)/(2*m*g) - (l_0 - l_1)",
            "((l_0 - l_1)**(2) * k)/(2*m*g) - l_0 + l_1",
            "((l_0 - l_1)**(2) * k)/(2*m*g) + l_1 - l_0",
            "- l_0 + l_1 + (k*(l_0 - l_1)**(2))/(2*m*g)",
            "(l_0 - l_1) * (k*(l_0 - l_1)/(2*m*g) - 1)",
            "l_1 + (k*(l_0 - l_1)**(2))/(2*m*g) - l_0",
            "l_1 + k*(((l_0 - l_1)**(2))/(2*m*g)) - l_0",
            "l_1 + (k*(l_0 - l_1)**(2))/(2*(m*g)) - l_0",
            "l_1 + (k*(l_1 - l_0)**(2))/(2*m*g) - l_0",
            "(l_1 - l_0) + ((1)/(2)) * k*((l_0 - l_1)**(2))/(m*g)",
            "(l_1 - l_0) + (1)/(2) * k*((l_0 - l_1)**(2))/(m*g)",
            "l_1 - l_0 + ((1)/(2) * k*(l_0 - l_1)**(2))/(m*g)",
            "l_1 - l_0 + (1)/(2*m*g) * k*(l_0 - l_1)**(2)",
            "l_1 - l_0 + (1)/(2*m*g) * k*(l_1 - l_0)**(2)",
            "((l_1 - l_0)**(2) * (k))/(2*m*g) - l_0 + l_1",
            "((l_1 - l_0)**(2) * k)/(2*m*g) + l_1 - l_0",
            "((l_1 - l_0) * (2*m*g + k*(l_1 - l_0)))/(2*m*g)",
            "(l_1 - l_0) + (k)/(2*m*g) * (l_0 - l_1)**(2)",
            "l_1 - l_0 + (k)/(2*m*g) * (l_0 - l_1)**(2)",
            "(l_1 - l_0) + (k)/(2*m*g) * (l_1 - l_0)**(2)",
            "l_1 - l_0 + (k)/(2*m*g) * (l_1 - l_0)**(2)",
            "(l_1 - l_0) + ((k) * (l_0 - l_1)**(2))/(2*m*g)",
            "(l_1 - l_0) + (k*(l_0 - l_1)**(2))/(2*m*g)",
            "l_1 - l_0 + (k*(l_0 - l_1)**(2))/(2*m*g)",
            "l_1 - l_0 + k*((l_0 - l_1)**(2))/(2*m*g)",
            "l_1 - l_0 + (k*(l_1 - l_0)**(2))/(2*m*g)",
            "l_1 - l_0 + k*((l_1 - l_0)**(2))/(2*m*g)",
            "(l_1 - l_0) + (((l_1 - l_0)**(2) * k)/(2*m*g))",
            "(m*g*l_1 + ((1)/(2)) * k*(l_0 - l_1)**(2))/(m*g) - l_0",
            "(m*g*l_1 + (1)/(2) * k*(l_0 - l_1)**(2))/(m*g) - l_0"
        ]
    },
    "((q**(2))/(4*pi*epsilon_0*r**(2)))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(1)/(4*pi*epsilon_0) * q**(2)*r**( - 2)",
            "(1)/(4*pi) * q**(2)*(1)/(epsilon_0) * (1)/(r**(2))",
            "((1)/(4*pi)) * q**(2)*(epsilon_0)**( - 1) * (r)**( - 2)",
            "(1)/(4*pi) * q**(2)*epsilon_0**( - 1)*r**( - 2)",
            "((1)/(4) * q**(2)*epsilon_0**( - 1)*pi**( - 1)) * r**( - 2)",
            "(1)/(4) * (q**(2)*pi**( - 1)*epsilon_0**( - 1)) * r**( - 2)",
            "(1)/(4) * (q**(2)*pi**( - 1)*epsilon_0**( - 1))/(r**(2))",
            "(1)/(4) * q**(2)*pi**( - 1)*epsilon_0**( - 1)*r**( - 2)",
            "(1)/(4) * (q**(2))/(pi*epsilon_0) * r**( - 2)",
            "(1*q**(2))/(4*pi*epsilon_0) * r**( - 2)",
            "4**( - 1)*q**(2)*pi**( - 1)*epsilon_0**( - 1)*r**( - 2)",
            "- ( - 4*pi*epsilon_0*q**(2))/((4*pi*epsilon_0*r)**(2))",
            "4*pi*epsilon_0*q**(2)*(4*pi*epsilon_0*r)**( - 2)",
            "(4*q**(2)*pi*epsilon_0)/((4*pi*epsilon_0*r)**(2))",
            "((epsilon_0**( - 1)) * q**(2))/(4*pi*r**(2))",
            "(epsilon_0**( - 1)*q**(2))/(4*pi*r**(2))",
            "q**(2)*(1)/(4) * (1)/(pi) * (1)/(epsilon_0) * (1)/(r**(2))",
            "q**(2)*(1)/(4*pi*epsilon_0*r**(2))",
            "q**(2)*(4)**( - 1) * (pi)**( - 1) * (epsilon_0)**( - 1) * (r)**( - 2)",
            "q**(2)*4**( - 1)*pi**( - 1)*epsilon_0**( - 1)*r**( - 2)",
            "((q**(2))/(4*epsilon_0*pi)) * r**( - 2)",
            "(q**(2))/(4*epsilon_0*pi*r**(2))",
            "((q**(2))/(4*pi*epsilon_0)) * ((1)/(r**(2)))",
            "(q**(2)*(4*pi*epsilon_0)**( - 1)) * r**( - 2)",
            "q**(2)*(4*pi*epsilon_0)**( - 1) * r**( - 2)",
            "(q**(2)*4*pi*epsilon_0)/((4*pi*epsilon_0*r)**(2))",
            "q**(2)*4*pi*epsilon_0*(4*pi*epsilon_0*r)**( - 2)",
            "( - q**(2))/( - (4*pi*epsilon_0*r**(2)))",
            "((q**(2)))/(4*pi*epsilon_0*r**(2))",
            "((q**(2))/((4*pi*epsilon_0*r**(2))))",
            "((q**(2))/(4*pi*epsilon_0*r**(2)))",
            "(q**(2))/((4*pi*epsilon_0*r**(2)))",
            "(q**(2))/(4*pi*epsilon_0*r**(2))",
            "- ( - q**(2))/(4*pi*epsilon_0*r**(2))",
            "(((q)**(2))/(4*pi*epsilon_0)) * r**( - 2)",
            "((q**(2))/(4*pi*epsilon_0)) * r**( - 2)",
            "(q**(2))/((4*pi*(epsilon_0)) * r**(2))",
            "(q**(2))/((4*pi*epsilon_0) * r**(2))",
            "(q**(2))/(4*pi*(epsilon_0) * (r)**(2))",
            "(q**(2))/(4*pi*(epsilon_0) * (r**(2)))",
            "(q**(2))/(4*pi*(epsilon_0) * r**(2))",
            "(q**(2))/(4*pi*(epsilon_0)) * r**( - 2)",
            "(q**(2))/(4*pi*epsilon_0) * (r**( - 2))",
            "(q**(2))/(4*pi*epsilon_0) * r**( - 2)",
            "(q**(2))/(4*pi*epsilon_0) * r**(-2)",
            "(q**(2))/(4*pi*epsilon_0*(r**(2)))",
            "- ((q**(2))/(4*pi*epsilon_0) * ( - r**( - 2)))",
            "(q**(2))/((4) * (pi) * (epsilon_0) * (r**(2)))",
            "(q**(2))/(4*(pi) * (epsilon_0) * r**(2))",
            "(q**(2)) * ((4*pi*epsilon_0*r)**( - 2)) * (4*pi*epsilon_0)",
            "(q**(2))/(4*pi*r**(2)*epsilon_0)",
            "(q**(2))/(4*r**(2)*pi*epsilon_0)",
            "((q**(2)*pi*epsilon_0) * 4)/((4*pi*epsilon_0*r)**(2))",
            "q**(2)*r**( - 2)*(1)/(4) * (1)/(pi) * (1)/(epsilon_0)",
            "((q**(2)*r**( - 2))/(4*pi*epsilon_0))",
            "(q**(2)*r**( - 2))/(4*pi*epsilon_0)",
            "(q**(2)*r**(-2))/(4*pi*epsilon_0)",
            "q**(2)*(r**( - 2))/(4*pi*epsilon_0)",
            "r**( - 2)*(q**(2))/(4*pi*epsilon_0)"
        ]
    },
    "a*t*e**(beta*t)*(2 + beta*t)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "2*a*e**(beta*t)*t + a*e**(beta*t)*t**(2)*beta",
            "2*a*e**(beta*t)*t + beta*e**(beta*t)*a*t**(2)",
            "(2*a*t + a*t**(2)*beta) * e**(beta*t)",
            "(2*a*t + beta*a*t**(2)) * e**(beta*t)",
            "2*a*t*e**(beta*t) + a*beta*t**(2)*e**(beta*t)",
            "(2*a*t) * e**(beta*t) + (a*t**(2)) * (beta*e**(beta*t))",
            "2*a*t*e**(beta*t) + a*t**(2)*(beta) * e**(beta*t)",
            "2*a*t*e**(beta*t) + a*t**(2)*(beta*e**(beta*t))",
            "2*a*t*e**(beta*t) + a*t**(2)*beta*e**(beta*t)",
            "2*a*t*(e**(beta*t)) + (a*t**(2)) * (e**(beta*t)) * (beta)",
            "2*a*t*e**(beta*t) + beta*a*t**(2)*e**(beta*t)",
            "2*a*t*e**((beta) * (t)) + beta*e**((beta) * (t))*a*t**(2)",
            "2*a*t*e**(beta*t) + beta*e**(beta*t)*a*t**(2)",
            "2*a*t*e**(t*beta) + a*beta*t**(2)*e**(beta*t)",
            "2*t*a*e**(beta*t) + t**(2)*a*beta*e**(beta*t)",
            "(2 + t*beta) * a*t*e**(beta*t)",
            "a*(2*t*e**(beta*t) + e**(beta*t)*beta*(t**(2)))",
            "a*(2*t*e**(beta*t) + e**(beta*t)*beta*t**(2))",
            "a*beta*e**(beta*t)*t**(2) + 2*a*t*e**(beta*t)",
            "a*beta*t**(2)*e**(beta*t) + 2*a*t*e**(beta*t)",
            "a*e**(beta*t)*(2*t + beta*t**(2))",
            "(a*e**(beta*t)) * (beta*t**(2) + 2*t)",
            "a*e**(beta*t)*(beta*t**(2) + 2*t)",
            "a*e**(beta*t)*t*(beta*t + 2)",
            "(a*t**(2)*beta + 2*a*t) * e**(beta*t)",
            "(a*t**(2)) * (beta*e**(beta*t)) + (2*a*t) * (e**(beta*t))",
            "a*t**(2)*(beta*e**(beta*t)) + 2*a*t*e**(beta*t)",
            "a*t**(2)*beta*e**(beta*t) + 2*a*t*e**(beta*t)",
            "(a*t**(2)*beta*e**(beta*t)) + (2*e**(beta*t)*a*t)",
            "a*t**(2)*beta*e**(beta*t) + 2*e**(beta*t)*a*t",
            "a*(t**(2)*beta*e**(beta*t) + 2*t*e**(beta*t))",
            "a*t**(2)*beta*e**(beta*t) + a*2*t*e**(beta*t)",
            "(a*t**(2)) * (beta*e**(beta*t)) + (e**(beta*t)) * (2*a*t)",
            "a*t**(2)*(beta*e**(beta*t)) + (e**(beta*t)) * (2*a*t)",
            "a*t**(2)*(beta*e**(beta*t)) + e**(beta*t)*(2*a*t)",
            "a*t*((beta*t + 2) * e**(beta*t))",
            "a*t*((beta*t) + 2) * e**(beta*t)",
            "a*t*(beta*t + 2) * e**(beta*t)",
            "(a*t*e**(beta*t)) * (2 + beta*t)",
            "a*t*e**(beta*t)*(2 + (beta*t))",
            "a*t*e**(beta*t)*(2 + beta*t)",
            "a*t*e**(beta*t)*(2 + t*beta)",
            "a*t*e**(beta*t)*((beta*t) + 2)",
            "a*t*e**(beta*t)*(beta*t + 2)",
            "(a*t*e**(beta*t)) * (t*beta + 2)",
            "a*t*e**(beta*t)*(t*beta + 2)",
            "a*t*e**(t*beta)*(2 + t*beta)",
            "a*t*t*beta*e**(beta*t) + 2*a*t*e**(beta*t)",
            "beta*a*t**(2)*e**(beta*t) + 2*a*t*e**(beta*t)",
            "(e**(beta*t)) * (2*a*t + a*beta*t**(2))",
            "e**(beta*t)*(2*a*t + a*beta*t**(2))",
            "e**(beta*t)*(2*a*t + a*t**(2)*beta)",
            "(e**(beta*t)) * (2*a*t) + (a*t**(2)) * (beta*e**(beta*t))",
            "e**(beta*t)*(2*a*t + beta*(a*t**(2)))",
            "e**(beta*t)*(2*a*t + beta*a*t**(2))",
            "e**(beta*t)*(2*a*t) + beta*e**(beta*t)*(a*t**(2))",
            "e**(beta*t)*(a*beta*t**(2) + 2*a*t)",
            "e**(beta*t)*(a*t**(2)*beta + 2*a*t)",
            "e**(beta*t)*a*t*(beta*t + 2)",
            "e**(beta*t)*a*t*(t*beta + 2)",
            "(e**(beta*t)) * (beta*a*t**(2) + 2*a*t)",
            "e**(beta*t)*(beta*a*t**(2) + 2*a*t)",
            "t**(2)*a*beta*e**(beta*t) + 2*a*t*e**(beta*t)",
            "t*e**(beta*t)*(2*a + a*beta*t)"
        ]
    },
    "(a**(2))/(3) * sqrt(b**(2) - (a**(2))/(4))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(1)/(3) * (a**(2)) * (b**(2) - (1)/(4) * (a**(2)))**((1)/(2))",
            "(1)/(3) * a**(2)*(b**(2) - (1)/(4) * a**(2))**((1)/(2))",
            "(1)/(3) * a**(2)*(b**(2) - ((a)/(2))**(2))**((1)/(2))",
            "(1)/(3) * a**(2)*(b**(2) - ((a**(2))/(4)))**((1)/(2))",
            "(1)/(3) * a**(2)*(b**(2) - (a**(2))/(4))**((1)/(2))",
            "((1)/(3)) * a**(2)*sqrt(b**(2) - (1)/(4) * a**(2))",
            "(1)/(3) * a**(2)*(sqrt(b**(2) - (1)/(4) * a**(2)))",
            "(1)/(3) * a**(2)*sqrt((b**(2) - (1)/(4) * a**(2)))",
            "(1)/(3) * a**(2)*sqrt(b**(2) - (1)/(4) * (a**(2)))",
            "(1)/(3) * a**(2)*sqrt(b**(2) - (1)/(4) * a**(2))",
            "(1)/(3) * a**(2)*(sqrt(b**(2) - ((a)/(2))**(2)))",
            "(1)/(3) * a**(2)*sqrt(b**(2) - ((a)/(2))**(2))",
            "((1)/(3)) * (a**(2)) * (sqrt((b**(2)) - (a**(2))/(4)))",
            "((1)/(3)) * a**(2)*(sqrt(b**(2) - (a**(2))/(4)))",
            "(1)/(3) * (a**(2)*(sqrt(b**(2) - (a**(2))/(4))))",
            "(1)/(3) * (a**(2)*sqrt(b**(2) - ((a**(2))/(4))))",
            "(1)/(3) * a**(2)*(sqrt(b**(2) - (a**(2))/(4)))",
            "(1)/(3) * a**(2)*sqrt(b**(2) - (a**(2))/(4))",
            "((1)/(3)) * (a**(2)) * sqrt((b + ((a)/(2))) * (b - ((a)/(2))))",
            "(1)/(3) * a**(2)*sqrt((b - (a)/(2)) * (b + (a)/(2)))",
            "(1)/(3) * sqrt(b**(2) - (a**(2))/(4)) * a**(2)",
            "(1)/(6) * a**(2)*sqrt(4*b**(2) - a**(2))",
            "(a**(2))/(3) * (b**(2) - (1)/(4) * a**(2))**((1)/(2))",
            "(a**(2))/(3) * (b**(2) - ((a**(2))/(4)))**((1)/(2))",
            "((a**(2))/(3)) * sqrt(b**(2) - ((a**(2))/(4)))",
            "((a**(2))/(3)) * sqrt(b**(2) - (a**(2))/(4))",
            "(a**(2))/(3) * (sqrt(b**(2) - (a**(2))/(4)))",
            "(a**(2))/(3) * sqrt((b**(2) - (a**(2))/(4)))",
            "(a**(2))/(3) * sqrt(b**(2) - (a**(2))/(4))",
            "a**(2)*((4*b**(2) - a**(2))**((1)/(2)))/(6)",
            "(a**(2)*(b**(2) - (a**(2))/(4))**((1)/(2)))/(3)",
            "a**(2)*((b**(2) - (a**(2))/(4))**((1)/(2)))/(3)",
            "(a**(2)*sqrt(4*b**(2) - a**(2)))/(6)",
            "(a**(2)*sqrt(b**(2) - (1)/(4) * a**(2)))/(3)",
            "a**(2)*sqrt(b**(2) - ((a)/(2))**(2)) * (1)/(3)",
            "(a**(2)*sqrt(b**(2) - ((a)/(2))**(2)))/(3)",
            "a**(2)*(sqrt(b**(2) - ((a)/(2))**(2)))/(3)",
            "(a**(2)*(sqrt(b**(2) - ((a**(2))/(4)))))/(3)",
            "(a**(2)*sqrt(b**(2) - ((a**(2))/(4))))/(3)",
            "(a**(2)*sqrt(b**(2) - (a**(2))/(4)))/(3)",
            "a**(2)*(sqrt(b**(2) - (a**(2))/(4)))/(3)",
            "(sqrt(b**(2) - ((1)/(2) * a)**(2)) * a**(2))/(3)",
            "((sqrt(b**(2) - (1)/(4) * a**(2)) * a**(2))/(3))",
            "(sqrt(b**(2) - ((a)/(2))**(2)) * a**(2))/(3)",
            "sqrt(b**(2) - (a**(2))/(4)) * (a**(2))/(3)"
        ]
    },
    "V == (a**(2))/(3) * sqrt(b**(2) - (a**(2))/(4))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "V == (1)/(3) * a**(2)*(b**(2) - (1)/(4) * a**(2))**((1)/(2))",
            "V == (1)/(3) * a**(2)*(b**(2) - (a**(2))/(4))**((1)/(2))",
            "V == (1)/(3) * a**(2)*sqrt(b**(2) - ((1)/(2) * a)**(2))",
            "V == (1)/(3) * a**(2)*sqrt(b**(2) - (1)/(4) * a**(2))",
            "V == (1)/(3) * (a**(2)) * (sqrt(b**(2) - (a**(2))/(4)))",
            "V == (1)/(3) * (a**(2)) * sqrt(b**(2) - (a**(2))/(4))",
            "V == (1)/(3) * (a**(2)*sqrt(b**(2) - (a**(2))/(4)))",
            "V == (1)/(3) * a**(2)*(sqrt(b**(2) - (a**(2))/(4)))",
            "V == (1)/(3) * a**(2)*sqrt(b**(2) - ((a**(2))/(4)))",
            "V == (1)/(3) * a**(2)*sqrt(b**(2) - (a**(2))/(4))",
            "V == ((a**(2))/(3)) * (sqrt(b**(2) - ((a**(2))/(4))))",
            "V == (a**(2))/(3) * sqrt(b**(2) - (a**(2))/(4))",
            "V == a**(2)*((b**(2) - (a**(2))/(4))**((1)/(2)))/(3)",
            "V == (a**(2)*sqrt(4*b**(2) - a**(2)))/(6)",
            "V == (a**(2)) * (sqrt(b**(2) - ((1)/(2) * a)**(2)))/(3)",
            "V == ((a**(2)) * sqrt(b**(2) - (1)/(4) * a**(2)))/(3)",
            "V == (a**(2)*sqrt(b**(2) - ((1)/(4) * a**(2))))/(3)",
            "V == (a**(2)*sqrt(b**(2) - (1)/(4) * a**(2)))/(3)",
            "V == a**(2)*(sqrt(b**(2) - (1)/(4) * a**(2)))/(3)",
            "V == (a**(2)*sqrt(b**(2) - ((a)/(2))**(2)))/(3)",
            "V == a**(2)*(sqrt(b**(2) - ((a)/(2))**(2)))/(3)",
            "V == ((a**(2)) * (sqrt((b**(2)) - (a**(2))/(4)))/(3))",
            "V == (a**(2)*(sqrt(b**(2) - (a**(2))/(4))))/(3)",
            "V == (a**(2)*sqrt((b**(2) - (a**(2))/(4))))/(3)",
            "V == (a**(2)*sqrt(b**(2) - ((a**(2))/(4))))/(3)",
            "V == (a**(2)*sqrt(b**(2) - (a**(2))/(4)))/(3)",
            "V == a**(2)*(sqrt(b**(2) - (a**(2))/(4)))/(3)",
            "V == (a**(2)*sqrt((b + (a)/(2)) * (b - (a)/(2))))/(3)",
            "V == (sqrt(b**(2) - (1)/(4) * a**(2)) * a**(2))/(3)"
        ]
    },
    "h*rho*g*DeltaV": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "DeltaV * g*h*rho",
            "DeltaV * g*rho*h",
            "DeltaV * h*rho*g",
            "(DeltaV) * (rho) * (g) * (h)",
            "(DeltaV) * (rho) * g*h",
            "DeltaV * rho*g*h",
            "DeltaV * rho*h*g",
            "g*DeltaV * rho*h",
            "(g*h*rho*DeltaV)",
            "g*rho*DeltaV * h",
            "h*DeltaV * rho*g",
            "h*g*DeltaV * rho",
            "h*g*rho*DeltaV",
            "h*(rho) * (DeltaV) * g",
            "h*rho*g*(DeltaV)",
            "h*rho*g*DeltaV",
            "(rho*DeltaV) * g*h",
            "rho*(DeltaV) * g*h",
            "rho*DeltaV * g*h",
            "rho*DeltaV*g*h",
            "rho*DeltaV * h*g",
            "(rho) * g*(DeltaV) * h",
            "rho*g*(DeltaV) * h",
            "rho*g*DeltaV * h",
            "(rho) * g*h*(DeltaV)",
            "(rho*g*h*DeltaV)",
            "rho*(g) * (h) * (DeltaV)",
            "rho*(g) * (h) * DeltaV",
            "rho*g*h*DeltaV",
            "rho*h*DeltaV * g",
            "(rho) * (h) * (g) * DeltaV",
            "rho*h*g*DeltaV"
        ]
    },
    "W == h*rho*g*DeltaV": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "rho*DeltaV * h*g == W",
            "W == DeltaV*g * rho*h",
            "W == DeltaV*g*rho*h",
            "W == DeltaV * h*g*rho",
            "W == DeltaV * h*rho*g",
            "W == DeltaV * (rho*g*h)",
            "W == DeltaV * rho*g*h",
            "W == DeltaV*rho*g*h",
            "W == DeltaV * rho*h*g",
            "W == g*rho*DeltaV*h",
            "W == h*g*rho*DeltaV",
            "W == h*rho*g*DeltaV",
            "W == rho*DeltaV * g*h",
            "W == rho*DeltaV*g * h",
            "W == rho*DeltaV*g*h",
            "W == rho*g*DeltaV * h",
            "W == rho*g*DeltaV*h",
            "W == (rho) * g*h*(DeltaV)",
            "W == rho*g*h*DeltaV",
            "W == rho*h*g*DeltaV"
        ]
    },
    "((1)/(2))*(125*beta-65*alpha)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "10*(4*alpha - beta) + 435*((beta - alpha)/(6))",
            "((1)/(2)) * (125*beta - 65*alpha)",
            "(1)/(2) * (125*beta - 65*alpha)",
            "((125)/(2) * beta) - ((65)/(2) * alpha)",
            "((125)/(2)) * beta - ((65)/(2)) * alpha",
            "((125)/(2)) * beta - (65)/(2) * alpha",
            "(125)/(2) * (beta) - (65)/(2) * (alpha)",
            "(125)/(2) * beta - (65)/(2) * alpha",
            "(125)/(2) * (beta - alpha) + 30*alpha",
            "125*(beta)/(2) - (65)/(2) * alpha",
            "((125*beta)/(2)) - (65*alpha)/(2)",
            "(125*beta)/(2) - (65*alpha)/(2)",
            "125*(beta)/(2) - 65*(alpha)/(2)",
            "(125*beta - 65*alpha)/(2)",
            "(125*(beta) - 65*(alpha))/(2)",
            "(1)/(2) * ( - 65*alpha + 125*beta)",
            "- (1)/(2) * (65*alpha - 125*beta)",
            "15*( - (13)/(6) * alpha + (25)/(6) * beta)",
            "- 15*(13*alpha - 25*beta)/(6)",
            "15*(( - 13*alpha + 25*beta)/(6))",
            "15*((2)/(3) * (4*alpha - beta) + (29)/(6) * (beta - alpha))",
            "15*((2)/(3) * (4*alpha - beta) + 29*(beta - alpha)/(6))",
            "15*( - (2)/(3) * beta + (8)/(3) * alpha + (29)/(6) * (beta - alpha))",
            "15*((2*(4*alpha - beta))/(3) + 29*((beta - alpha)/(6)))",
            "15*(2*((4*alpha - beta)/(3)) + 29*((beta - alpha)/(6)))",
            "15*(2*(4*alpha - beta)/(3) + 29*(beta - alpha)/(6))",
            "15*((25)/(6) * beta - (13)/(6) * alpha)",
            "15*((25*beta - 13*alpha)/(6))",
            "15*((25*beta)/(6) - (13*alpha)/(6))",
            "15*(25*(beta)/(6) - 13*(alpha)/(6))",
            "15*(29*(beta - alpha)/(6) + 2*(4*alpha - beta)/(3))",
            "15*(2*alpha + (25)/(6) * (beta - alpha))",
            "15*(2*alpha + (25*(beta - alpha))/(6))",
            "15*(2*alpha + 25*(beta - alpha)/(6))",
            "15*(2*alpha - 2*(beta - alpha)/(3) + 29*(beta - alpha)/(6))",
            "15*(2*(alpha - ((beta - alpha))/(3)) + (29)/(6) * (beta - alpha))",
            "15*(2*(alpha - (beta - alpha)/(3)) + 29*((beta - alpha)/(6)))",
            "15*(2*(alpha - (beta - alpha)/(3)) + 29*(beta - alpha)/(6))",
            "15*(2*(beta - 8*(beta - alpha)/(6)) + 29*(beta - alpha)/(6))",
            "(15)/(6) * (25*beta - 13*alpha)",
            "15*((8)/(3) * alpha - (2)/(3) * beta + 29*(beta - alpha)/(6))",
            "15*((8*alpha - 2*beta)/(3) + (29)/(6) * (beta - alpha))",
            "15*((8*alpha - 2*beta)/(3) + (29*beta - 29*alpha)/(6))",
            "15*((8*alpha - 2*beta)/(3) + (29*(beta - alpha))/(6))",
            "15*((8*alpha - 2*beta)/(3) + (29*(beta - alpha)/(6)))",
            "15*((8*alpha - 2*beta)/(3) + 29*((beta - alpha)/(6)))",
            "15*((8*alpha - 2*beta)/(3) + 29*(beta - alpha)/(6))",
            "15*(alpha + beta + (19)/(6) * (beta - alpha))",
            "(15) * (alpha + beta + (19*(beta - alpha)/(6)))",
            "15*(alpha + beta + 19*(beta - alpha)/(6))",
            "( - 195*alpha + 375*beta)/(6)",
            "(30)/(2) * ((2*(alpha - (beta - alpha)/(3))) + (29)/(6) * (beta - alpha))",
            "30*((25)/(12) * beta - (13)/(12) * alpha)",
            "30*(4*(alpha)/(3) - (beta)/(3)) + (435)/(6) * (beta - alpha)",
            "30*alpha + (125)/(2) * (beta - alpha)",
            "30*(alpha) + (125)/(2) * (beta - (alpha))",
            "30*alpha + (125*(beta - alpha))/(2)",
            "30*alpha + (375)/(6) * (beta - alpha)",
            "30*alpha + (375*(beta - alpha))/(6)",
            "30*alpha + 375*(((beta - alpha))/(6))",
            "30*alpha + 375*((beta - alpha)/(6))",
            "30*alpha + 375*(beta - alpha)/(6)",
            "30*beta + (195)/(6) * (beta - alpha)",
            "30*beta - 40*(beta - alpha) + (145)/(2) * (beta - alpha)",
            "30*beta + (65)/(2) * (beta - alpha)",
            "- (325)/(10) * alpha + 625*(beta)/(10)",
            "(375)/(6) * beta - (195)/(6) * alpha",
            "(375)/(6) * beta - (65)/(2) * alpha",
            "(375*beta - 195*alpha)/(6)",
            "(375*beta)/(6) - (65*alpha)/(2)",
            "(40 - ((435)/(6))) * alpha + (((435)/(6)) - 10) * beta",
            "40*alpha - 10*beta + (435)/(6) * (beta - alpha)",
            "(5)/(2) * ( - 13*alpha + 25*beta)",
            "((5)/(2)) * (25*beta - 13*alpha)",
            "(5)/(2) * (25*beta - 13*alpha)",
            "((5)/(2)) * (25*(beta) - 13*(alpha))",
            "(5)/(2) * (25*(beta) - 13*(alpha))",
            "5*((25)/(2) * beta - (13)/(2) * alpha)",
            "5*((25*beta - 13*alpha)/(2))",
            "5*(25*beta - 13*alpha)/(2)",
            "(625)/(10) * beta - (325)/(10) * alpha",
            "( - (65)/(2)) * alpha + ((125)/(2)) * beta",
            "( - 65)/(2) * alpha + (125)/(2) * beta",
            "- (65)/(2) * (alpha) + ((125)/(2)) * beta",
            "- (65)/(2) * (alpha) + (125)/(2) * (beta)",
            "- (65)/(2) * alpha + (125)/(2) * beta",
            "( - 65*alpha + 125*beta)/(2)",
            "(-65*alpha)/(2) + (125)/(2) * beta",
            "( - 65*alpha)/(2) + (125*beta)/(2)",
            "- 65*(alpha)/(2) + 125*(beta)/(2)",
            "beta*(375)/(6) - alpha*(195)/(6)"
        ]
    },
    "b*(N+1) +((1)/(2))*N*a*(N+1)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "((1)/(2)) * a*N**(2) + ((1)/(2)) * (a + 2*b) * N + b",
            "(1)/(2) * a*N**(2) + (1)/(2) * a*N + b*(N + 1)",
            "(1)/(2) * a*N**(2) + (1)/(2) * a*N + b*N + b",
            "(1)/(2) * a*N**(2) + (1)/(2) * a*N + N*b + b",
            "(1)/(2) * (a*N**(2) + (a + 2*b) * N + 2*b)",
            "(1)/(2) * (a*N + 2*b) * (N + 1)",
            "(1)/(2) * a*N**(2) + b*N + (1)/(2) * a*N + b",
            "(1)/(2) * (a*N + a*N**(2)) + b*N + b",
            "((1)/(2) * a*N + b) * (N + 1)",
            "((1)/(2)) * a*N*(N + 1) + b*(N + 1)",
            "(1)/(2) * a*N*(N + 1) + b*(N + 1)",
            "((1)/(2) * a*N*(N + 1) + b*N) + b",
            "(1)/(2) * a*N*(N + 1) + b*N + b",
            "(1)/(2) * a*N*(N + 1) + (N + 1) * b",
            "((1)/(2)) * (N + 1) * (2*b + a*N)",
            "(1)/(2) * (N + 1) * (2*b + a*N)",
            "((1)/(2)) * (N + 1) * (2*b + N*a)",
            "(1)/(2) * (N + 1) * (2*b + (N) * a)",
            "(1)/(2) * (N + 1) * (2*b + N*a)",
            "(1)/(2) * (N + 1) * (a*N + 2*b)",
            "(1)/(2) * (N + 1) * (N*a + 2*b)",
            "(1)/(2) * N*a*(N + 1) + N*b + b",
            "(1)/(2) * N*(a*N + a + 2*b) + b",
            "(1)/(2) * N*a + N*b + (1)/(2) * N**(2)*a + b",
            "(1)/(2) * N*(N + 1) * a + b*(N + 1)",
            "(1)/(2) * (N) * (N + 1) * (a) + (N + 1) * b",
            "(1)/(2) * N*(N + 1) * a + (N + 1) * b",
            "(1*b + a*N + b) * (N + 1) * (1)/(2)",
            "(1 + N) * b + (1)/(2) * a*N*(1 + N)",
            "(2*b + a*N) * (N + 1)/(2)",
            "(2*b*N + 2*b + a*N**(2) + a*N)/(2)",
            "(2*b + N*a) * (N + 1)/(2)",
            "a*((1)/(2) * N*(N + 1)) + b*(N + 1)",
            "a*(1)/(2) * N*(N + 1) + b*(N + 1)",
            "(a)/(2) * N*(1 + N) + b*(1 + N)",
            "(a)/(2) * (N + 1) * (N) + (N + 1) * b",
            "(a)/(2) * N**(2) + (a + 2*b)/(2) * N + b",
            "(a)/(2) * N**(2) + ((a)/(2) + b) * N + b",
            "(a)/(2) * N**(2) + (a)/(2) * N + b*(N + 1)",
            "(a)/(2) * N**(2) + (a)/(2) * N + b*N + b",
            "(a)/(2) * N**(2) + N*((a)/(2) + b) + b",
            "(a)/(2) * (N**(2) + N) + b*(N + 1)",
            "((a)/(2) * N + b) * (N + 1)",
            "(a)/(2) * N*(N + 1) + b*(1 + N)",
            "(a)/(2) * (N) * (N + 1) + b*(N + 1)",
            "(a)/(2) * (N*(N + 1)) + b*(N + 1)",
            "(a)/(2) * N*(N + 1) + b*(N + 1)",
            "(a)/(2) * (N) * (N + 1) + b*N + b",
            "(a)/(2) * N*(N + 1) + b*N + b",
            "(a)/(2) * (N) * (N + 1) + (N + 1) * b",
            "(a)/(2) * N*(N + 1) + (N + 1) * b",
            "(a)/(2) * N*(N + 1) + N*b + b",
            "a*(N + 1)/(2) * N + (N + 1) * b",
            "a*((N + 1) * (N))/(2) + b*(N + 1)",
            "(a*N**(2))/(2) + ((a)/(2) + b) * N + b",
            "a*(N**(2))/(2) + ((a)/(2) + b) * N + b",
            "a*(N**(2))/(2) + a*(N)/(2) + b*N + b",
            "(a*N**(2) + (2*b + a) * N + 2*b)/(2)",
            "(a*N**(2))/(2) + b*N + (a*N)/(2) + b",
            "(a*N**(2) + 2*b*N + a*N + 2*b)/(2)",
            "(a*N**(2) + (a + 2*b) * N + 2*b)/(2)",
            "(a*N**(2) + a*N)/(2) + b + b*N",
            "(a*N**(2) + a*N + 2*b*N + 2*b)/(2)",
            "((a*N)/(2) + b) * (N + 1)",
            "(a*(N)/(2) + b) * (N + 1)",
            "((a*N + 2*b) * (N + 1))/(2)",
            "(a*N + 2*b) * (N + 1)/(2)",
            "a*(N)/(2) + b*N + a*(N**(2))/(2) + b",
            "a*(N + 2) * (N + 1)/(2) + (N + 1) * (b - a)",
            "a*(N)/(2) * (N + 1) + b*(1 + N)",
            "a*((N)/(2) * (N + 1)) + b*(N + 1)",
            "a*((N)/(2)) * (N + 1) + b*(N + 1)",
            "a*(N)/(2) * (N + 1) + b*(N + 1)",
            "(a*N)/(2) * (N + 1) + b*N + b",
            "a*(N)/(2) * (N + 1) + b*N + b",
            "(a*N)/(2) * (N + 1) + (N + 1) * b",
            "a*((N)/(2) * (N + 1)) + (N + 1) * b",
            "a*(N)/(2) * (N + 1) + (N + 1) * b",
            "a*(N)/(2) * (N + 1) + N*b + b",
            "(a*N*(N + 1))/(2) + b*(N + 1)",
            "a*((N*(N + 1))/(2)) + b*(N + 1)",
            "a*(N) * (N + 1)/(2) + b*(N + 1)",
            "a*(N*(N + 1))/(2) + b*(N + 1)",
            "a*N*(N + 1)/(2) + b*(N + 1)",
            "(a*N*(N + 1))/(2) + b*N + b",
            "a*N*(N + 1)/(2) + b*N + b",
            "(a*N*(N + 1))/(2) + (N + 1) * b",
            "(a*N*(N + 1)/(2)) + (N + 1) * b",
            "a*(N) * (N + 1)/(2) + (N + 1) * b",
            "a*N*(N + 1)/(2) + (N + 1) * b",
            "a*(N*(N + 1))/(2) + N*b + b",
            "b + (a)/(2) * N*(N + 1) + b*N",
            "b + a*(N**(2))/(2) + a*(N)/(2) + b*N",
            "(b + (a*N)/(2)) * (N + 1)",
            "(b + a*(N)/(2)) * (N + 1)",
            "b + (a*N)/(2) * (N + 1) + b*N",
            "b*(N + 1) + a*((1)/(2) * N*(N + 1))",
            "b*(N + 1) + (a)/(2) * (N**(2) + N)",
            "b*(N + 1) + (a)/(2) * N*(N + 1)",
            "b*(N + 1) + a*(N)/(2) * (1 + N)",
            "b*(N + 1) + a*(N)/(2) * (N + 1)",
            "b*(N + 1) + (a*N*(N + 1))/(2)",
            "b*(N + 1) + a*N*(N + 1)/(2)",
            "b*N + (a*N**(2))/(2) + b + (a*N)/(2)",
            "b*N + b + a*(N**(2))/(2) + a*(N)/(2)",
            "b*N + b + ((N*a) * (N + 1))/(2)",
            "b*N + b + (N*a*(N + 1))/(2)",
            "(N + 1) * ((1)/(2) * a*N + b)",
            "(N + 1)/(2) * (2*b + a*(N))",
            "(N + 1)/(2) * (2*b + a*N)",
            "((N + 1))/(2) * (2*b + N*a)",
            "((N + 1)/(2)) * (2*b + (N) * a)",
            "((N + 1)/(2)) * (2*b + N*a)",
            "(N + 1)/(2) * (2*b + ((N) * a))",
            "(N + 1)/(2) * (2*b + (N) * a)",
            "(N + 1)/(2) * (2*b + N*a)",
            "(N + 1)/(2) * (a*N + 2*b)",
            "((N + 1) * (2*b + a*N))/(2)",
            "(N + 1) * (2*b + a*N)/(2)",
            "(N + 1)/(2) * (N*a + 2*b)",
            "(N + 1) * ((a)/(2) * (N) + b)",
            "(N + 1) * ((a)/(2) * N + b)",
            "(N + 1) * ((a*N)/(2) + b)",
            "(N + 1) * (a*(N)/(2) + b)",
            "(N + 1) * (a*N + 2*b)/(2)",
            "(N + 1) * (b + ((1)/(2)) * a*N)",
            "(N + 1) * (b + (1)/(2) * a*N)",
            "(N + 1) * b + (1)/(2) * a*N*(N + 1)",
            "(N + 1) * b + (1)/(2) * N*(N + 1) * a",
            "(N + 1) * (b + (a)/(2) * N)",
            "(N + 1) * b + (a)/(2) * (N) * (N + 1)",
            "(N + 1) * b + (a)/(2) * N*(N + 1)",
            "(N + 1) * b + a*(N + 1) * (N)/(2)",
            "(N + 1) * (b + (a*N)/(2))",
            "(N + 1) * (b + a*(N)/(2))",
            "(N + 1) * b + a*(N)/(2) * (N + 1)",
            "(N + 1) * b + (a*N*(N + 1))/(2)",
            "(N + 1) * b + a*(N) * (N + 1)/(2)",
            "(N + 1) * b + ((N**(2))/(2) + (N)/(2)) * a",
            "(N + 1) * b + (N**(2) + N)/(2) * a",
            "(N + 1) * (b + N*(a)/(2))",
            "(N + 1) * b + (N*(N + 1))/(2) * a",
            "(N + 1) * b + N*(N + 1)/(2) * a",
            "(N + 1) * ((N*(a)/(2)) + b)",
            "(N + 1) * ((N*a)/(2) + b)",
            "((N + 1) * N*a)/(2) + b*(N + 1)",
            "(N + 1) * N*(a)/(2) + b*N + b",
            "((N)/(2)) * (2*(a + b) + a*(N - 1)) + b",
            "(N)/(2) * (2*(a + b) + (N - 1) * (a)) + b",
            "(N)/(2) * (2*(a + b) + (N - 1) * a) + b",
            "(N)/(2) * (2*b + (N + 1) * a) + b",
            "((N**(2))/(2) + (N)/(2)) * a + (N + 1) * b",
            "(N)/(2) * (a*N + a + 2*b) + b",
            "(N)/(2) * ((N + 1) * a) + (N + 1) * b",
            "(N)/(2) * (N + 1) * a + (N + 1) * b",
            "(N**(2) + N)/(2) * a + (N + 1) * b",
            "(N*(a + 2*b + a*N))/(2) + b",
            "(N) * (((a)/(2)) * (N + 1) + b) + b",
            "(N*a)/(2) * (N + 1) + b*(N + 1)",
            "N*(a)/(2) + (N + 1) * b + N**(2)*(a)/(2)",
            "(N*a*(N + 1))/(2) + b*(N + 1)",
            "(N*a) * (N + 1)/(2) + (N + 1) * b",
            "N*a + (N - 1) * N*(a)/(2) + (N + 1) * b",
            "N*((a*N + 2*b + a)/(2)) + b",
            "N*(b + (a)/(2) * (1 + N)) + b",
            "N*b + b + (1)/(2) * a*N**(2) + (1)/(2) * a*N",
            "N*b + b + (a*N**(2) + a*N)/(2)",
            "(N*(N + 1))/(2) * a + (N + 1) * b",
            "(N*(N + 1) * a)/(2) + (N + 1) * b"
        ]
    },
    "((a*(1-r**(2*N+2)))/((1-r**(2))))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "1*a*(1 - r**(2*N + 2))/(1 - r**(2))",
            "(1 - r**(2*N + 2))/(1 - r**(2)) * a",
            "((1 - r**(2*N + 2)) * a)/(1 - r**(2))",
            "a*((1)/(1 - r**(2)) * (r**(2)*(1 - r**(2*N)))) + a",
            "a*(1 - r**(2*(1 + N)))/(1 - r**(2))",
            "(a)/(1 - r**(2)) * (1 - r**(2*(N + 1)))",
            "a*(1 + ((r**(2)*(1 - r**(2*N)))/(1 - r**(2))))",
            "a*(1 + (r**(2)*(1 - r**(2*N)))/(1 - r**(2)))",
            "(a*(1 - (r**(2))**(N + 1)))/(1 - r**(2))",
            "(a*(1 - r**(2*(N + 1))))/(1 - r**(2))",
            "(a*(1 - r**(2*(N + 1)))/(1 - r**(2)))",
            "a*((1 - r**(2*(N + 1)))/(1 - r**(2)))",
            "a*(1 - (r**(2))**(N + 1))/(1 - r**(2))",
            "a*(1 - (r**(2*(N + 1))))/(1 - r**(2))",
            "a*(1 - r**(2*(N + 1)))/(1 - r**(2))",
            "a*(1 - r**(2*N))/(1 - r**(2)) + a*r**(2*N)",
            "a*((1 - r**(2*N))/(1 - r**(2)) + r**(2*N))",
            "((a) * (1 - r**(2*N + 2)))/(1 - r**(2))",
            "((a*(1 - r**(2*N + 2)))/(1 - r**(2)))",
            "(a*(1 - r**(2*N + 2)))/(1 - r**(2))",
            "(a*(1 - r**(2*N + 2))/(1 - r**(2)))",
            "a*((1 - (r**(2*N + 2)))/(1 - r**(2)))",
            "a*((1 - r**(2*N + 2))/(1 - r**(2)))",
            "a*(1 - (r)**(2*N + 2))/(1 - (r)**(2))",
            "a*(1 - r**(2*N + 2))/(1 - r**(2))",
            "a*(1 - r**(2*N + 2)) * (1 - r**(2))**( - 1)",
            "a + ((1 - r**(2*N)) * a*r**(2))/(1 - r**(2))",
            "a + (a*r**(2)*(1 - r**(2*N)))/((1 - r**(2)))",
            "a + (a*r**(2)*(1 - r**(2*N)))/(1 - r**(2))",
            "a + (a*r**(2)*(1 - (r**(2))**(N)))/(1 - r**(2))",
            "a + a*r**(2)*((1 - (r**(2))**(N))/(1 - (r**(2))))",
            "(a - a*(r**(2))**(N + 1))/(1 - r**(2))",
            "(a - a*r**(2*(N + 1)))/(1 - r**(2))",
            "(a - a*r**(2*N + 2))/(1 - r**(2))",
            "(a - a*r**(2*N + 2))/( - r**(2) + 1)",
            "a + a*r**(2)*(r**(2*N) - 1)/(r**(2) - 1)",
            "a*(r**(2)*(1 - r**(2*N))/(1 - r**(2)) + 1)",
            "((a*r**(2)) * (1 - r**(2*N)))/(1 - r**(2)) + a",
            "(a*r**(2)*(1 - r**(2*N)))/(1 - r**(2)) + a",
            "a*(r**(2)*(1 - r**(2*N)))/(1 - r**(2)) + a",
            "a*r**(2)*(1 - r**(2*N))/(1 - r**(2)) + a",
            "(a*r**(2) - a*r**(2*N + 2))/(1 - r**(2)) + a",
            "((a*(r**(2*(N + 1)) - 1))/(r**(2) - 1))",
            "(a*((r**(2))**(N + 1) - 1))/(r**(2) - 1)",
            "(a*(r**(2*(N + 1)) - 1))/(r**(2) - 1)",
            "(a*(r**(2*(N + 1)) - 1)/(r**(2) - 1))",
            "a*((r**(2))**(N + 1) - 1)/(r**(2) - 1)",
            "a*((r**(2*(N + 1)) - 1)/(r**(2) - 1))",
            "a*(r**(2*(N + 1)) - 1)/(r**(2) - 1)",
            "a*( - r**(2*N + 2) + 1)/(1 - r**(2))",
            "((a*(r**(2*N + 2) - 1))/(r**(2) - 1))",
            "(a*(r**(2*N + 2) - 1))/((r)**(2) - 1)",
            "(a*(r**(2*N + 2) - 1))/(r**(2) - 1)",
            "a*((r**(2*N + 2) - 1)/(r**(2) - 1))",
            "a*(r**(2*N + 2) - 1)/(r**(2) - 1)",
            "(a*r**(2*N + 2) - a)/(r**(2) - 1)",
            "a*(r**(2*N) - r**( - 2))/(1 - r**( - 2))",
            "a*((r**(2)*(r**(2*N) - 1)/(r**(2) - 1)) + 1)",
            "a*(r**(2)*(r**(2*N) - 1)/(r**(2) - 1) + 1)",
            "(a*r**(2)*(r**(2*N) - 1))/(r**(2) - 1) + a",
            "a*(r**(2) - r**(2*N + 2))/(1 - r**(2)) + a",
            "(a*(r**(N + 1) - 1) * (r**(N + 1) + 1))/(r**(2) - 1)",
            "(r**(2*N + 2) - 1) * (a)/(r**(2) - 1)",
            "((r**((N + 1) * 2) - 1) * a)/(r**(2) - 1)"
        ]
    },
    "2**(((2)/(5)))*(1+((x)/(5))-((3*x**(2))/(100))+((x**(3))/(125)))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(1 + (1)/(5) * x - (3)/(100) * x**(2) + (1)/(125) * x**(3)) * 2**((2)/(5))",
            "(1 + (x)/(5) - (3)/(100) * x**(2) + (x**(3))/(125)) * 2**((2)/(5))",
            "(1 + (x)/(5) - (3*x**(2))/(100) + (1*x**(3))/(125)) * 2**((2)/(5))",
            "(2)**((2)/(5)) * (1 + (1)/(5) * x - (3)/(100) * x**(2) + (1)/(125) * x**(3))",
            "(2**((2)/(5))) * (1 + ((1)/(5)) * x - ((3)/(100)) * x**(2) + ((1)/(125)) * x**(3))",
            "(2**((2)/(5))) * (1 + (1)/(5) * x - (3)/(100) * x**(2) + (1)/(125) * x**(3))",
            "2**((2)/(5))*(1 + ((1)/(5)) * x - ((3)/(100)) * x**(2) + ((1)/(125)) * x**(3))",
            "2**((2)/(5))*(1 + (1)/(5) * x - (3)/(100) * x**(2) + (1)/(125) * x**(3))",
            "2**((2)/(5))*(1 + (1)/(5) * x - (3)/(100) * x**(2) + (8)/(1000) * x**(3))",
            "2**((2)/(5))*(1 + (1)/(5) * x - 3*(x**(2))/(100) + (x**(3))/(125))",
            "(2**((2)/(5))) * (1 + (2)/(10) * x - (2*3)/(5*5*2**(3)) * x**(2) + (2*3*8)/(5**(3)*2**(4)*3) * x**(3))",
            "2**((2)/(5))*(1 + (2)/(10) * x - (3)/(100) * x**(2) + (1)/(125) * x**(3))",
            "2**((2)/(5))*(1 + (2)/(10) * x - (3)/(100) * x**(2) + (x**(3))/(125))",
            "2**((2)/(5))*(1 + (2)/(10) * x - (6)/(200) * x**(2) + (1)/(125) * x**(3))",
            "2**((2)/(5))*(1 + ((2)/(5)) * ((x)/(2)) + (((2)/(5)) * ( - (3)/(5)) * (((x)/(2))**(2)))/(2) + (((2)/(5)) * ( - (3)/(5)) * ( - (8)/(5)) * (((x)/(2))**(3)))/(6))",
            "2**((2)/(5))*(1 + ((2)/(5)) * ((x)/(2)) + (((2)/(5)) * ( - (3)/(5)) * ((x)/(2))**(2))/(2) + ((2)/(5)) * ( - (3)/(5)) * ( - (8)/(5)) * (((x)/(2))**(3))/(6))",
            "2**((2)/(5))*(1 + (2*x)/(10) - (3*x**(2))/(100) + (x**(3))/(125))",
            "2**((2)/(5))*(1 + 2*(x)/(10) - 3*(x**(2))/(100) + (x**(3))/(125))",
            "2**((2)/(5)) + (1)/(5) * 2**((2)/(5))*x - (3*x**(2))/(50*2**((3)/(5))) + (1)/(125) * 2**((2)/(5))*x**(3)",
            "2**((2)/(5)) + (1)/(5) * 2**((2)/(5))*x - 3*(x**(2))/(50*2**((3)/(5))) + (2**((2)/(5)))/(125) * x**(3)",
            "2**((2)/(5)) + (1)/(5) * 2**((2)/(5))*x - 3*(x**(2))/(50*2**((3)/(5))) + 2**((2)/(5))*(x**(3))/(125)",
            "(2**((2)/(5))) * (1 + (x)/(5) - (3)/(100) * x**(2) + (1)/(125) * x**(3))",
            "2**((2)/(5))*((1) + (x)/(5) - (3)/(100) * x**(2) + (1)/(125) * x**(3))",
            "2**((2)/(5))*(1 + ((x)/(5)) - (3)/(100) * x**(2) + (1)/(125) * x**(3))",
            "2**((2)/(5))*(1 + (x)/(5) - ((3)/(100)) * x**(2) + ((1)/(125)) * x**(3))",
            "2**((2)/(5))*(1 + (x)/(5) - (3)/(100) * x**(2) + (1)/(125) * x**(3))",
            "(2)**((2)/(5)) * (1 + (x)/(5) - (3)/(100) * x**(2) + (x**(3))/(125))",
            "2**((2)/(5))*(1 + (x)/(5) - (3)/(100) * x**(2) + (x**(3))/(125))",
            "2**((2)/(5))*(1 + (x)/(5) - (3*x**(2))/(100) + (1)/(125) * x**(3))",
            "2**((2)/(5))*(1 + (x)/(5) - (3*x**(2))/(100) + (8*x**(3))/(1000))",
            "(2**((2)/(5))) * (1 + (x)/(5) - (3*x**(2))/(100) + (x**(3))/(125))",
            "2**((2)/(5))*(1 + (x)/(5) - (3*x**(2))/(100) + (x**(3))/(125))",
            "(2)**((2)/(5)) * (1 + (x)/(5) - 3*(x**(2))/(100) + (x**(3))/(125))",
            "(2**((2)/(5))) * (1 + (x)/(5) - 3*(x**(2))/(100) + (x**(3))/(125))",
            "2**((2)/(5))*(1 + ((x)/(5)) - (3*(x**(2))/(100)) + ((x**(3))/(125)))",
            "2**((2)/(5))*(1 + (x)/(5) - (3*(x**(2))/(100)) + (x**(3))/(125))",
            "2**((2)/(5))*(1 + (x)/(5) - 3*(x**(2))/(100) + (x**(3))/(125))",
            "2**((2)/(5))*(1 + (x)/(5) - 6*(x**(2))/(200) + 48*(x**(3))/(6000))",
            "2**((2)/(5))*(1 + (x)/(5) - (6*x**(2))/(200) + (x**(3))/(125))",
            "2**((2)/(5))*(1 + (x)/(5) - x**(2)*(3)/(100) + (x**(3))/(125))",
            "2**((2)/(5)) + 2**((2)/(5))*((1)/(5) * x) + 2**((2)/(5))*( - (3)/(100) * x**(2)) + 2**((2)/(5))*((1)/(125) * x**(3))",
            "2**((2)/(5)) + (2**((2)/(5)))/(5) * x - (2**((2)/(5)))/(100) * (3*x**(2)) + (2**((2)/(5)))/(125) * x**(3)",
            "2**((2)/(5)) + (2**((2)/(5)))/(5) * x - 2**((2)/(5))*(3)/(100) * x**(2) + 2**((2)/(5))*(1)/(125) * x**(3)",
            "2**((2)/(5)) + (2**((2)/(5)))/(5) * x - (2**((2)/(5))*3)/(100) * x**(2) + (2**((2)/(5)))/(125) * x**(3)",
            "2**((2)/(5)) + (2**((2)/(5)))/(5) * x - 2**((2)/(5))*(3)/(100) * x**(2) + (2**((2)/(5)))/(125) * x**(3)",
            "2**((2)/(5)) + (2**((2)/(5)))/(5) * x - 2**((2)/(5))*(3)/(100) * x**(2) + 2**((2)/(5))*(x**(3))/(125)",
            "2**((2)/(5)) + (2**((2)/(5)))/(5) * x - ((2**((2)/(5))) * 3*x**(2))/(100) + (2**((2)/(5))*x**(3))/(125)",
            "2**((2)/(5)) + (2**((2)/(5)))/(5) * x - 2**( - (8)/(5))*(3)/(25) * x**(2) + (2**((2)/(5)))/(125) * x**(3)",
            "2**((2)/(5)) + ((2**((2)/(5)))/(5)) * x - ((3)/(100)) * 2**((2)/(5))*x**(2) + ((2**((2)/(5)))/(125)) * x**(3)",
            "2**((2)/(5)) + (2**((2)/(5)))/(5) * x - (3)/(100) * 2**((2)/(5))*x**(2) + (2**((2)/(5)))/(125) * x**(3)",
            "(2**((2)/(5))) + ((2**((2)/(5)))/(5)) * x - ((3*(2**((2)/(5))))/(100)) * x**(2) + ((2**((2)/(5)))/(125)) * x**(3)",
            "2**((2)/(5)) + ((2)**((2)/(5)))/(5) * x - (3*(2)**((2)/(5)))/(100) * x**(2) + ((2)**((2)/(5)))/(125) * x**(3)",
            "2**((2)/(5)) + ((2**((2)/(5)))/(5)) * (x) - ((3) * (2**((2)/(5)))/(100)) * (x**(2)) + ((2**((2)/(5)))/(125)) * x**(3)",
            "2**((2)/(5)) + ((2**((2)/(5)))/(5)) * x - (3*(2**((2)/(5)))/(100)) * x**(2) + ((2**((2)/(5)))/(125)) * x**(3)",
            "2**((2)/(5)) + (2**((2)/(5)))/(5) * x - (3*(2**((2)/(5))))/(100) * x**(2) + (2**((2)/(5)))/(125) * x**(3)",
            "2**((2)/(5)) + (2**((2)/(5)))/(5) * x - (3*2**((2)/(5)))/(100) * x**(2) + (2**((2)/(5)))/(125) * x**(3)",
            "2**((2)/(5)) + (2**((2)/(5)))/(5) * x - 3*(2**((2)/(5)))/(100) * x**(2) + (2**((2)/(5)))/(125) * x**(3)",
            "2**((2)/(5)) + (2**((2)/(5)))/(5) * x - (3*2**((2)/(5))) * (x**(2))/(100) + (2**((2)/(5)))/(125) * x**(3)",
            "2**((2)/(5)) + ((2**((2)/(5)))/(5)) * x - (3*(2**( - (8)/(5)))/(25)) * x**(2) + ((2**((2)/(5)))/(125)) * x**(3)",
            "2**((2)/(5)) + (2**((2)/(5)))/(5) * x - (3*2**( - (8)/(5)))/(25) * x**(2) + (2**((2)/(5)))/(125) * x**(3)",
            "2**((2)/(5)) + (2**((2)/(5)))/(5) * x - 3*(2**( - (8)/(5)))/(25) * x**(2) + 8*(2**( - (13)/(5)))/(125) * x**(3)",
            "2**((2)/(5)) + (2**((2)/(5)))/(5) * x - (3)/(50) * 2**( - (3)/(5))*x**(2) + (2**((2)/(5)))/(125) * x**(3)",
            "2**((2)/(5)) + (2**((2)/(5)))/(5) * x - (3)/(50*2**((3)/(5))) * x**(2) + ((2**((2)/(5)))/(125)) * x**(3)",
            "2**((2)/(5)) + (2**((2)/(5)))/(5) * x - (3)/(50*2**((3)/(5))) * x**(2) + (2**((2)/(5)))/(125) * x**(3)",
            "2**((2)/(5)) + (2**((2)/(5)))/(5) * x - 3*(x**(2))/(50*2**((3)/(5))) + (2**((2)/(5)))/(125) * x**(3)",
            "2**((2)/(5)) + (2**((2)/(5)))/(5) * x - (6)/(25) * 2**( - (13)/(5))*x**(2) + (8)/(125) * 2**( - (13)/(5))*x**(3)",
            "2**((2)/(5)) + 2**((2)/(5))*(x)/(5) - 2**((2)/(5))*(3)/(100) * x**(2) + 2**((2)/(5))*(1)/(125) * x**(3)",
            "(2**((2)/(5)) + (2**((2)/(5))*x)/(5) - (2**((2)/(5))*3)/(100) * x**(2) + (2**((2)/(5)))/(125) * x**(3))",
            "2**((2)/(5)) + 2**((2)/(5))*(x)/(5) - 2**((2)/(5))*(3)/(100) * x**(2) + (2**((2)/(5)))/(125) * x**(3)",
            "2**((2)/(5)) + 2**((2)/(5))*(x)/(5) - (2**((2)/(5))) * 3*(x**(2))/(100) + (2**((2)/(5)))/(125) * x**(3)",
            "2**((2)/(5)) + 2**((2)/(5))*(x)/(5) + 2**((2)/(5))*( - 3*(x**(2))/(100)) + 2**((2)/(5))*(2)/(5) * ( - (3)/(5)) * ( - (8)/(5)) * (1)/(6) * (x**(3))/(8)",
            "2**((2)/(5)) + (2**((2)/(5))*x)/(5) - (2**((2)/(5))*(3*x**(2)))/(100) + (2**((2)/(5))*(8*x**(3)))/(1000)",
            "2**((2)/(5)) + (2**((2)/(5))) * (x)/(5) - (2**((2)/(5))) * (3*x**(2))/(100) + (2**((2)/(5))) * (x**(3))/(125)",
            "2**((2)/(5)) + (2**((2)/(5))*x)/(5) + ((2**((2)/(5))) * (-3*x**(2)))/(100) + ((2**((2)/(5))) * x**(3))/(125)",
            "2**((2)/(5)) + (2**((2)/(5))*x)/(5) - ((2**((2)/(5))) * 3*x**(2))/(100) + (2**((2)/(5))*x**(3))/(125)",
            "2**((2)/(5)) + (2**((2)/(5))*x)/(5) - (2**((2)/(5))*3*x**(2))/(100) + (2**((2)/(5))*x**(3))/(125)",
            "2**((2)/(5)) + (2**((2)/(5))*x)/(5) - 2**((2)/(5))*(3*x**(2))/(100) + 2**((2)/(5))*(x**(3))/(125)",
            "2**((2)/(5)) + 2**((2)/(5))*((x)/(5)) - 2**((2)/(5))*((3*x**(2))/(100)) + 2**((2)/(5))*((x**(3))/(125))",
            "2**((2)/(5)) + 2**((2)/(5))*(x)/(5) - (2**((2)/(5))*3*x**(2))/(100) + (2**((2)/(5))*x**(3))/(125)",
            "2**((2)/(5)) + (2**((2)/(5))) * (x)/(5) - (2**((2)/(5))) * 3*(x**(2))/(100) + (2**((2)/(5))) * (x**(3))/(125)",
            "2**((2)/(5)) + 2**((2)/(5))*((x)/(5)) - 2**((2)/(5))*(3*(x**(2))/(100)) + 2**((2)/(5))*(x**(3))/(125)",
            "2**((2)/(5)) + 2**((2)/(5))*(x)/(5) + 2**((2)/(5))*( - 3*(x**(2))/(100)) + 2**((2)/(5))*(x**(3))/(125)",
            "2**((2)/(5)) + 2**((2)/(5))*(x)/(5) - (2**((2)/(5))) * 3*(x**(2))/(100) + (2**((2)/(5))) * (x**(3))/(125)",
            "2**((2)/(5)) + 2**((2)/(5))*(x)/(5) - 2**((2)/(5))*3*(x**(2))/(100) + 2**((2)/(5))*(x**(3))/(125)",
            "2**((2)/(5)) + 2**((2)/(5))*(x)/(5) - 3*(2**((2)/(5)))/(100) * x**(2) + x**(3)*(2**((2)/(5)))/(125)",
            "2**((2)/(5)) + (2**((2)/(5))*x)/(5) - (3*(2**((2)/(5))) * x**(2))/(100) + (2**((2)/(5))*x**(3))/(125)",
            "2**((2)/(5)) + (2**((2)/(5))*x)/(5) - (3*2**((2)/(5))*x**(2))/(100) + (2**((2)/(5))*x**(3))/(125)",
            "2**((2)/(5)) + 2**((2)/(5))*(x)/(5) - 3*2**((2)/(5))*(x**(2))/(100) + 2**((2)/(5))*(x**(3))/(125)",
            "2**((2)/(5)) + 2**((2)/(5))*(x)/(5) - 3*x**(2)*(2**((2)/(5)))/(100) + 2**((2)/(5))*(x**(3))/(125)",
            "2**((2)/(5)) + 2**((2)/(5))*(x)/(5) - 3*(x**(2))/(25*2**((8)/(5))) + 2**((2)/(5))*(x**(3))/(125)",
            "2**((2)/(5)) + 2**((2)/(5))*(x)/(5) - 3*(x**(2))/(50*2**((3)/(5))) + (2**((2)/(5))) * (x**(3))/(125)",
            "2**((2)/(5)) + 2**( - (3)/(5))*((2)/(5)) * x - 2**( - (8)/(5))*((3)/(25)) * x**(2) + 2**( - (13)/(5))*((8)/(125)) * x**(3)",
            "2**((2)/(5)) + 2**( - (3)/(5))*(2)/(5) * x - 2**( - (8)/(5))*(3*x**(2))/(25) + 2**( - (13)/(5))*(8*x**(3))/(125)",
            "2**((2)/(5)) + 2**( - (3)/(5))*x*(2)/(5) - 2**( - (8)/(5))*x**(2)*(3)/(25) + 2**( - (13)/(5))*x**(3)*(8)/(125)",
            "2**((2)/(5)) + (2)/(5) * (2)**( - (3)/(5)) * x - (3)/(25) * (2)**( - (8)/(5)) * x**(2) + (8)/(125) * (2)**( - (13)/(5)) * x**(3)",
            "2**((2)/(5)) + (2)/(5) * (2**( - ((3)/(5)))) * x - (3)/(25) * (2**( - ((8)/(5)))) * x**(2) + (8)/(125) * (2**( - ((13)/(5)))) * x**(3)",
            "2**((2)/(5)) + (2)/(5) * (2**( - (3)/(5))) * x - (3)/(25) * (2**( - (8)/(5))) * x**(2) + (8)/(125) * (2**( - (13)/(5))) * x**(3)",
            "2**((2)/(5)) + (2)/(5) * 2**( - (3)/(5))*x - (3)/(25) * 2**( - (8)/(5))*x**(2) + (8)/(125) * 2**( - (13)/(5))*x**(3)",
            "2**((2)/(5)) + (2)/(5) * 2**( - (3)/(5))*x +  - (6)/(50) * 2**( - (8)/(5))*x**(2) + (48)/(750) * 2**( - (13)/(5))*x**(3)",
            "2**((2)/(5)) + (2**((7)/(5)))/(10) * x - (3*2**((2)/(5)))/(100) * x**(2) + (2**((2)/(5)))/(125) * x**(3)",
            "4**((1)/(5))*(1 + (1)/(5) * x - (3)/(100) * x**(2) + (1)/(125) * x**(3))",
            "4**((1)/(5))*(1 + (x)/(5) - (3)/(100) * x**(2) + (1)/(125) * x**(3))",
            "4**((1)/(5))*(1 + (x)/(5) - (3)/(100) * x**(2) + (x**(3))/(125))",
            "(4)**((1)/(5)) * (1 + (x)/(5) - (3*x**(2))/(100) + (x**(3))/(125))",
            "4**((1)/(5))*(1 + (x)/(5) - (3*x**(2))/(100) + (x**(3))/(125))",
            "(4)**((1)/(5)) * (1 + (x)/(5) - 3*(x**(2))/(100) + (x**(3))/(125))",
            "(4**((1)/(5))) * (1 + (x)/(5) - 3*(x**(2))/(100) + (x**(3))/(125))",
            "4**((1)/(5))*(1 + (x)/(5) - 3*(x**(2))/(100) + (x**(3))/(125))",
            "4**((1)/(5)) + (2)/(5*2**((3)/(5))) * x - (3)/(25*2**((8)/(5))) * x**(2) + (2)/(125*2**((3)/(5))) * x**(3)",
            "(4)**((1)/(5)) + ((4)**((1)/(5)))/(5) * x - (3)/(100) * (4)**((1)/(5)) * x**(2) + ((4)**((1)/(5)))/(125) * x**(3)",
            "4**((1)/(5)) + (4**((1)/(5)))/(5) * x - (3*2**( - (8)/(5)))/(25) * x**(2) + (4**((1)/(5)))/(125) * x**(3)",
            "4**((1)/(5)) + (4**((1)/(5)))/(5) * x +  - (3*(4**((1)/(5))))/(100) * x**(2) + (4**((1)/(5)))/(125) * x**(3)",
            "4**((1)/(5)) + (4**((1)/(5)))/(5) * x - 3*(4**((1)/(5)))/(100) * x**(2) + (4**((1)/(5)))/(125) * x**(3)",
            "4**((1)/(5)) + 4**((1)/(5))*(x)/(5) - 4**((1)/(5))*(3)/(100) * x**(2) + 4**((1)/(5))*(1)/(125) * x**(3)",
            "4**((1)/(5)) + 4**((1)/(5))*(x)/(5) - 4**((1)/(5))*(3)/(100) * x**(2) + (4**((1)/(5)))/(125) * x**(3)"
        ]
    },
    "2**((( -1)/(3)))*(1 +((5*x)/(6)) -((11*x**(2))/(18)) +((50*x**(3))/(81)))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "((1)/(2**((1)/(3)))) * (1 + (5)/(6) * x - (11)/(18) * x**(2) + (50)/(81) * x**(3))",
            "(1)/(2**((1)/(3))) * (1 + (5)/(6) * x - (11)/(18) * x**(2) + (50)/(81) * x**(3))",
            "(1)/(2**((1)/(3))) * (1 + 5*(x)/(6) - (11)/(18) * x**(2) + (50)/(81) * x**(3))",
            "((1)/(2**((1)/(3)))) * (1 + (5*x)/(6) - (11*x**(2))/(18) + (50*x**(3))/(81))",
            "(1)/(2**((1)/(3))) * (1 + (5*x)/(6) - (11*x**(2))/(18) + (50*x**(3))/(81))",
            "((1)/(2**((1)/(3)))) * (1 + 5*(x)/(6) - 11*(x**(2))/(18) + 50*(x**(3))/(81))",
            "(1)/(2**((1)/(3))) * (1 + 5*(x)/(6) - 11*(x**(2))/(18) + 50*(x**(3))/(81))",
            "(1)/(2**((1)/(3))) + (5)/(6*(2**((1)/(3)))) * x - (11)/(18*(2**((1)/(3)))) * x**(2) + (25*2**((2)/(3)))/(81) * x**(3)",
            "(1)/((2)**((1)/(3))) + (5)/(6*2**((1)/(3))) * x - (11)/(18*2**((1)/(3))) * x**(2) + (25)/(81) * 2**((2)/(3))*x**(3)",
            "(1)/(2**((1)/(3))) + (5)/(6*2**((1)/(3))) * x - (11)/(18*2**((1)/(3))) * x**(2) + (25)/(81) * 2**((2)/(3))*x**(3)",
            "(1)/(2**((1)/(3))) + (5)/(6*2**((1)/(3))) * x - (11)/(18*2**((1)/(3))) * x**(2) + (50)/(81*2**((1)/(3))) * x**(3)",
            "((1)/(2**((1)/(3)))) + (5*x*(1)/(6) * (1)/(2**((1)/(3)))) - ((11)/(18) * x**(2)*(1)/(2**((1)/(3)))) + ((50)/(81) * x**(3)*(1)/(2**((1)/(3))))",
            "(1)/(2**((1)/(3))) + (5*x)/(6*2**((1)/(3))) - (11*x**(2))/(18*2**((1)/(3))) + (25*2**((2)/(3))*x**(3))/(81)",
            "(1)/(2**((1)/(3))) + (5*x)/(6*2**((1)/(3))) - (11*x**(2))/(18*2**((1)/(3))) + ((25)/(81) * 2**((2)/(3))*x**(3))",
            "(1)/(2**((1)/(3))) + (5*x)/(6*2**((1)/(3))) - (11*x**(2))/(18*2**((1)/(3))) + (25)/(81) * 2**((2)/(3))*x**(3)",
            "(1)/((2)**((1)/(3))) + 5*(x)/(6*(2)**((1)/(3))) - 11*(x**(2))/(18*(2)**((1)/(3))) + (25)/(81) * 2**((2)/(3))*x**(3)",
            "(1)/(2**((1)/(3))) + 5*(x)/(6*2**((1)/(3))) - 11*(x**(2))/(18*2**((1)/(3))) + (25)/(81) * 2**((2)/(3))*x**(3)",
            "(1)/(2**((1)/(3))) + (5*x)/(6*(2**((1)/(3)))) - (11*x**(2))/(18*(2**((1)/(3)))) + (50*x**(3))/(81*(2**((1)/(3))))",
            "(1)/((2)**((1)/(3))) + 5*(x)/(6*(2)**((1)/(3))) - 11*(x**(2))/(18*(2)**((1)/(3))) + 50*(x**(3))/(81*(2)**((1)/(3)))",
            "(1 + (5)/(6) * x - (11)/(18) * x**(2) + (50)/(81) * x**(3)) * (2**( - (1)/(3)))",
            "(1 + (5)/(6) * x - (11)/(18) * x**(2) + (50)/(81) * x**(3)) * 2**( - (1)/(3))",
            "(1 + 5*(x)/(6) - (11)/(18) * x**(2) + (50)/(81) * x**(3))/(2**((1)/(3)))",
            "(1 + (5*x)/(6) - (11*x**(2))/(18) + (50*x**(3))/(81))/(2**((1)/(3)))",
            "(1 + 5*(x)/(6) - 11*(x**(2))/(18) + 50*(x**(3))/(81)) * 2**( - (1)/(3))",
            "(1 + x - (x**(2))/(2) + (x**(3))/(2)) * 2**( - (1)/(3)) - (1 + x - (x**(2))/(2)) * 2**( - (4)/(3))*(x)/(3) + (1 + x) * 2**( - (4)/(3))*(x**(2))/(9) - (7)/(81) * 2**( - (7)/(3))*x**(3)",
            "2**( - (1)/(3))*(1 + (1 - (1)/(6)) * x + ((1)/(18) - (1)/(6) - (1)/(2)) * x**(2) + ((1)/(2) + (1)/(12) + (1)/(18) - (7)/(324)) * x**(3))",
            "(2)**( - (1)/(3)) + ( - (1)/(3) * (2)**( - (4)/(3)) + (2)**( - (1)/(3))) * x + ((2)/(9) * (2)**( - (7)/(3)) - (1)/(3) * (2)**( - (4)/(3)) - (1)/(2) * (2)**( - (1)/(3))) * x**(2) + ( - (14)/(81) * (2)**( - (10)/(3)) + (2)/(9) * (2)**( - (7)/(3)) + (1)/(6) * (2)**( - (4)/(3)) + (1)/(2) * (2)**( - (1)/(3))) * x**(3)",
            "(2**( - ((1)/(3)))) * (1 + ((5)/(6)) * x - ((11)/(18)) * x**(2) + ((50)/(81)) * x**(3))",
            "(2**( - ((1)/(3)))*(1 + (5)/(6) * x - (11)/(18) * x**(2) + (50)/(81) * x**(3)))",
            "(2**( - (1)/(3))) * (1 + ((5)/(6)) * x - ((11)/(18)) * x**(2) + ((50)/(81)) * x**(3))",
            "(2**( - (1)/(3))) * (1 + (5)/(6) * x - (11)/(18) * x**(2) + (50)/(81) * x**(3))",
            "2**( - ((1)/(3)))*(1 + (5)/(6) * x - (11)/(18) * x**(2) + (50)/(81) * x**(3))",
            "2**( - (1)/(3))*(1 +  + (5)/(6) * x - (11)/(18) * x**(2) + (50)/(81) * x**(3))",
            "2**( - (1)/(3))*(1 + ((5)/(6)) * x - ((11)/(18)) * x**(2) + ((50)/(81)) * x**(3))",
            "2**( - (1)/(3))*(1 + (5)/(6) * (x) - (11)/(18) * (x**(2)) + (50)/(81) * (x**(3)))",
            "2**( - (1)/(3))*(1 + (5)/(6) * x - (11)/(18) * x**(2) + (50)/(81) * x**(3))",
            "2**((-1)/(3))*(1 + (5)/(6) * x - (11)/(18) * x**(2) + (50)/(81) * x**(3))",
            "2**( - (1)/(3))*(1 + (5)/(6) * x - (11*x**(2))/(18) + (50)/(81) * x**(3))",
            "2**( - (1)/(3))*(1 + 5*(x)/(6) - (11)/(18) * (x**(2)) + (50)/(81) * (x**(3)))",
            "2**( - (1)/(3))*(1 + 5*(x)/(6) - (11)/(18) * x**(2) + (50)/(81) * x**(3))",
            "2**( - (1)/(3))*(1 + (5*x)/(6) - (11*x**(2))/(18) + (50)/(81) * x**(3))",
            "2**( - (1)/(3))*(1 + 5*(x)/(6) - 11*(x**(2))/(18) + (50)/(81) * x**(3))",
            "(2**( - (1)/(3))) * (1 + (5*x)/(6) - (11*x**(2))/(18) + (50*x**(3))/(81))",
            "2**( - (1)/(3))*(1 + (5*x)/(6) - (11*x**(2))/(18) + (50*x**(3))/(81))",
            "2**(( - 1)/(3))*(1 + (5*x)/(6) - (11*x**(2))/(18) + (50*x**(3))/(81))",
            "2**( - (1)/(3))*(1 + 5*(x)/(6) - (11*x**(2))/(18) + (50*x**(3))/(81))",
            "(2)**( - (1)/(3)) * (1 + 5*(x)/(6) - 11*(x**(2))/(18) + 50*(x**(3))/(81))",
            "(2**( - (1)/(3))) * (1 + 5*(x)/(6) - 11*(x**(2))/(18) + 50*(x**(3))/(81))",
            "+ 2**( - (1)/(3))*(1 + 5*(x)/(6) - 11*(x**(2))/(18) + 50*(x**(3))/(81))",
            "2**( - ((1)/(3)))*(1 + 5*(x)/(6) - 11*(x**(2))/(18) + 50*(x**(3))/(81))",
            "2**( - (1)/(3))*(1 +  + 5*(x)/(6) - 11*(x**(2))/(18) + 50*(x**(3))/(81))",
            "2**( - (1)/(3))*(1 + (5*(x)/(6)) - (11*(x**(2))/(18)) + (50*(x**(3))/(81)))",
            "2**( - (1)/(3))*(1 + 5*(x)/(6) - 11*(x**(2))/(18) + 50*(x**(3))/(81))",
            "2**(( - 1)/(3))*(1 + (5*(x)/(6)) - (11*(x**(2))/(18)) + (50*(x**(3))/(81)))",
            "2**(( - 1)/(3))*(1 + 5*(x)/(6) - 11*(x**(2))/(18) + 50*(x**(3))/(81))",
            "2**( - (1)/(3))*(1 + 5*(x)/(6) - 33*(x**(2))/(54) + 50*(x**(3))/(81))",
            "2**( - ((1)/(3)))*(1 + x*(5)/(6) - x**(2)*(11)/(18) + x**(3)*(50)/(81))",
            "2**( - (1)/(3)) + (2**( - (1)/(3)) - (1)/(3) * 2**( - (4)/(3))) * x - (11)/(9) * 2**( - (4)/(3))*x**(2) + ((10)/(9) * 2**( - (4)/(3)) + (20)/(81) * 2**( - (7)/(3))) * x**(3)",
            "2**( - (1)/(3)) + (2**( - (1)/(3)) - (2**( - (4)/(3)))/(3)) * x - (11)/(9) * 2**( - (4)/(3))*x**(2) + ((7)/(6) * 2**( - (4)/(3)) + (2)/(9) * 2**( - (7)/(3)) - (14)/(81) * 2**( - (10)/(3))) * x**(3)",
            "2**( - ((1)/(3))) + (2**( - (1)/(3)) - (2**( - (4)/(3)))/(3)) * x + ((2**( - (4)/(3)))/(9) - (2**( - (4)/(3)))/(3) - (2**( - (1)/(3)))/(2)) * x**(2) + (2**((2)/(3))*(25)/(81)) * x**(3)",
            "2**( - (1)/(3)) + (2**( - (1)/(3)) - (2**( - (4)/(3)))/(3)) * x + ((2**( - (4)/(3)))/(9) - (2**( - (4)/(3)))/(3) - (2**( - (1)/(3)))/(2)) * x**(2) + ((25)/(81) * 2**((2)/(3))) * x**(3)",
            "2**( - (1)/(3)) + 2**( - (1)/(3))*((5)/(6)) * x - (2**( - (1)/(3))) * ((11)/(18)) * x**(2) + (2**( - (1)/(3))*((50)/(81)) * (x**(3)))",
            "2**( - (1)/(3)) + 2**( - (1)/(3))*((5)/(6)) * x - 2**( - (1)/(3))*((11)/(18)) * x**(2) + 2**( - (1)/(3))*((50)/(81)) * x**(3)",
            "2**( - (1)/(3)) + 2**( - (1)/(3))*(5)/(6) * x - 2**( - (1)/(3))*(11)/(18) * x**(2) + 2**( - (1)/(3))*(50)/(81) * x**(3)",
            "2**( - (1)/(3)) + 2**( - (1)/(3))*(5*x)/(6) - 2**( - (1)/(3))*(11)/(18) * x**(2) + 2**( - (1)/(3))*(50)/(81) * x**(3)",
            "2**( - (1)/(3)) + (2**( - (1)/(3))*(5*x))/(6) - (2**( - (1)/(3))*(11*x**(2)))/(18) + (2**( - (1)/(3))*(50*x**(3)))/(81)",
            "2**( - (1)/(3)) + (2**( - (1)/(3))*5*x)/(6) - (2**( - (1)/(3))*11*x**(2))/(18) + (2**( - (1)/(3))*50*x**(3))/(81)",
            "2**( - (1)/(3)) + 2**( - (1)/(3))*(5*x)/(6) - 2**( - (1)/(3))*(11*x**(2))/(18) + 2**( - (1)/(3))*(50*x**(3))/(81)",
            "(2**( - (1)/(3))) + (2**( - (1)/(3))) * 5*(x)/(6) - (2**( - (1)/(3))) * 11*(x**(2))/(18) + (2**( - (1)/(3))) * 50*(x**(3))/(81)",
            "2**( - (1)/(3)) + 2**( - (1)/(3))*5*(x)/(6) - 2**( - (1)/(3))*11*(x**(2))/(18) + 2**( - (1)/(3))*50*(x**(3))/(81)",
            "2**(( - 1)/(3)) + ((2**(( - 1)/(3))) * 5*x)/(6) - ((2**(( - 1)/(3))) * 11*x**(2))/(18) + ((2**((2)/(3))) * 25*x**(3))/(81)",
            "2**( - (1)/(3))*((50)/(81) * x**(3) - (11)/(18) * x**(2) + (5)/(6) * x + 1)",
            "2**( - (1)/(3)) + ((5*(2**( - (1)/(3))))/(6)) * x - ((11*(2**( - (1)/(3))))/(18)) * x**(2) + ((50*(2**( - (1)/(3))))/(81)) * x**(3)",
            "2**( - (1)/(3)) + (5*(2**( - (1)/(3))))/(6) * x - (11*(2**( - (1)/(3))))/(18) * x**(2) + (50*(2)**( - (1)/(3)))/(81) * x**(3)",
            "2**( - (1)/(3)) + (5*2**( - (1)/(3)))/(6) * x - (11*2**( - (1)/(3)))/(18) * x**(2) + (50*2**( - (1)/(3)))/(81) * x**(3)",
            "2**( - (1)/(3)) + 5*(2**( - (1)/(3)))/(6) * x - 11*(2**( - (1)/(3)))/(18) * x**(2) + 50*(2**( - (1)/(3)))/(81) * x**(3)",
            "2**( - (1)/(3)) + 5*2**( - (1)/(3))*(x)/(6) - 11*2**( - (1)/(3))*(x**(2))/(18) + 50*2**( - (1)/(3))*(x**(3))/(81)",
            "2**( - (1)/(3)) + (5)/(3*2**((4)/(3))) * x - (11)/(18*2**((1)/(3))) * x**(2) + (25)/(81) * 2**((2)/(3))*x**(3)",
            "2**( - (1)/(3)) + (5)/(3*2**((4)/(3))) * x - (22)/(9*2**((7)/(3))) * x**(2) + (400)/(81*2**((10)/(3))) * x**(3)",
            "2**( - (1)/(3)) + (5)/(6*2**((1)/(3))) * x - (11)/(18*2**((1)/(3))) * x**(2) + (25*2**((2)/(3)))/(81) * x**(3)",
            "(2)**( - (1)/(3)) + (5)/(6) * (2)**( - (1)/(3)) * x - (11)/(18) * (2)**( - (1)/(3)) * x**(2) + (50)/(81) * (2)**( - (1)/(3)) * x**(3)",
            "2**( - (1)/(3)) + (((5)/(6)) * (2**( - (1)/(3)))) * x - (((11)/(18)) * (2**( - (1)/(3)))) * x**(2) + (((50)/(81)) * (2**( - (1)/(3)))) * x**(3)",
            "2**( - (1)/(3)) + ((5)/(6) * 2**( - (1)/(3))) * x - ((11)/(18) * 2**( - (1)/(3))) * x**(2) + ((50)/(81) * 2**( - (1)/(3))) * x**(3)",
            "2**( - (1)/(3)) + ((5)/(6)) * 2**( - (1)/(3))*x - ((11)/(18)) * 2**( - (1)/(3))*x**(2) + ((50)/(81)) * 2**( - (1)/(3))*x**(3)",
            "2**( - (1)/(3)) + (5)/(6) * 2**( - (1)/(3))*x - (11)/(18) * 2**( - (1)/(3))*x**(2) + (50)/(81) * 2**( - (1)/(3))*x**(3)",
            "2**( - (1)/(3)) + (5)/(6) * x*2**( - (1)/(3)) - (11)/(18) * x**(2)*2**( - (1)/(3)) + (25)/(81) * x**(3)*2**((2)/(3))",
            "2**( - (1)/(3)) + 5*(x)/(6) * (2**( - (1)/(3))) - (11)/(18) * x**(2)*(2**( - (1)/(3))) + (50)/(81) * x**(3)*(2**( - (1)/(3)))",
            "2**((-1)/(3)) + (5*x)/(6*(2**((1)/(3)))) - (11*x**(2))/(18*(2**((1)/(3)))) + (200*x**(3))/(324*(2**((1)/(3))))",
            "2**( - (1)/(3)) + (5*x)/(6*2**((1)/(3))) - (11*x**(2))/(18*2**((1)/(3))) + (50*x**(3))/(81*2**((1)/(3)))",
            "(2**((2)/(3)))/(2) + (5*(2**((2)/(3)))/(12)) * x - ((11) * (2**((2)/(3)))/(36)) * x**(2) + ((25*(2**((2)/(3))))/(81)) * x**(3)",
            "(25)/(81) * 2**((2)/(3))*x**(3) - (11*x**(2))/(18*2**((1)/(3))) + (5*x)/(6*2**((1)/(3))) + (1)/(2**((1)/(3)))",
            "(50)/(81*2**((1)/(3))) * x**(3) - (11*x**(2))/(18*2**((1)/(3))) + (5*x)/(6*2**((1)/(3))) + (1)/(2**((1)/(3)))"
        ]
    },
    "1+((theta)/(2))+2*theta**(2)-((13)/(48))*theta**(3)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "1 + (1)/(2) * theta - (13)/(48) * theta**(3) + 2*(theta)**(2)",
            "1 + ((1)/(2)) * theta + 2*theta**(2) - ((13)/(48)) * theta**(3)",
            "1 + (1)/(2) * theta + 2*theta**(2) - ((13)/(48)) * theta**(3)",
            "1 + (1)/(2) * theta + 2*theta**(2) - (13)/(48) * theta**(3)",
            "1 + (1)/(2) * (theta) + 2*(theta)**(2) - (13)/(48) * (theta)**(3)",
            "1 + (1)/(2) * theta + 2*(theta)**(2) - (13)/(48) * theta**(3)",
            "1 + (1)/(2) * theta + 2*theta**(2) - (13*theta**(3))/(48)",
            "1 + (1)/(2) * theta + 2*theta**(2) - 13*(theta**(3))/(48)",
            "(1)/(2) * theta + 1 + 2*theta**(2) - (13)/(48) * theta**(3)",
            "(1)/(2) * (theta - (13)/(24) * theta**(3)) + 1 + 2*theta**(2)",
            "(1)/(2) * theta - (13)/(48) * theta**(3) + (1 + 2*theta**(2))",
            "(1)/(2) * theta - (13)/(48) * theta**(3) + 1 + 2*theta**(2)",
            "1 + 2*theta**(2) - (13)/(48) * theta**(3) + (theta)/(2)",
            "1 + 2*theta**(2) + (24*theta - 13*theta**(3))/(48)",
            "1 + 2*theta**(2) + (theta)/(2) - (13)/(48) * theta**(3)",
            "1 + 2*theta**(2) + (theta)/(2) - 13*(theta**(3))/(48)",
            "- (13)/(48) * theta**(3) + 2*theta**(2) + (1)/(2) * theta + 1",
            "- (13)/(48) * (theta)**(3) + (theta)/(2) + 1 + 2*theta**(2)",
            "- (13)/(48) * theta**(3) + (theta)/(2) + 1 + 2*theta**(2)",
            "- 13*(theta**(3))/(48) + 2*theta**(2) + (theta)/(2) + 1",
            "(1)/(48) * ( - 13*theta**(3) + 96*theta**(2) + 24*theta + 48)",
            "(1)/(48) * (24*theta - 13*theta**(3) + 48 + 96*theta**(2))",
            "(1)/(48) * (48 + 24*theta + 96*theta**(2) - 13*theta**(3))",
            "1 + theta*((1)/(2) + 2*theta - (13*theta**(2))/(48))",
            "1 + ((theta)/(2)) - ((13)/(48)) * (theta**(3)) + 2*theta**(2)",
            "1 + (theta)/(2) - (13)/(48) * (theta)**(3) + 2*theta**(2)",
            "1 + (theta)/(2) - (13)/(48) * theta**(3) + 2*theta**(2)",
            "1 + (theta)/(2) - (13*theta**(3))/(48) + 2*theta**(2)",
            "1 + (theta)/(2) - 13*(theta**(3))/(48) + 2*theta**(2)",
            "1 + (theta)/(2) - 13*((theta)**(3))/(48) + 2*(theta)**(2)",
            "1*(theta)/(2) - (1)/(4) * theta**(3) - (1)/(48) * theta**(3) + 1 + 2*theta**(2)",
            "1 + ((theta)/(2)) + 2*theta**(2) - ((13)/(48) * theta**(3))",
            "1 + (theta)/(2) + 2*theta**(2) - ((13)/(48)) * theta**(3)",
            "1 + (theta)/(2) + 2*theta**(2) - (13)/(48) * (theta)**(3)",
            "1 + (theta)/(2) + 2*theta**(2) - (13)/(48) * theta**(3)",
            "1 + ((theta)/(2)) + 2*(theta**(2)) - (13)/(48) * (theta**(3))",
            "1 + (theta)/(2) + 2*(theta)**(2) - (13)/(48) * (theta)**(3)",
            "1 + (theta)/(2) + 2*(theta)**(2) - (13)/(48) * theta**(3)",
            "1 + (theta)/(2) + 2*(theta**(2)) - (13)/(48) * theta**(3)",
            "1 + (theta)/(2) + 2*theta**(2) - (13*theta**(3))/(48)",
            "1 +  + (theta)/(2) + 2*theta**(2) - 13*(theta**(3))/(48)",
            "1 + ((theta)/(2)) + 2*theta**(2) - 13*(theta**(3))/(48)",
            "1 + (theta)/(2) + (2) * theta**(2) - (13*theta**(3))/(48)",
            "1 + (theta)/(2) + 2*(theta)**(2) - (13*theta**(3))/(48)",
            "1 + (theta)/(2) + 2*theta**(2) - (13*(theta**(3)))/(48)",
            "1 + (theta)/(2) + 2*theta**(2) - 13*(theta**(3))/(48)",
            "1 + ((theta)/(2)) + 2*(theta)**(2) - (13*(theta**(3))/(48))",
            "1 + (theta)/(2) + 2*(theta)**(2) - (13*(theta)**(3))/(48)",
            "1 + (theta)/(2) + 2*(theta)**(2) - 13*((theta)**(3))/(48)",
            "1 + (theta)/(2) + 2*theta**(2) - (theta**(3)*(13))/(48)",
            "1 + (theta)/(2) + 2*theta**(2) - theta**(3)*(13)/(48)",
            "(48*theta - 26*theta**(3))/(96) + 1 + 2*theta**(2)",
            "(theta)/(2) + 1 + 2*theta**(2) - (13)/(48) * theta**(3)",
            "(theta)/(2) + 1 + 2*theta**(2) - (13*theta**(3))/(48)",
            "(theta)/(2) - (13)/(48) * theta**(3) + 1 + 2*theta**(2)",
            "(theta)/(2) - (13)/(48) * theta**(3) + 2*theta**(2) + 1",
            "(theta)/(2) - (13*theta**(3))/(48) + (1 + 2*theta**(2))",
            "(theta)/(2) - (13*theta**(3))/(48) + 1 + 2*theta**(2)",
            "(theta)/(2) - 13*(theta**(3))/(48) +  + 1 + 2*theta**(2)",
            "(theta)/(2) - 13*(theta**(3))/(48) + 1 + 2*theta**(2)",
            "(theta)/(2) - 13*((theta)**(3))/(48) + 1 + 2*(theta)**(2)",
            "(theta)/(2) - 13*(theta**(3))/(48) + (1 + 2*(theta**(2)))",
            "(theta)/(2) - (13*theta**(3))/(48) + 2*theta**(2) + 1",
            "(theta)/(2) - 13*((theta)**(3))/(48) + 2*theta**(2) + 1",
            "(theta)/(2) + 2*theta**(2) - (13)/(48) * theta**(3) + 1",
            "(theta)/(2) + 2*theta**(2) - 13*(theta**(3))/(48) + 1",
            "(theta)/(2) - (theta**(3))/(48) - (1)/(4) * theta**(3) + 1 + 2*theta**(2)"
        ]
    },
    "S_o*(1 - alpha) * pi*R_p**(2)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(1 - alpha) * pi*(R_p)**(2) * S_o",
            "(1 - alpha) * pi*R_p**(2)*S_o",
            "(1 - alpha) * pi*S_o*(R_p)**(2)",
            "(1 - alpha) * pi*S_o*R_p**(2)",
            "(1 - alpha) * S_o*pi*R_p**(2)",
            "((1 - alpha) * S_o) * (pi*R_p**(2))",
            "((1 - alpha) * S_o*pi*R_p**(2))",
            "(1 - alpha) * (S_o) * (pi) * (R_p)**(2)",
            "(1 - alpha) * (S_o*pi*(R_p)**(2))",
            "(1 - alpha) * S_o*pi*(R_p)**(2)",
            "(1 - alpha) * S_o*pi*R_p**(2)",
            "(1 - alpha) * S_o*R_p**(2)*pi",
            "pi*(1 - alpha) * (R_p)**(2) * S_o",
            "pi*(1 - alpha) * S_o*R_p**(2)",
            "pi*(R_p)**(2) * (1 - alpha) * S_o",
            "(pi*R_p**(2)) * ((1 - alpha) * S_o)",
            "pi*(R_p)**(2) * (1 - alpha) * S_o",
            "pi*R_p**(2)*(1 - alpha) * S_o",
            "(pi*R_p**(2)*S_o) * (1 - alpha)",
            "pi*(R_p)**(2) * S_o - pi*(R_p)**(2) * alpha*S_o",
            "pi*(R_p)**(2) * (S_o) * (1 - alpha)",
            "pi*(R_p)**(2) * S_o*(1 - alpha)",
            "pi*R_p**(2)*S_o*(1 - alpha)",
            "(pi*R_p**(2)*S_o) - (alpha*pi*R_p**(2)*S_o)",
            "pi*R_p**(2)*(S_o - alpha*S_o)",
            "pi*(S_o) * (R_p)**(2) * (1 - alpha)",
            "pi*S_o*R_p**(2)*(1 - alpha)",
            "pi*S_o*R_p**(2) - pi*S_o*R_p**(2)*alpha",
            "(R_p)**(2) * pi*S_o*(1 - alpha)",
            "R_p**(2)*pi*S_o*(1 - alpha)",
            "(R_p)**(2) * pi*S_o - (R_p)**(2) * pi*S_o*alpha",
            "R_p**(2)*pi*(S_o - S_o*alpha)",
            "R_p**(2)*S_o*(1 - alpha) * pi",
            "(S_o) * (1 - alpha) * (pi) * R_p**(2)",
            "S_o*(1 - alpha) * pi*(R_p)**(2)",
            "S_o*(1 - alpha) * pi*R_p**(2)",
            "S_o*pi*(R_p**(2)) * (1 - alpha)",
            "S_o*pi*R_p**(2)*(1 - alpha)",
            "(S_o) * (1 - alpha) * pi*(R_p)**(2)",
            "S_o*(1 - alpha) * (pi*R_p**(2))",
            "S_o*(1 - alpha) * pi*(R_p)**(2)",
            "S_o*(1 - alpha) * pi*R_p**(2)",
            "(S_o) * (1 - alpha) * (R_p)**(2) * pi",
            "S_o*(1 - alpha) * ((R_p)**(2) * pi)",
            "S_o*(1 - alpha) * (R_p)**(2) * pi",
            "S_o*(1 - alpha) * (R_p**(2)*pi)",
            "S_o*(1 - alpha) * R_p**(2)*pi",
            "- S_o*(alpha - 1) * pi*(R_p)**(2)",
            "(S_o - alpha*S_o) * (pi*(R_p)**(2))",
            "(S_o - alpha*S_o) * (pi*R_p**(2))",
            "(S_o - alpha*S_o) * pi*(R_p)**(2)",
            "(S_o - alpha*S_o) * pi*R_p**(2)",
            "(S_o*pi*R_p**(2)) * (1 - alpha)",
            "S_o*pi*(R_p)**(2) * (1 - alpha)",
            "S_o*pi*R_p**(2)*(1 - alpha)",
            "S_o*pi*R_p**(2) - alpha*S_o*pi*R_p**(2)",
            "((S_o) * (R_p)**(2)) * pi*(1 - alpha)",
            "S_o*R_p**(2)*pi*(1 - alpha)",
            "S_o*R_p**(2)*pi - alpha*S_o*R_p**(2)*pi"
        ]
    },
    "((2*sqrt(3)m*g)/(3))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(2*g*m)/(sqrt(3))",
            "2*g*(m)/(sqrt(3))",
            "(2*g*m*sqrt(3))/(3)",
            "(2*m*g)/(3**((1)/(2)))",
            "2*m*(g)/(3**((1)/(2)))",
            "(2*(m*g))/(3**((1)/(2)))",
            "((2*m*g))/(sqrt(3))",
            "((2*m*g)/(sqrt(3)))",
            "(2*m*g)/(sqrt(3))",
            "2*m*(g)/(sqrt(3))",
            "2*(m*g)/(sqrt(3))",
            "(2*m*g*sqrt(3))/(3)",
            "2*m*g*(sqrt(3))/(3)",
            "(2*sqrt(3))/(3) * m*g",
            "2*(sqrt(3))/(3) * m*g",
            "(2)/(sqrt(3)) * (m*g)",
            "(2)/(sqrt(3)) * m*g",
            "(2*sqrt(3) * m*g)/(3)",
            "2*sqrt(3) * m*(g)/(3)",
            "2*(sqrt(3) * m*g)/(3)",
            "((m*g) * 2)/(sqrt(3))",
            "(m*g*2*sqrt(3))/(3)",
            "m*(g)/((3**((1)/(2)))/(2))",
            "(m*g)/(((sqrt(3))/(2)))",
            "(m*g)/((sqrt(3))/(2))",
            "(((sqrt(3)) * 2*m*g))/(3)"
        ]
    },
    "T_1 == ((2*sqrt(3)m*g)/(3))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(m*g)/((sqrt(3))/(2)) == T_1",
            "T_1 == ((2)/(3) * sqrt(3)) * m*g",
            "T_1 == (2)/(3) * sqrt(3) * m*g",
            "T_1 == (2*g*m)/(sqrt(3))",
            "T_1 == 2*m*(g)/((3)**((1)/(2)))",
            "T_1 == ((2*m*g)/(sqrt(3)))",
            "T_1 == (2*m*g)/(sqrt(3))",
            "T_1 == 2*m*(g)/(sqrt(3))",
            "T_1 == (2*(m*g))/(sqrt(3))",
            "T_1 == 2*(m*g)/(sqrt(3))",
            "T_1 == (2*m*g*sqrt(3))/(3)",
            "T_1 == ((2*sqrt(3))/(3)) * m*g",
            "T_1 == (2*sqrt(3))/(3) * m*g",
            "T_1 == 2*(sqrt(3))/(3) * m*g",
            "T_1 == (2)/(sqrt(3)) * m*g",
            "T_1 == ((2*sqrt(3)) * m*g)/(3)",
            "T_1 == (2*sqrt(3) * m*g)/(3)",
            "T_1 == 2*sqrt(3) * m*(g)/(3)",
            "T_1 == (m*g)/((1)/(2) * sqrt(3))",
            "T_1 == (m*g) * (2)/(sqrt(3))",
            "T_1 == m*g*(2)/(sqrt(3))",
            "T_1 == m*g*(2*sqrt(3))/(3)",
            "T_1 == m*(g)/((3**((1)/(2)))/(2))",
            "T_1 == ((m*g))/(((sqrt(3))/(2)))",
            "T_1 == (m*g)/(((sqrt(3))/(2)))",
            "T_1 == (m*g)/((sqrt(3))/(2))",
            "T_1 == m*(g)/((sqrt(3))/(2))",
            "T_1 == m*(g)/(sqrt(3)) * 2",
            "T_1 == sqrt((4)/(3) * m**(2)*g**(2))"
        ]
    },
    "(1/2)*sqrt(a**2+b**2)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "((1)/(2)) * (a**(2) + b**(2))**((1)/(2))",
            "((1)/(2)) * sqrt(a**(2) + b**(2))",
            "(1)/(2) * (sqrt((a**(2)) + (b**(2))))",
            "(1)/(2) * (sqrt(a**(2) + b**(2)))",
            "(1)/(2) * sqrt((a**(2) + b**(2)))",
            "(1)/(2) * sqrt(a**(2) + b**(2))",
            "(1)/(2) * (sqrt(b**(2) + a**(2)))",
            "(1)/(2) * sqrt(b**(2) + a**(2))",
            "(((1)/(4)) * a**(2) + ((1)/(4)) * b**(2))**((1)/(2))",
            "((1)/(4) * (a)**(2) + (1)/(4) * b**(2))**((1)/(2))",
            "((1)/(4) * a**(2) + (1)/(4) * b**(2))**((1)/(2))",
            "(((a)/(2))**(2) + ((b)/(2))**(2))**((1)/(2))",
            "(((a**(2))/(4)) + (b**(2))/(4))**((1)/(2))",
            "((a**(2))/(4) + (b**(2))/(4))**((1)/(2))",
            "((a**(2) + b**(2))**((1)/(2)))/(2)",
            "sqrt(((1)/(2) * a)**(2) + ((1)/(2) * b)**(2))",
            "sqrt(((1)/(4)) * a**(2) + ((1)/(4)) * b**(2))",
            "sqrt(((1)/(4)) * a**(2) + (1)/(4) * b**(2))",
            "sqrt((1)/(4) * a**(2) + (1)/(4) * b**(2))",
            "sqrt((1)/(4) * (a**(2) + b**(2)))",
            "sqrt((1)/(4) * b**(2) + (1)/(4) * a**(2))",
            "sqrt((1)/(4) * (b**(2) + a**(2)))",
            "sqrt(((a)/(2))**(2) + ((b)/(2))**(2))",
            "sqrt((a**(2))/(4) + (b**(2))/(4))",
            "((sqrt(a**(2) + b**(2)))/(2))",
            "(sqrt((a)**(2) + (b**(2))))/(2)",
            "(sqrt((a**(2) + b**(2))))/(2)",
            "(sqrt((a**(2)) + (b**(2))))/(2)",
            "(sqrt(a**(2) + b**(2)))/(2)",
            "sqrt((a**(2) + b**(2))/(4))",
            "sqrt(a*(a)/(4) + b*(b)/(4))",
            "sqrt(((b)/(2))**(2) + ((a)/(2))**(2))",
            "(sqrt(b**(2) + a**(2)))/(2)",
            "sqrt(((b**(2)) + (a**(2)))/(4))",
            "sqrt((b**(2) + a**(2))/(4))"
        ]
    },
    "d==(1/2)*sqrt(a**2+b**2)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(1)/(2) * sqrt(a**(2) + b**(2)) == d",
            "d == ((1)/(2)) * (sqrt(a**(2) + b**(2)))",
            "d == ((1)/(2)) * sqrt(a**(2) + b**(2))",
            "d == (1)/(2) * (sqrt(a**(2) + b**(2)))",
            "d == (1)/(2) * sqrt(a**(2) + b**(2))",
            "d == (1)/(2) * sqrt(b**(2) + a**(2))",
            "d == (((a)/(2))**(2) + ((b)/(2))**(2))**((1)/(2))",
            "d == (((a**(2))/(4)) + ((b**(2))/(4)))**((1)/(2))",
            "d == ((a**(2) + b**(2))**((1)/(2)))/(2)",
            "d == sqrt((((1)/(2)) * a)**(2) + (((1)/(2)) * b)**(2))",
            "d == sqrt(((1)/(2) * a)**(2) + ((1)/(2) * b)**(2))",
            "d == sqrt(((1)/(2) * b)**(2) + ((1)/(2) * a)**(2))",
            "d == (sqrt((1)/(4) * a**(2) + (1)/(4) * b**(2)))",
            "d == sqrt(((1)/(4) * a**(2) + (1)/(4) * b**(2)))",
            "d == sqrt(((1)/(4) * a**(2)) + ((1)/(4) * b**(2)))",
            "d == sqrt(((1)/(4) * a**(2)) + (1)/(4) * b**(2))",
            "d == sqrt((1)/(4) * a**(2) + (1)/(4) * b**(2))",
            "d == sqrt((1)/(4) * a*a + (1)/(4) * b*b)",
            "d == sqrt(((a)/(2))**((2)) + ((b)/(2))**((2)))",
            "d == sqrt(((a)/(2))**(2) + (((b)/(2))**(2)))",
            "d == sqrt(((a)/(2))**(2) + ((b)/(2))**(2))",
            "d == sqrt(((a**(2))/(4) + (b**(2))/(4)))",
            "d == sqrt(((a**(2))/(4)) + ((b**(2))/(4)))",
            "d == sqrt(((a**(2))/(4)) + (b**(2))/(4))",
            "d == sqrt((a**(2))/(4) + (b**(2))/(4))",
            "d == sqrt(a**(2) + b**(2)) * ((1)/(2))",
            "d == sqrt(a**(2) + b**(2)) * (1)/(2)",
            "d == ((sqrt(a**(2) + b**(2))))/(2)",
            "d == ((sqrt(a**(2) + b**(2)))/(2))",
            "d == (sqrt((a)**(2) + (b)**(2)))/(2)",
            "d == (sqrt((a**(2) + b**(2))))/(2)",
            "d == (sqrt((a**(2)) + b**(2)))/(2)",
            "d == (sqrt(a**(2) + (b)**(2)))/(2)",
            "d == (sqrt(a**(2) + b**(2)))/(2)",
            "d == sqrt((a**(2) + b**(2))/(4))",
            "d == (sqrt(a*a + b*b))/(2)",
            "d == sqrt(((b)/(2))**(2) + ((a)/(2))**(2))",
            "d == (sqrt(b**(2) + a**(2)))/(2)",
            "d == sqrt((b**(2) + a**(2))/(4))",
            "sqrt(((a)/(2))**(2) + ((b)/(2))**(2)) == d",
            "(sqrt(a**(2) + b**(2)))/(2) == d"
        ]
    },
    "(2/3)*sqrt(a**2-(1/4)*b**2)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(1)/(3) * (4*a**(2) - b**(2))**((1)/(2))",
            "((1)/(3)) * (sqrt((4*a**(2) - b**(2))))",
            "(1)/(3) * (sqrt(4*a**(2) - b**(2)))",
            "(1)/(3) * sqrt(4*a**(2) - b**(2))",
            "(2)/(3) * (a**(2) - (1)/(4) * b**(2))**((1)/(2))",
            "(2)/(3) * ((a**(2) - ((b)/(2))**(2))**((1)/(2)))",
            "(2)/(3) * (a**(2) - ((b)/(2))**(2))**((1)/(2))",
            "((2)/(3)) * (a**(2) - ((b**(2))/(4)))**((1)/(2))",
            "((2)/(3)) * (a**(2) - (b**(2))/(4))**((1)/(2))",
            "(2)/(3) * ((a**(2)) - (b**(2))/(4))**((1)/(2))",
            "(2)/(3) * (a**(2) - (b**(2))/(4))**((1)/(2))",
            "(2)/(3) * a*(cos(arcsin((b)/(2*a))))",
            "(2)/(3) * a*cos(arcsin((b)/(2*a)))",
            "(2)/(3) * sqrt( - ((1)/(2) * b)**(2) + a**(2))",
            "(2)/(3) * sqrt( - (1)/(4) * (b**(2)) + (a**(2)))",
            "((2)/(3)) * sqrt(a**(2) - ((1)/(2) * b)**(2))",
            "(2)/(3) * (sqrt(a**(2) - (((1)/(2)) * b)**(2)))",
            "(2)/(3) * (sqrt(a**(2) - ((1)/(2) * b)**(2)))",
            "(2)/(3) * sqrt(a**(2) - ((1)/(2) * b)**(2))",
            "((2)/(3)) * (sqrt((a**(2)) - ((1)/(4)) * b**(2)))",
            "((2)/(3)) * sqrt(a**(2) - ((1)/(4)) * b**(2))",
            "(2)/(3) * (sqrt(a**(2) - ((1)/(4)) * b**(2)))",
            "(2)/(3) * (sqrt(a**(2) - (1)/(4) * b**(2)))",
            "(2)/(3) * sqrt((a**(2) - (1)/(4) * b**(2)))",
            "(2)/(3) * sqrt(a**(2) - ((1)/(4) * b**(2)))",
            "(2)/(3) * sqrt(a**(2) - (1)/(4) * b**(2))",
            "((2)/(3)) * (sqrt((a)**(2) - ((b)/(2))**(2)))",
            "((2)/(3)) * sqrt(a**(2) - ((b)/(2))**(2))",
            "(2)/(3) * (sqrt((a**(2)) - ((b)/(2))**(2)))",
            "(2)/(3) * (sqrt(a**(2) - ((b)/(2))**(2)))",
            "(2)/(3) * sqrt((a)**(2) - ((b)/(2))**(2))",
            "(2)/(3) * sqrt((a**(2)) - ((b)/(2))**(2))",
            "(2)/(3) * sqrt(a**(2) - ((b)/(2))**(2))",
            "((2)/(3)) * (sqrt((a**(2)) - (b**(2))/(4)))",
            "((2)/(3)) * (sqrt(a**(2) - (b**(2))/(4)))",
            "((2)/(3)) * sqrt(a**(2) - (b**(2))/(4))",
            "(2)/(3) * (sqrt(a**(2) - ((b**(2))/(4))))",
            "(2)/(3) * (sqrt(a**(2) - (b**(2))/(4)))",
            "(2)/(3) * sqrt(a**(2) - ((b**(2))/(4)))",
            "(2)/(3) * sqrt(a**(2) - (b**(2))/(4))",
            "(2)/(3) * sqrt(a*a - b*(b)/(4))",
            "(2*((a**(2) - (1)/(4) * b**(2))**((1)/(2))))/(3)",
            "2*((a**(2) - ((b)/(2))**(2))**((1)/(2)))/(3)",
            "(2*sqrt(4*a**(2) - b**(2)))/(6)",
            "(2*sqrt(a**(2) - ((1)/(2) * b)**(2)))/(3)",
            "(2*sqrt(a**(2) - (1)/(4) * b**(2)))/(3)",
            "2*((sqrt(a**(2) - (1)/(4) * b**(2)))/(3))",
            "2*(sqrt(a**(2) - (1)/(4) * b**(2)))/(3)",
            "(2*sqrt(a**(2) - ((b)/(2))**(2)))/(3)",
            "2*(sqrt(a**(2) - ((b)/(2))**(2)))/(3)",
            "(2*sqrt(a**(2) - ((b**(2))/(4))))/(3)",
            "(2*sqrt(a**(2) - (b**(2))/(4)))/(3)",
            "(2*(sqrt(a**(2) - ((b**(2))/(4))))/(3))",
            "2*(sqrt(a**(2) - (b**(2))/(4)))/(3)",
            "(2*(sqrt( - ((b**(2))/(4)) + a**(2)))/(3))",
            "((4*a**(2) - b**(2))**((1)/(2)))/(3)",
            "(sqrt((2*a + b) * (2*a - b)))/(3)",
            "sqrt((4)/(9) * (a**(2) - (1)/(4) * b**(2)))",
            "sqrt((4)/(9) * a**(2) - (1)/(9) * b**(2))",
            "sqrt((4*a**(2))/(9) - (1)/(9) * b**(2))",
            "(sqrt((4*a**(2)) - (b**(2))))/(3)",
            "(sqrt(4*a**(2) - b**(2)))/(3)",
            "sqrt((4*a**(2) - b**(2))/(9))",
            "sqrt(a**(2) - ((1)/(2) * b)**(2)) * (2)/(3)",
            "sqrt(a**(2) - b**(2)*((1)/(4))) * (2)/(3)",
            "((sqrt((a)**(2) - ((b)/(2))**(2))) * 2)/(3)",
            "(sqrt(a**(2) - ((b)/(2))**(2))) * (2)/(3)",
            "sqrt(a**(2) - ((b)/(2))**(2)) * (2)/(3)",
            "sqrt(a**(2) - (b**(2))/(4)) * ((2)/(3))",
            "sqrt(a**(2) - (b**(2))/(4)) * (2)/(3)"
        ]
    },
    "d==(2/3)*sqrt(a**2-(1/4)*b**2)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "d == (1)/(3) * sqrt(4*a**(2) - b**(2))",
            "d == (1)/(3) * sqrt( - b**(2) + 4*a**(2))",
            "d == (2)/(3) * sqrt((4*a**(2) - b**(2))/(4))",
            "d == (2)/(3) * (sqrt(a**(2) - ((1)/(2) * b)**(2)))",
            "d == (2)/(3) * sqrt((a)**(2) - ((1)/(2) * b)**(2))",
            "d == (2)/(3) * sqrt((a**(2) - ((1)/(2) * b)**(2)))",
            "d == (2)/(3) * sqrt(a**(2) - ((1)/(2) * b)**(2))",
            "d == ((2)/(3)) * sqrt(a**(2) - ((1)/(4)) * b**(2))",
            "d == (2)/(3) * (sqrt(a**(2) - (1)/(4) * b**(2)))",
            "d == (2)/(3) * sqrt((a**(2) - (1)/(4) * b**(2)))",
            "d == (2)/(3) * sqrt(a**(2) - (1)/(4) * b**(2))",
            "d == (2)/(3) * sqrt(a**(2) - (b*(1)/(2))**(2))",
            "d == ((2)/(3)) * sqrt(a**(2) - ((b)/(2))**(2))",
            "d == (2)/(3) * (sqrt((a**(2)) - ((b)/(2))**(2)))",
            "d == (2)/(3) * (sqrt(a**(2) - ((b)/(2))**(2)))",
            "d == (2)/(3) * sqrt((a**(2) - ((b)/(2))**(2)))",
            "d == (2)/(3) * sqrt((a**(2)) - ((b)/(2))**(2))",
            "d == (2)/(3) * sqrt(a**(2) - ((b)/(2))**(2))",
            "d == ((2)/(3)) * (sqrt((a**(2)) - (b**(2))/(4)))",
            "d == ((2)/(3)) * sqrt(a**(2) - (b**(2))/(4))",
            "d == (2)/(3) * (sqrt(a**(2) - ((b**(2))/(4))))",
            "d == (2)/(3) * (sqrt(a**(2) - (b**(2))/(4)))",
            "d == (2)/(3) * sqrt(a**(2) - ((b**(2))/(4)))",
            "d == (2)/(3) * sqrt(a**(2) - (b**(2))/(4))",
            "d == (2)/(3) * sqrt( - ((b)/(2))**(2) + a**(2))",
            "d == (2*(a**(2) - ((b**(2))/(4)))**((1)/(2)))/(3)",
            "d == (2*sqrt(4*a**(2) - b**(2)))/(6)",
            "d == (2*(sqrt(((a)**(2) - ((1)/(2) * b)**(2)))))/(3)",
            "d == (2*sqrt((a**(2) - (1)/(4) * b**(2))))/(3)",
            "d == (2*sqrt(a**(2) - (1)/(4) * b**(2)))/(3)",
            "d == (2*(sqrt(a**(2) - (1)/(4) * b**(2))))/(3)",
            "d == 2*(sqrt(a**(2) - (1)/(4) * b**(2)))/(3)",
            "d == (2*sqrt((a**(2) - ((b)/(2))**(2))))/(3)",
            "d == (2*sqrt(a**(2) - ((b)/(2))**(2)))/(3)",
            "d == (2*(sqrt(a**(2) - ((b)/(2))**(2))))/(3)",
            "d == 2*((sqrt(a**(2) - ((b)/(2))**(2)))/(3))",
            "d == 2*(sqrt((a**(2) - ((b)/(2))**(2))))/(3)",
            "d == 2*(sqrt(a**(2) - ((b)/(2))**(2)))/(3)",
            "d == (2*sqrt((a**(2) - (b**(2))/(4))))/(3)",
            "d == (2*sqrt(a**(2) - ((b**(2))/(4))))/(3)",
            "d == (2*sqrt(a**(2) - (b**(2))/(4)))/(3)",
            "d == (2*(sqrt(a**(2) - ((b**(2))/(4))))/(3))",
            "d == 2*(sqrt(a**(2) - ((b**(2))/(4))))/(3)",
            "d == 2*(sqrt(a**(2) - (b**(2))/(4)))/(3)",
            "d == sqrt((4)/(9) * a**(2) - (1)/(9) * b**(2))",
            "d == (sqrt((4*a**(2) - b**(2))))/(3)",
            "d == (sqrt(4*a**(2) - b**(2)))/(3)",
            "d == sqrt((4*a**(2) - b**(2))/(9))",
            "d == (sqrt(a**(2) - ((1)/(2) * b)**(2))) * (2)/(3)",
            "d == (sqrt(a**(2) - ((b)/(2))**(2))) * (2)/(3)",
            "d == sqrt((a**(2) - ((b)/(2))**(2))) * (2)/(3)",
            "d == sqrt(a**((2)) - ((b)/(2))**((2))) * (2)/(3)",
            "d == sqrt(a**(2) - ((b)/(2))**(2)) * (2)/(3)",
            "d == ((sqrt(a**(2) - ((b)/(2))**(2)))/(3)) * 2",
            "d == (sqrt(a**(2) - (b**(2))/(4))) * (2)/(3)",
            "d == sqrt(a**(2) - (b**(2))/(4)) * (2)/(3)"
        ]
    },
    "a/sqrt(3)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "((1)/(2) * a)/((sqrt(3))/(2))",
            "(1)/(3) * sqrt(3) * a",
            "((1)/(sqrt(3))) * a",
            "(1)/(sqrt(3)) * a",
            "(2*(((3)/(4))**((1)/(2)) * a))/(3)",
            "(2)/(3) * (a*sqrt(3))/(2)",
            "(2)/(3) * a*sqrt((3)/(4))",
            "(2)/(3) * sqrt((3)/(4)) * a",
            "(2)/(3) * (sqrt((3)/(4) * a**(2)))",
            "(2)/(3) * sqrt((3)/(4) * a**(2))",
            "(2)/(3) * (sqrt((3*a**(2))/(4)))",
            "(2)/(3) * sqrt(3*(a**(2))/(4))",
            "((2)/(3)) * sqrt(a**(2) - ((1)/(2) * a)**(2))",
            "(2)/(3) * sqrt(a**(2) - ((1)/(2) * a)**(2))",
            "(2)/(3) * sqrt(a**(2) - (1)/(4) * a**(2))",
            "(2)/(3) * (sqrt((a**(2)) - ((a)/(2))**(2)))",
            "(2)/(3) * sqrt(a**(2) - ((a)/(2))**(2))",
            "(2)/(3) * sqrt(a**(2) - (a**(2))/(4))",
            "(2*a)/(2*sqrt(3))",
            "(2*a*sqrt(3))/(6)",
            "(2*sqrt((3)/(4) * a**(2)))/(3)",
            "2*(sqrt(3))/(6) * a",
            "((2)/(sqrt(3)) * a)/(2)",
            "2*(sqrt(3*(a**(2))/(4)))/(3)",
            "(2*sqrt(3) * a)/(6)",
            "2*(sqrt(a**(2) - (1)/(4) * a**(2)))/(3)",
            "2*(sqrt((a)**(2) - ((a)/(2))**(2)))/(3)",
            "(2*sqrt(a**(2) - (a**(2))/(4)))/(3)",
            "2*(sqrt(a**(2) - ((a**(2))/(4))))/(3)",
            "2*(sqrt(a**(2) - (a**(2))/(4)))/(3)",
            "(3**((1)/(2)))/(3) * a",
            "(3)**( - (1)/(2)) * a",
            "((a**(2))/(3))**((1)/(2))",
            "((a)/(2))/((sqrt(3))/(2))",
            "(a)/((3)**((1)/(2)))",
            "(a)/(3**((1)/(2)))",
            "(a)/(3) * sqrt(3)",
            "((a)/(sqrt(3)))",
            "(a)/(sqrt(3))",
            "(a*(sqrt(3)))/(3)",
            "(a*(sqrt(3))/(3))",
            "(a*sqrt(3))/(3)",
            "a*((sqrt(3))/(3))",
            "a*(sqrt(3))/(3)",
            "sqrt((1)/(3)) * a",
            "sqrt(3) * 2*(a)/(6)",
            "((sqrt(3))/(3)) * a",
            "(sqrt(3))/(3) * a",
            "sqrt((3)/(4)) * (2)/(3) * a",
            "sqrt((3)/(4) * a**(2)) * (2)/(3)",
            "(sqrt(3*a**(2)))/(3)",
            "(sqrt(3) * a)/(3)",
            "sqrt(3) * (a)/(3)",
            "sqrt((a**(2))/(3))",
            "sqrt((a**(2))/(4) + (1)/(12) * a**(2))",
            "(sqrt(a**(2) - ((a)/(2))**(2))) * (2)/(3)",
            "sqrt(a**(2) - ((a)/(2))**(2)) * (2)/(3)"
        ]
    },
    "d==a/sqrt(3)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "2*(sqrt(a**(2) - (a**(2))/(4)))/(3) == d",
            "d == (((1)/(2)) * (a))/((sqrt(3))/(2))",
            "d == ((1)/(2) * a)/((sqrt(3))/(2))",
            "d == (1)/(3) * sqrt(3) * a",
            "d == (1)/(sqrt(3)) * a",
            "d == (2)/(3) * ((3)/(4) * a**(2))**((1)/(2))",
            "d == (2)/(3) * sqrt((3)/(4) * a*a)",
            "d == (2)/(3) * sqrt((3*a**(2))/(4))",
            "d == ((2)/(3)) * sqrt((a)**(2) - (((1)/(2)) * a)**(2))",
            "d == (2)/(3) * (sqrt(a**(2) - ((1)/(2) * a)**(2)))",
            "d == (2)/(3) * sqrt((a**(2) - ((1)/(2) * a)**(2)))",
            "d == (2)/(3) * sqrt((a**(2) - (1)/(4) * a**(2)))",
            "d == (2)/(3) * (sqrt((a)**(2) - ((a)/(2))**(2)))",
            "d == (2)/(3) * (sqrt((a**(2)) - ((a)/(2))**(2)))",
            "d == (2)/(3) * sqrt((a**(2)) - ((a)/(2))**(2))",
            "d == (2)/(3) * sqrt(a**(2) - (a**(2))/(4))",
            "d == (2*a)/(2*sqrt(3))",
            "d == 2*a*(sqrt(3))/(6)",
            "d == 2*(a*sqrt(3))/(6)",
            "d == 2*((sqrt((3)/(4) * a**(2)))/(3))",
            "d == (2*sqrt((3*a**(2))/(4)))/(3)",
            "d == 2*(sqrt(3*(a**(2))/(4)))/(3)",
            "d == (2*sqrt(3*a**(2)))/(6)",
            "d == (2*(sqrt((a)**(2) - ((1)/(2) * a)**(2))))/(3)",
            "d == (2*sqrt(a**(2) - (1)/(4) * a**(2)))/(3)",
            "d == (2*sqrt((a**(2) - ((a)/(2))**(2))))/(3)",
            "d == (2*sqrt(a**(2) - ((a)/(2))**(2)))/(3)",
            "d == (2*(sqrt(a**(2) - ((a)/(2))**(2))))/(3)",
            "d == 2*((sqrt(a**(2) - ((a)/(2))**(2)))/(3))",
            "d == (2*sqrt(a**(2) - (a**(2))/(4)))/(3)",
            "d == ((3)**((1)/(2)) * a)/(3)",
            "d == (3**((1)/(2))*a)/(3)",
            "d == (((a)/(2)))/(((sqrt(3))/(2)))",
            "d == ((a)/(2))/((sqrt(3))/(2))",
            "d == (a)/(2*((sqrt(3))/(2)))",
            "d == (a)/(2*(sqrt(3))/(2))",
            "d == (a)/(3**((1)/(2)))",
            "d == ((a)/(sqrt(3)))",
            "d == (a)/(sqrt(3))",
            "d == ((a*sqrt(3)))/(3)",
            "d == ((a*sqrt(3))/(3))",
            "d == (a*sqrt(3))/(3)",
            "d == a*(sqrt(3))/(3)",
            "d == sqrt((2)/(3) * a**(2) - (1)/(3) * a**(2))",
            "d == ((((sqrt(3))/(2)) * a)/(3)) * 2",
            "d == (sqrt(3))/(3) * a",
            "d == (sqrt(3*a**(2)))/(3)",
            "d == (sqrt(3) * (a)/(3))",
            "d == (sqrt(3) * a)/(3)",
            "d == sqrt(3) * (a)/(3)",
            "d == (sqrt((a**(2) - (1)/(4) * a**(2))) * (2))/(3)",
            "d == sqrt((a**(2))/(3))",
            "d == (sqrt(a**(2) - ((a)/(2))**(2))) * (2)/(3)",
            "d == sqrt((a**(2) - ((a)/(2))**((2)))) * (2)/(3)",
            "d == sqrt((a**(2) - ((a)/(2))**(2))) * (2)/(3)",
            "d == sqrt(a**(2) - ((a)/(2))**(2)) * (2)/(3)",
            "d == ((sqrt(a**(2) - ((a)/(2))**(2)))/(3)) * 2",
            "d == sqrt(((a*sqrt(3))/(6))**(2) + ((a)/(2))**(2))"
        ]
    },
    "a/sqrt(2)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(((1)/(2)) * a**(2))**((1)/(2))",
            "(1)/(2) * a*sqrt(2)",
            "(1)/(2) * sqrt(2) * a",
            "((1)/(2)) * sqrt(2*a**(2))",
            "(1)/(2) * sqrt(2*a**(2))",
            "(1)/(2) * (sqrt(2*(a**(2))))",
            "(1)/(2) * sqrt(a**(2) + a**(2))",
            "(1)/(sqrt(2)) * a",
            "(2**((1)/(2)))/(2) * a",
            "(2)**( - (1)/(2)) * a",
            "(2**((1)/(2))*a)/(2)",
            "((2*a**(2))**((1)/(2)))/(2)",
            "(a)/((2)**((1)/(2)))",
            "(a)/(2**((1)/(2)))",
            "a*(2)**( - (1)/(2))",
            "((a**(2))/(2))**((1)/(2))",
            "(((a)/(2))**(2) + ((a)/(2))**(2))**((1)/(2))",
            "((a**(2) + a**(2))**((1)/(2)))/(2)",
            "(a)/(2) * sqrt(2)",
            "(a)/(sqrt(2))",
            "(a*(sqrt(2)))/(2)",
            "(a*sqrt(2))/(2)",
            "a*(sqrt(2))/(2)",
            "sqrt(((1)/(2))) * a",
            "sqrt((1)/(2)) * a",
            "sqrt(((1)/(2)) * a**(2))",
            "sqrt((1)/(2) * a**(2))",
            "sqrt(((1)/(2) * a)**(2) + ((1)/(2) * a)**(2))",
            "((sqrt(2))/(2)) * a",
            "(sqrt(2))/(2) * a",
            "(sqrt(2) * a)/(2)",
            "sqrt(2) * (a)/(2)",
            "(sqrt(2*a**(2)))/(2)",
            "(sqrt(2*(a**(2))))/(2)",
            "sqrt(2*((a)/(2))**((2)))",
            "sqrt(2*((a)/(2))**(2))",
            "sqrt((2*a**(2))/(4))",
            "sqrt(2*(a**(2))/(4))",
            "sqrt((a**(2))/(2))",
            "sqrt(((a)/(2))**(2) + ((a)/(2))**(2))",
            "(sqrt(a**(2) + a**(2)))/(2)"
        ]
    },
    "d==a/sqrt(2)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(1)/(2) * sqrt(a**(2) + a**(2)) == d",
            "d == ((1)/(2) * a**(2))**((1)/(2))",
            "d == (1)/(2) * (a*sqrt(2))",
            "d == (1)/(2) * a*sqrt(2)",
            "d == (1)/(2) * sqrt(2) * a",
            "d == (1)/(2) * (sqrt(2*a**(2)))",
            "d == (1)/(2) * sqrt(2*a**(2))",
            "d == (1)/(2) * (sqrt(a**(2) + a**(2)))",
            "d == (1)/(2) * sqrt(a**(2) + a**(2))",
            "d == ((2)**((1)/(2)))/(2) * a",
            "d == ((a**(2))/(2))**((1)/(2))",
            "d == (((a)/(2))**(2) + ((a)/(2))**(2))**((1)/(2))",
            "d == (a)/(2) * sqrt(2)",
            "d == a*sqrt((1)/(2))",
            "d == (a)/(sqrt(2))",
            "d == (a*(sqrt(2)))/(2)",
            "d == (a*sqrt(2))/(2)",
            "d == a*(sqrt(2))/(2)",
            "d == sqrt((1)/(2)) * a",
            "d == (sqrt((1)/(2) * a**(2)))",
            "d == sqrt(((1)/(2) * a**(2)))",
            "d == sqrt((1)/(2) * a**(2))",
            "d == sqrt((((1)/(2)) * a)**(2) + (((1)/(2)) * a)**(2))",
            "d == sqrt(((1)/(2) * a)**(2) + ((1)/(2) * a)**(2))",
            "d == sqrt((1)/(2) * a*a)",
            "d == sqrt((1)/(4) * a**(2) + (1)/(4) * a**(2))",
            "d == sqrt(2*((1)/(2) * a)**(2))",
            "d == (sqrt(2))/(2) * a",
            "d == sqrt((2)/(4) * a**(2))",
            "d == (sqrt(2) * a)/(2)",
            "d == sqrt(2) * (a)/(2)",
            "d == (sqrt(2*a**(2)))/(2)",
            "d == (sqrt(2*(a**(2))))/(2)",
            "d == sqrt(2*((a)/(2))**(2))",
            "d == sqrt(((2*a**(2))/(4)))",
            "d == sqrt((2*a**(2))/(4))",
            "d == sqrt(((a)**(2))/(2))",
            "d == sqrt(((a**(2))/(2)))",
            "d == sqrt((a**(2))/(2))",
            "d == sqrt((a**(2))/(2**(2)) + (a**(2))/(2**(2)))",
            "d == sqrt(((a)/(2))**(2) + ((a)/(2))**(2))",
            "d == sqrt(((a)**(2))/(4) + ((a)**(2))/(4))",
            "d == sqrt(((a**(2))/(4)) + ((a**(2))/(4)))",
            "d == sqrt((a**(2))/(4) + (a**(2))/(4))",
            "d == sqrt(a**(2) + a**(2)) * ((1)/(2))",
            "d == ((sqrt(a**(2) + a**(2))))/(2)",
            "d == (sqrt(((a**(2)) + (a**(2)))))/(2)",
            "d == (sqrt(a**((2)) + a**((2))))/(2)",
            "d == (sqrt(a**(2) + a**(2)))/(2)",
            "(sqrt(2*a**(2)))/(2) == d"
        ]
    },
    "cosec(x)-cos(x)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(1 + cos(x)**(2) * (cosec(x)**(2) - 1))/(cos(x) + cosec(x))",
            "(1 + cos(x)**(2) * cosec(x)**(2) - cos(x)**(2))/(cos(x) + cosec(x))",
            "(1 + cos(x)**(2) * cosec(x)**(4))/(cosec(x)**(2) * (cos(x) + cosec(x)))",
            "(1 - cos(x)**(2) + cos(x)**(2) * cosec(x)**(2))/(cos(x) + cosec(x))",
            "(1 - cos(x)**(2) + cos(x)**(4))/((1 - cos(x)**(2)) * (cos(x) + cosec(x)))",
            "((1 - cos(x)**(2) + cos(x)**(4))/(cos(x) + cosec(x)))/(1 - cos(x)**(2))",
            "(1 - cos(x)**(2) + cos(x)**(4))/(cos(x) - cos(x)**(3) + (1 - cos(x)**(2))**((1)/(2)))",
            "(1 - cos(x)**(2) + cot(x)**(2))/(cos(x) + cosec(x))",
            "((cosec(x)**(2) - 1 + (1)/(cosec(x)**(2))))/(cos(x) + cosec(x))",
            "((cosec(x)**(2)) - 1 + (1)/(cosec(x)**(2)))/(cos(x) + cosec(x))",
            "(cosec(x)**(2) - 1 + (1)/(cosec(x)**(2)))/(cos(x) + cosec(x))",
            "((cosec(x))**(2) - 1 + (cosec(x))**( - 2))/(cos(x) + cosec(x))",
            "(cosec(x)**(2) - 1 + sin(x)**(2))/(cos(x) + cosec(x))",
            "(cosec(x)**(2) * cos(x)**(2) + (1)/(cosec(x)**(2)))/(cos(x) + cosec(x))",
            "(cosec(x)**(2) * cos(x)**(2) + 1 - cos(x)**(2))/(cos(x) + cosec(x))",
            "(cosec(x)**(2) - cos(x)**(2))/(cosec(x) + cos(x))",
            "((cosec(x))**(2) - (cos(x))**(2))/((cos(x)) + cosec(x))",
            "((cosec(x))**(2) - (cos(x))**(2))/(cos(x) + cosec(x))",
            "((cosec(x))**(2) - cos(x)**(2))/(cos(x) + cosec(x))",
            "((cosec(x)**(2) - cos(x)**(2)))/(cos(x) + cosec(x))",
            "((cosec(x)**(2)) - (cos(x)**(2)))/(cos(x) + cosec(x))",
            "(cosec(x)**(2) - cos(x)**(2))/(cos(x) + cosec(x))",
            "cosec(x)**(2) * (cos(x)**(4) - cos(x)**(2) + 1)/(cosec(x) + cos(x))",
            "(cosec(x)**(2) * (cos(x)**(4) - cos(x)**(2) + 1))/((cos(x) + cosec(x)))",
            "(cosec(x)**(2) * (cos(x)**(4) - cos(x)**(2) + 1))/(cos(x) + cosec(x))",
            "(cosec(x)**(4) + 1 - cosec(x)**(2))/(cos(x) * cosec(x)**(2) + cosec(x)**(3))",
            "(cosec(x)**(4) - cosec(x)**(2) + 1)/(cosec(x)**(2) * (cos(x) + cosec(x)))",
            "(cosec(x)**(4) - cosec(x)**(2) + 1)/(cos(x) * cosec(x)**(2) + cosec(x)**(3))",
            "(cosec(x)**(4) * cos(x)**(2) + 1)/(cosec(x)**(2) * cos(x) + cosec(x)**(3))",
            "(cosec(x)**(4) * cos(x)**(2) + 1)/(cos(x) * cosec(x)**(2) + cosec(x)**(3))",
            "(cosec(x) * cosec(x) - cos(x) * cos(x))/(cos(x) + cosec(x))",
            "(cosec(x) - cos(x))",
            "cosec(x) - cos(x)",
            "((cosec(x) * cos(x))**(2) - cos(x)**(2) + 1)/(cos(x) + cosec(x))",
            "(cos(x)**(2) + (1)/(cosec(x)**(4)))/(cos(x) * (1)/(cosec(x)**(2)) + (1)/(cosec(x)))",
            "(cos(x)**(2) + (1 - cos(x)**(2))**(2))/(cos(x) * sqrt(1 - cos(x)**(2)) + 1) * cosec(x)",
            "(cos(x)**(2) * (cosec(x)**(2) - 1) + 1)/(cos(x) + cosec(x))",
            "(cos(x)**(2) * cosec(x)**(2) + ((1)/(cosec(x)**(2))))/(cos(x) + cosec(x))",
            "(cos(x)**(2) * cosec(x)**(2) + (1)/((cosec(x))**(2)))/(cos(x) + cosec(x))",
            "(cos(x)**(2) * cosec(x)**(2) + (1)/(cosec(x)**(2)))/(cos(x) + cosec(x))",
            "((cos(x))**(2) * (cosec(x))**(2) + 1 - (cos(x))**(2))/(cos(x) + cosec(x))",
            "((cos(x)**(2)) * (cosec(x)**(2)) + 1 - cos(x)**(2))/(cos(x) + cosec(x))",
            "(cos(x)**(2) * cosec(x)**(2) + 1 - cos(x)**(2))/(cos(x) + cosec(x))",
            "(cos(x)**(2) * cosec(x)**(2) + cosec(x)**( - 2))/(cos(x) + cosec(x))",
            "(cos(x)**(2) * cosec(x)**(2) + cosec(x)**(-2))/(cos(x) + cosec(x))",
            "(cos(x)**(2) * cosec(x)**(2) - cos(x)**(2) + 1)/(cos(x) + cosec(x))",
            "( - (cos(x)**(2)) + cosec(x)**(2))/(cos(x) + cosec(x))",
            "( - cos(x)**(2) + cosec(x)**(2))/(cos(x) + cosec(x))",
            "((cos(x)**(2) * cosec(x)**(4)) + 1)/(cosec(x)**(2) * (cos(x) + cosec(x)))",
            "(cos(x)**(2) * cosec(x)**(4) + 1)/(cosec(x)**(2) * (cos(x) + cosec(x)))",
            "(cos(x)**(2) * cosec(x)**(4) + 1)/(cosec(x)**(3) + cos(x) * cosec(x)**(2))",
            "(cos(x)**(2) + (cosec(x)**(4))**( - 1))/(cos(x) * (cosec(x)**(2))**( - 1) + (cosec(x))**( - 1))",
            "((cos(x))**(2) * (cosec(x))**(4) + 1)/(cos(x) * (cosec(x))**(2) + (cosec(x))**(3))",
            "(cos(x)**(2) * cosec(x)**(4) + 1)/(cos(x) * cosec(x)**(2) + cosec(x)**(3))",
            "( - cos(x) + cosec(x))",
            "- (cos(x) - cosec(x))",
            "- cos(x) + cosec(x)"
        ]
    },
    "m*g+((m*u**(2))/(2*h))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(((1)/(2) * m*u**(2)))/(h) + (m*g)",
            "(1)/(2) * ((m) * (u**(2)))/(h) + m*g",
            "((1)/(2) * m*u**(2) + m*g*h)/(h)",
            "(g + (u**(2))/(2*h)) * m",
            "(m*(g - (0 - u**(2))/(2*h)))",
            "(m*g*h + (1)/(2) * m*u**(2))/(h)",
            "(m*g + m*(u**(2))/(2*h))",
            "(m*g) + ((m*u**(2))/(2*h))",
            "m*g + (m*(u**(2))/(2*h))",
            "m*g + (m*u**(2))/(2*h)",
            "m*g + m*((u**(2))/(2*h))",
            "m*g + m*(u**(2))/(2*h)",
            "m*(g + ((u**(2))/(2*h)))",
            "m*(g + (u**(2))/(2*h))",
            "(m*g) + ((u**(2))/(2*h)) * (m)",
            "m*g + ((u**(2))/(2*h)) * (m)",
            "m*g + ((u**(2))/(2*h)) * m",
            "m*g + (u**(2))/(2*h) * (m)",
            "m*g - ( - u**(2)*m)/(2*h)",
            "m*g + (u*u*(m)/(2*h))",
            "m*(((u**(2))/(2*h)) + g)",
            "m*((u**(2))/(2*h) + g)",
            "(m*(u**(2)))/(2*h) + m*g",
            "(m*u**(2))/(2*h) + m*g",
            "- (m*( - u**(2))/(2*h)) + (m*g)",
            "m*((u**(2))/(2*h)) + m*g",
            "m*(u**(2))/(2*h) + m*g",
            "(m*u*u + 2*h*m*g)/(2*h)",
            "((u**(2))/(2*h) + g) * m",
            "((u**(2))/(2*h)) * m + g*m",
            "((u**(2))/(2*h)) * m + m*g",
            "(u**(2))/(2*h) * m + m*g",
            "((u**(2)*m)/(2*h)) + m*g",
            "(u**(2)*m)/(2*h) + m*g"
        ]
    },
    "T == m*g + ((m*u**(2))/(2*h))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "T == (1)/(2*h) * u**(2)*m + m*g",
            "T == ((1)/(2) * m*u**(2))/(h) + m*g",
            "T == (1)/(2) * m*(u**(2))/(h) + m*g",
            "T == ((1)/(2) * m*(u)**(2) + m*g*h)/(h)",
            "T == ((1)/(2) * m*u**(2) + m*g*h)/(h)",
            "T == 2**( - 1)*h**( - 1)*u**(2)*m + g*m",
            "T == m*((0 - u**(2))/( - 2*h)) + m*g",
            "T == m*((((1)/(2)) * u**(2))/(h) + g)",
            "T == m*(g - (0 - u**(2))/(2*h))",
            "T == m*g + ((1)/(2) * m*u**(2))/(h)",
            "T == (m*g*h + (1)/(2) * m*u**(2))/(h)",
            "T == m*g - m*(0 - u**(2))/(2*h)",
            "T == (m*g) + m*((u**(2))/(2*h))",
            "T == (m*g) - m*(( - u**(2))/(2*h))",
            "T == m*g + ((m) * u**(2))/(2*h)",
            "T == m*g + ((m*(u**(2)))/(2*h))",
            "T == m*g + ((m*u**(2))/(2*h))",
            "T == m*g + (m) * ((u**(2))/(2*h))",
            "T == m*g + (m*u**(2))/(2*h)",
            "T == m*g + m*((u**(2))/(2*h))",
            "T == m*g + m*(u**(2))/(2*h)",
            "T == m*g - ( - m*u**(2))/(2*h)",
            "T == m*g - m*( - u**(2))/(2*h)",
            "T == m*g - m*(( - u**(2))/(2*h))",
            "T == m*g + m*(u**(2))/(h) * (1)/(2)",
            "T == m*(g + (u**(2))/(2*h))",
            "T == m*(g - ( - u**(2))/(2*h))",
            "T == m*g + (u**(2))/(2*h) * m",
            "T == m*g + ( - u**(2)*m)/( - 2*h)",
            "T == m*g + (u**(2)*m)/(2*h)",
            "T == m*(((u**(2))/(2*h)) + g)",
            "T == m*((u**(2))/(2*h) + g)",
            "T == m*( - u**(2))/( - 2*h) + g*m",
            "T == m*(u**(2))/(2*h) + g*m",
            "T == ((m*u**(2))/(2*h)) + (m*g)",
            "T == ((m*u**(2))/(2*h)) + m*g",
            "T == (m*(u)**(2))/(2*h) + m*g",
            "T == (m*(u**(2)))/(2*h) + m*g",
            "T == (m*u**(2))/(2*h) + m*g",
            "T == m*(( - u**(2))/( - (2*h))) + m*g",
            "T == m*(( - u**(2))/( - 2*h)) + m*g",
            "T == m*((u**(2))/(2*h)) + m*g",
            "T == m*(u**(2))/(2*h) + m*g",
            "T == m*((u*u)/(2*h) + g)",
            "T == ((u**(2))/(2*h) + g) * m",
            "T == ((u**(2))/(2*h)) * m + g*m",
            "T == (((u**(2)) * m)/(2*h)) + m*g",
            "T == ((u**(2)*m)/(2*h)) + m*g",
            "T == (u**(2)*m)/(2*h) + m*g",
            "T == (u**(2)*m + 2*m*h*g)/(2*h)",
            "(((u**(2))/(2*h)) * m) + m*g == T"
        ]
    },
    "m*g*h-((1)/(2))*m*u**(2)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "- ((((1)/(2)) * m*u**(2)) - m*g*h)",
            "- ((1)/(2) * m*u**(2) - m*g*h)",
            "- ((1)/(2) * m*u**(2)) + m*g*h",
            "- ((1)/(2)) * (m*u**(2)) + m*g*h",
            "- (1)/(2) * (m*u**(2)) + m*g*h",
            "- (1)/(2) * m*u**(2) + m*g*h",
            "(2*m*h*g - u**(2)*m)/(2)",
            "g*m*h - 2**( - 1)*u**(2)*m",
            "(g*m - ((u**(2))/(2*h)) * m) * h",
            "h*(((1)/(2) * m*u**(2))/( - h) + m*g)",
            "(h*(m*(g + (0 - u**(2))/(2*h))))",
            "h*(m*(g + (0 - u**(2))/(2*h)))",
            "h*m*g - (m*u**(2))/(2)",
            "h*m*g - m*((u**(2))/(2))",
            "h*((m*g) + (m*( - u**(2))/(2*h)))",
            "h*((m*g) + m*(( - u**(2))/(2*h)))",
            "h*(m*g + m*(( - u**(2))/(2*h)))",
            "h*(m*g - (m*u**(2))/(2*h))",
            "h*(m*g - m*((u**(2))/(2*h)))",
            "h*(m*g - m*(u**(2))/(2*h))",
            "h*(m*(g - (u**(2))/(2*h)))",
            "h*m*(g - (u**(2))/(2*h))",
            "h*(m*g - ((u**(2))/(2*h)) * m)",
            "h*(m*g + (u**(2)*m)/( - 2*h))",
            "h*(m*g - (u**(2)) * (m)/(2*h))",
            "h*(m*g - (u**(2)*m)/(2*h))",
            "h*( - (m*u**(2))/(2*h) + m*g)",
            "h*(( - m*u**(2))/(2*h) + m*g)",
            "h*(m*( - u**(2))/(2*h) + m*g)",
            "h*(m*(( - u**(2))/(2*h)) + m*g)",
            "( - h*m*u**(2))/(2*h) + m*g*h",
            "- (h*m*u**(2))/(2*h) + m*g*h",
            "h*( - (u**(2))/(2*h) * m + m*g)",
            "- m*((1)/(2) * u**(2) - g*h)",
            "(m*g*h) - ((1)/(2) * m*u**(2))",
            "- ( - m*g*h + (1)/(2) * m*(u)**(2))",
            "m*g*h - ((1)/(2) * m*u**(2))",
            "m*g*h - ((1)/(2)) * m*(u**(2))",
            "m*g*h - (1)/(2) * m*u**(2)",
            "m*g*h - (1)/(2) * u**(2)*m",
            "m*g*h - (1*m*u**(2))/(2)",
            "m*g*h - m*h*((u**(2))/(2*h))",
            "(m*g*h - (m*u**(2))/(2))",
            "(m*g*h - m*(u**(2))/(2))",
            "m*g*h + ( - m*u**(2))/(2)",
            "m*g*h - (m*u**(2))/(2)",
            "m*g*h - m*(u**(2))/(2)",
            "m*g*h - m*u*(u)/(2)",
            "m*(g*h - ((u**(2))/(2)))",
            "m*(g*h - (u**(2))/(2))",
            "(m*g*h - (u**(2))/(2) * (m))",
            "m*g*h - (u**(2))/(2) * m",
            "m*g*h - (u**(2)*m)/(2)",
            "m*g*h - u**(2)*(m)/(2)",
            "(m*g + m*( - (u**(2))/(2*h))) * h",
            "(m*g + m*( - u**(2))/(2*h)) * h",
            "(m*g + m*(( - u**(2))/(2*h))) * h",
            "(m*g - (m*u**(2))/(2*h)) * (h)",
            "(m*g - (m*u**(2))/(2*h)) * h",
            "(m*g - m*((u**(2))/(2*h))) * h",
            "(m*g - m*(u**(2))/(2*h)) * h",
            "m*(g - ((u**(2))/(2*h))) * h",
            "m*(g - (u**(2))/(2*h)) * h",
            "(m*g - (u**(2))/(2*h) * m) * h",
            "m*h*(g - (((1)/(2)) * u**(2))/(h))",
            "m*(h*g - (u**(2))/(2))",
            "m*h*(g - (u**(2))/(2*h))",
            "- m*h*((u**(2))/(2*h) - g)",
            "m*h*( - (u**(2))/(2*h) + g)",
            "m*h*(u**(2))/( - 2*h) + m*g*h",
            "- m*((u**(2))/(2) - g*h)",
            "m*( - (u**(2))/(2) + g*h)",
            "- m*((u**(2))/(2*h) - g) * (h)",
            "m*(( - u**(2))/(2*h) + g) * h",
            "m*((u**(2))/( - 2*h) + g) * h",
            "( - m*u**(2))/(2) + h*m*g",
            "- m*(u**(2))/(2) + h*m*g",
            "( - ((m*u**(2))/(2*h) - m*g)) * h",
            "( - (m*(u**(2)))/(2*h) + m*g) * h",
            "( - m*(((u)**(2))/(2*h)) + m*g) * (h)",
            "( - m*((u**(2))/(2*h)) + m*g) * h",
            "( - m*(u**(2))/(2*h) + m*g) * h",
            "((m*( - (u**(2)))/(2*h)) + m*g) * h",
            "((m*( - u**(2))/(2*h)) + m*g) * h",
            "(m*( - (u**(2))/(2*h)) + m*g) * (h)",
            "(m*(( - u**(2))/(2*h)) + m*g) * (h)",
            "( - m*u**(2))/(2) + m*g*h",
            "(( - m*u**(2))/(2)) + m*g*h",
            "- ((m*u**(2))/(2)) + m*g*h",
            "- (m*((u**(2))/(2)) - m*g*h)",
            "- (m*(u**(2))/(2) - m*g*h)",
            "- (m*u**(2))/(2) + m*g*h",
            "- m*((u**(2))/(2)) + (m*g*h)",
            "- m*(u**(2))/(2) + m*g*h",
            "m*( - (u**(2))/(2)) + m*g*h",
            "(( - u**(2))/(2*h) + g) * m*h",
            "- ((u**(2))/(2*h) - g) * m*h",
            "((( - u**(2)*m)/(2*h)) + m*g) * h",
            "- (u**(2)*m)/(2) + m*g*h"
        ]
    },
    "m*g-((m*u**(2))/(2*h))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(((1)/(2) * m*u**(2))/( - h) + m*g)",
            "- (1)/(2) * (m*u**(2))/(h) + m*g",
            "g*m - ((u**(2))/(2*h)) * m",
            "(m*(g + (0 - u**(2))/(2*h)))",
            "(m*g) - ((((1)/(2) * m*u**(2)))/(h))",
            "(m*g*h - (1)/(2) * m*u**(2))/(h)",
            "(m*g - (m*u**(2))/(2*h))",
            "(m*g - m*(u**(2))/(2*h))",
            "(m*g) + (m*( - u**(2))/(2*h))",
            "m*g - ((m*(u**(2)))/(2*h))",
            "m*g - (m*(u**(2))/(2*h))",
            "m*g - (m*u**(2))/(2*h)",
            "m*g - m*((u**(2))/(2*h))",
            "m*g - m*(u**(2))/(2*h)",
            "m*g - m*u*(u)/(2*h)",
            "m*(g - ((u**(2))/(2*h)))",
            "m*(g - (u**(2))/(2*h))",
            "m*g - ((u**(2))/(2*h)) * (m)",
            "m*g - ((u**(2))/(2*h)) * m",
            "m*g - (u**(2))/(2*h) * m",
            "m*g + ( - u**(2)*m)/(2*h)",
            "m*g - (u**(2)) * (m)/(2*h)",
            "m*g - (u**(2)*m)/(2*h)",
            "m*g - u**(2)*(m)/(2*h)",
            "- m*((u**(2))/(2*h) - g)",
            "m*( - (u**(2))/(2*h) + g)",
            "( - m*u**(2))/(2*h) + m*g",
            "(m*( - (u**(2)))/(2*h)) + m*g",
            "(m*( - u**(2))/(2*h)) + m*g",
            "- (m*(u**(2)))/(2*h) + m*g",
            "- (m*u**(2))/(2*h) + m*g",
            "- m*((u**(2))/(2*h)) + m*g",
            "- m*(u**(2))/(2*h) + m*g",
            "m*( - u**(2))/(2*h) + m*g",
            "m*(( - u**(2))/(2*h)) + m*g",
            "m*(u**(2))/( - 2*h) + m*g",
            "(( - u**(2))/(2*h) + g) * m",
            "- (u**(2))/(2*h) * m + m*g",
            "(( - u**(2)*m)/(2*h)) + m*g"
        ]
    },
    "T == m*g-((m*u**(2))/(2*h))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "T == ( - (1)/(2) * m*(u)**(2) + m*g*h)/(h)",
            "T == ( - (1)/(2) * m*u**(2) + m*g*h)/(h)",
            "T == (2*m*h*g - u**(2)*m)/(2*h)",
            "T == g*m - 2**( - 1)*h**( - 1)*u**(2)*m",
            "T == m*(g + (0 - u**(2))/(2*h))",
            "T == m*g - (1)/(2*h) * u**(2)*m",
            "T == m*(g - (((1)/(2)) * u**(2))/(h))",
            "T ==  - ( - m*g*h + (1)/(2) * m*u**(2))/(h)",
            "T == m*g - m*(1)/(2) * (u**(2))/(h)",
            "T == (m*g - (m*u**(2))/(2*h))",
            "T == (m*g) + m*(( - u**(2))/(2*h))",
            "T == m*g + ( - m*u**(2))/(2*h)",
            "T == m*g + m*( - (u**(2))/(2*h))",
            "T == m*g + m*(( - u**(2))/(2*h))",
            "T == m*g - (m*(u)**(2))/(2*h)",
            "T == m*g - (m*u**(2))/(2*h)",
            "T == m*g - m*((u**(2))/(2*h))",
            "T == m*g - m*(u**(2))/(2*h)",
            "T == m*g + (m*u**(2))/(2*( - h))",
            "T == m*g - m*(u**(2))/(h) * (1)/(2)",
            "T == m*(g + ( - u**(2))/(2*h))",
            "T == m*(g - (u**(2))/(2*h))",
            "T == m*g - (u**(2))/(2*h) * m",
            "T == m*g + (u**(2)*m)/( - 2*h)",
            "T == m*g - (u**(2)*m)/(2*h)",
            "T ==  - m*((u**(2))/(2*h) - g)",
            "T == m*( - (u**(2))/(2*h) + g)",
            "T == m*(( - u**(2))/(2*h) + g)",
            "T == m*((( - u**(2))/(2*h)) + g)",
            "T == m*((u**(2))/( - 2*h) + g)",
            "T ==  - ((m*u**(2))/(2*h)) + (m*g)",
            "T ==  - (m*(u**(2)))/(2*h) + m*g",
            "T ==  - (m*u**(2))/(2*h) + m*g",
            "T ==  - m*(((u)**(2))/(2*h)) + m*g",
            "T ==  - m*((u**(2))/(2*h)) + m*g",
            "T ==  - m*(u**(2))/(2*h) + m*g",
            "T == ( - m*u**(2))/(2*h) + m*g",
            "T == (( - m*u**(2))/(2*h)) + m*g",
            "T == (m*( - (u**(2))/(2*h))) + m*g",
            "T == (m*( - u**(2))/(2*h)) + m*g",
            "T == (m*(( - u**(2))/(2*h)) + m*g)",
            "T == (m*(( - u**(2))/(2*h))) + m*g",
            "T == (m*u**(2))/( - 2*h) + m*g",
            "T == m*( - (u**(2))/(2*h)) + m*g",
            "T == m*(( - u**(2))/(2*h)) + m*g",
            "T == m*( - (u*u)/(2*h) + g)",
            "T ==  - ((u**(2))/(2*h) - g) * m",
            "T ==  - (u**(2)*m)/(2*h) + m*g",
            "T == ( - u**(2)*m)/(2*h) + m*g"
        ]
    },
    "-m*g*h-((1)/(2))*m*u**(2)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "- 1*((1)/(2) * m*u**(2) + m*g*h)",
            "( - 1)/(2) * m*u**(2) - g*m*h",
            "- ((1)/(2) * m*u**(2) + h*m*g)",
            "- ((((1)/(2)) * m*u**(2)) + m*g*h)",
            "- ((1)/(2) * m*(u)**(2) + m*g*h)",
            "- ((1)/(2) * m*u**(2) + m*g*h)",
            "- ((1)/(2) * m*u**(2)) - m*g*h",
            "- ((1)/(2)) * m*(u**(2)) - m*g*h",
            "- (1)/(2) * (m*u**(2)) - m*g*h",
            "- (1)/(2) * m*u**(2) - m*g*h",
            "- (1)/(2) * u**(2)*m - m*g*h",
            "- g*m*h - (u**(2)*m)/(2)",
            "- h*(((1)/(2) * m*u**(2))/(h) + m*g)",
            "h*( - (m*(g - (0 - u**(2))/(2*h))))",
            "- (h*m*g + (m*u**(2))/(2))",
            "- h*m*g - (m*u**(2))/(2)",
            "- h*m*g - m*((u**(2))/(2))",
            "- h*((m*g) - m*(( - u**(2))/(2*h)))",
            "- h*(m*g + (m*u**(2))/(2*h))",
            "- h*(m*g + m*((u**(2))/(2*h)))",
            "- h*(m*g + m*(u**(2))/(2*h))",
            "- h*(m*g - m*(( - u**(2))/(2*h)))",
            "- h*m*(g + ((u**(2))/(2*h)))",
            "- h*m*(g + (u**(2))/(2*h))",
            "- h*(m*g + ((u**(2))/(2*h)) * m)",
            "- h*(m*g + (u**(2))/(2*h) * (m))",
            "- h*(m*g + (u**(2)*m)/(2*h))",
            "- h*(m*((u**(2))/(2*h) + g))",
            "- h*m*((u**(2))/(2*h) + g)",
            "h*(m*( - (u**(2))/(2*h) - g))",
            "- h*(m*(u**(2))/(2*h) + g*m)",
            "- h*((m*u**(2))/(2*h) + m*g)",
            "- h*(m*((u**(2))/(2*h)) + m*g)",
            "- h*(m*(u**(2))/(2*h) + m*g)",
            "( - h*m*u**(2))/(2*h) - m*g*h",
            "- h*((u**(2))/(2*h) * m + m*g)",
            "- m*((1)/(2) * u**(2) + g*h)",
            "- (m*g*h + (1)/(2) * m*u**(2))",
            "- (m*g*h) - ((1)/(2) * m*u**(2))",
            "- m*g*h - (1)/(2) * m*u**(2)",
            "- m*(g*h + (1)/(2) * u**(2))",
            "- m*g*h - h*((m*(u**(2)))/(2*h))",
            "- (m*g*h + (m*u**(2))/(2))",
            "- m*g*h - ((m*u**(2))/(2))",
            "- m*g*h - (m*(u**(2))/(2))",
            "- m*g*h - (m*u**(2))/(2)",
            "- m*g*h - m*(u**(2))/(2)",
            "- m*g*h - (m*u**(2))/(2*h) * (h)",
            "- m*(g*h + ((u**(2))/(2)))",
            "- m*(g*h + (u**(2))/(2))",
            "- m*g*h - (u**(2))/(2*h) * m*h",
            "- (m*g*h + (u**(2))/(2) * (m))",
            "- (m*g*h) - ((u**(2))/(2)) * (m)",
            "- m*g*h - (u**(2)*m)/(2)",
            "- m*g*h - u**(2)*(m)/(2)",
            "(m*g + (m*u**(2))/(2*h)) * ( - h)",
            "(m*g + m*((u**(2))/(2*h))) * ( - h)",
            "- (m*g + (m*u**(2))/(2*h)) * h",
            "- (m*g + m*((u**(2))/(2*h))) * h",
            "- (m*g + m*(u**(2))/(2*h)) * h",
            "- (m*g - m*(( - u**(2))/(2*h))) * h",
            "- m*(g + ((u**(2))/(2*h))) * h",
            "- m*(g + (u**(2))/(2*h)) * h",
            "- (m*g + (u**(2))/(2*h) * m) * h",
            "- m*h*((((1)/(2)) * u**(2))/(h) + g)",
            "- m*h*(g + (u**(2))/(2*h))",
            "- m*h*(((u**(2))/(2*h)) + g)",
            "- m*h*((u**(2))/(2*h) + g)",
            "- m*((u**(2))/(2) + g*h)",
            "- ((m*u**(2))/(2) + g*m*h)",
            "- m*((u**(2))/(2*h) + g) * (h)",
            "- m*((u**(2))/(2*h) + g) * h",
            "- (m*( - u**(2))/( - 2*h) + g*m) * h",
            "- (m*u**(2))/(2) - h*m*g",
            "- m*(u**(2))/(2) - h*m*g",
            "( - ( - (m*( - u**(2))/(2*h)) + (m*g))) * h",
            "( - (((m*u**(2))/(2*h)) + m*g)) * h",
            "( - ((m*u**(2))/(2*h) + m*g)) * h",
            "(( - m*u**(2))/(2*h) - m*g) * h",
            "((m*u**(2))/(2*h) + m*g) * ( - h)",
            "(m*((u**(2))/(2*h)) + m*g) * ( - h)",
            "(m*(u**(2))/(2*h) + m*g) * ( - h)",
            "- (((m*u**(2))/(2*h)) + m*g) * h",
            "- ((m*(u)**(2))/(2*h) + m*g) * h",
            "- ((m*u**(2))/(2*h) + m*g) * h",
            "- (m*((u**(2))/(2*h)) + m*g) * (h)",
            "- (m*((u**(2))/(2*h)) + m*g) * h",
            "- (m*(u**(2))/(2*h) + m*g) * (h)",
            "- (m*(u**(2))/(2*h) + m*g) * h",
            "( - m*u**(2))/(2) - m*g*h",
            "(m*u**(2))/( - 2) - m*g*h",
            "- ((m*u**(2))/(2) + m*g*h)",
            "- ((m*u**(2))/(2)) - (m*g*h)",
            "- ((m*u**(2))/(2)) - m*g*h",
            "- (m*u**(2))/(2) +  - m*g*h",
            "- (m*u**(2))/(2) - m*g*h",
            "- m*((u**(2))/(2)) - (m*g*h)",
            "- m*(u**(2))/(2) - m*g*h",
            "- (m*u*(u)/(2) + m*g*h)",
            "- m*u*(u)/(2) - m*g*h",
            "- ((u**(2))/(2*h) + g) * m*h",
            "- (((u**(2))/(2*h)) * m + g*m) * h",
            "- (((u**(2))/(2*h)) * m + m*g) * h",
            "- ((u**(2))/(2*h) * m + m*g) * h",
            "- (((u**(2)*m)/(2*h)) + m*g) * h",
            "- ((u**(2)*m)/(2*h) + m*g) * (h)",
            "- ((u**(2)*m)/(2*h) + m*g) * h",
            "- (u**(2)*m)/(2) - m*g*h",
            "- (u**(2)*m + 2*m*h*g)/(2)"
        ]
    },
    "g*(((2*m*x +M*l)/(2*l)))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "((1)/(2) * l*M*g + x*m*g)/(l)",
            "((1)/(2) * M*g*l + m*g*x)/(l)",
            "(1)/(2) * (M*g) + (m*g*x)/(l)",
            "(1)/(2) * M*g + (x*m*g)/(l)",
            "(2*m*g*x + M*g*l)/(2*l)",
            "(2*x*m*g + l*M*g)/(2*l)",
            "(2*x*m*g + M*l*g)/(2*l)",
            "g*((1)/(2) * M + m*(x)/(l))",
            "g*(2*x*m + M*l)/(2*l)",
            "(g)/(l) * (m*x + (M*l)/(2))",
            "g*((M)/(2) + (m*x)/(l))",
            "(g*(M*l + 2*m*x))/(2*l)",
            "g*(M*(x)/(2) + m*x + M*((l - x)/(2)))/(l)",
            "g*m*(x)/(l) + g*(M)/(2)",
            "g*(m*(x)/(l) + (M)/(2))",
            "g*(x*(m)/(l) + (1)/(2) * M)",
            "g*((x*m)/(l) + (M)/(2))",
            "(l*(m + M) * g - m*g*(l - 2*x))/(2*l)",
            "(M*g)/(2) + (m*g*x)/(l)",
            "M*(g)/(2) + m*g*(x)/(l)",
            "((M*g)/(2)) + (x*m*g)/(l)",
            "(M*g)/(2) + (x*m*g)/(l)",
            "((M*g*l)/(2) + x*g*m)/(l)",
            "(M*g*l + 2*x*m*g)/(2*l)",
            "(m*g*x + (1)/(2) * l*M*g)/(l)",
            "(m*g*x + (1)/(2) * M*g*l)/(l)",
            "(m*g*x + ((l)/(2)) * M*g)/(l)",
            "(m*g*x)/(l) + (M*g)/(2)",
            "(m*g*x)/(l) + M*(g)/(2)",
            "m*g*(x)/(l) + M*(g)/(2)",
            "(m*g*(x)/(l)) + (M*g*((l)/(2))/(l))",
            "(m*g*x + M*g*(l)/(2))/(l)",
            "(x)/(l) * m*g + (1)/(2) * M*g",
            "(x*m*g + (1)/(2) * l*M*g)/(l)",
            "(x*m*g)/(l) + (M*g)/(2)",
            "x*m*(g)/(l) + M*(g)/(2)",
            "(x*m*g + (l*M*g)/(2))/(l)"
        ]
    },
    "F == g*(((2*m*x +M*l)/(2*l)))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "F == (1)/(2) * M*g + (m*g*x)/(l)",
            "F == (1)/(2) * M*g + (m*x*g)/(l)",
            "F == (1)/(2) * M*g + (x)/(l) * m*g",
            "F == ((1)/(2)) * M*g + (x*m*g)/(l)",
            "F == (2*m*g*x + M*g*l)/(2*l)",
            "F == (2*m*x*g + g*M*l)/(2*l)",
            "F == (g)/(2*l) * (M*l + 2*x*m)",
            "F == (g*(2*x*m + M*l))/(2*l)",
            "F == ((g)/(l)) * (x*m + ((l)/(2)) * M)",
            "F == g*((M)/(2) + x*(m)/(l))",
            "F == ((g*M*l)/(2) + (x*g*m))/(l)",
            "F == (g*(m*x + (1)/(2) * M*l))/(l)",
            "F == (g*(m*x + (l)/(2) * M))/(l)",
            "F == g*((m*x)/(l) + (M)/(2))",
            "F == g*(m*(x)/(l) + (M)/(2))",
            "F == (g*(m*x + (M*l)/(2)))/(l)",
            "F == (g*(x*m + (l)/(2) * M))/(l)",
            "F == g*(((x*m)/(l)) + ((M)/(2)))",
            "F == g*((x*m)/(l) + (M)/(2))",
            "F == ((l*M*g)/(2) + m*g*x)/(l)",
            "F == (((l*M*g)/(2) + x*m*g))/(l)",
            "F == M*g*(1)/(2) + (m*x*g)/(l)",
            "F == ((M*g)/(2)) + ((m*g*x)/(l))",
            "F == (M*g)/(2) + (m*g*x)/(l)",
            "F == M*((g)/(2)) + m*g*((x)/(l))",
            "F == M*(g)/(2) + m*g*(x)/(l)",
            "F == (M*g)/(2) + (m*x*g)/(l)",
            "F == (M*g)/(2) + (x*m*g)/(l)",
            "F == ((M*g*l*(1)/(2)) + (m*g*x))/(l)",
            "F == (M*g*l + 2*m*g*x)/(2*l)",
            "F == ((m*g*x) + ((1)/(2) * l*M*g))/(l)",
            "F == (m*g*x + (1)/(2) * l*M*g)/(l)",
            "F == ((m*g*x + ((1)/(2) * M*g*l)))/(l)",
            "F == (m*g*x + ((1)/(2) * M*g*l))/(l)",
            "F == (m*g*x + (1)/(2) * M*g*l)/(l)",
            "F == (m*g*x)/(l) + (1)/(2) * M*g",
            "F == (m*g*x + (l)/(2) * M*g)/(l)",
            "F == (m*g*x)/(l) + M*g*((1)/(2))",
            "F == (m*g*x)/(l) + (M*g)/(2)",
            "F == m*g*(x)/(l) + (M*g)/(2)",
            "F == m*g*(x)/(l) + M*(g)/(2)",
            "F == (m*g*x + M*g*(1)/(2) * l)/(l)",
            "F == (m*g*x + M*g*((l)/(2)))/(l)",
            "F == (m*g*x + M*g*(l)/(2))/(l)",
            "F == m*x*(g)/(l) + (M)/(2) * g",
            "F == (m*x*g)/(l) + (M*g)/(2)",
            "F == ((m*x)/(l) + (M)/(2)) * g",
            "F == (x)/(l) * m*g + (1)/(2) * M*g",
            "F == ((x)/(l)) * m*g + (M*g)/(2)",
            "F == ((x*m*g) + ((1)/(2) * l*M*g))/(l)",
            "F == (x*m*g + (1)/(2) * l*M*g)/(l)",
            "F == (x*m*g + (1)/(2) * M*g*l)/(l)",
            "F == (x*m*g)/(l) + ((1)/(2) * M*g)",
            "F == (x*m*g)/(l) + (1)/(2) * M*g",
            "F == x*m*(g)/(l) + (1)/(2) * M*g",
            "F == (x*m*g + (l)/(2) * g*M)/(l)",
            "F == ((x*m*g) + (l)/(2) * M*g)/(l)",
            "F == (x*m*g + (l)/(2) * M*g)/(l)",
            "F == (x*m*g)/(l) + (M)/(2) * g",
            "F == (x*m*g)/(l) + (M*g)/(2)",
            "F == (x*m*g + (l*M*g)/(2))/(l)"
        ]
    },
    "sqrt(((G*M**(2))/(r*(m+M))))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(1)/(r) * sqrt(G*M*((M*r)/(M + m)))",
            "((G*M**(2))/(r*(m + M)))**((1)/(2))",
            "((G*M**(2))/((r) * (M + m)))**((1)/(2))",
            "((G*M**(2))/(r*(M + m)))**((1)/(2))",
            "(G*(M**(2))/(r*m + r*M))**((1)/(2))",
            "(G*(M**(2))/(r*M + r*m))**((1)/(2))",
            "((G*M**(2)*r)/(r**(2)*(m + M)))**((1)/(2))",
            "((G*M*(r - (m*r)/(m + M)))/(r**(2)))**((1)/(2))",
            "(((M**(2)) * G)/(r*(M + m)))**((1)/(2))",
            "M*((G)/(r*(M + m)))**((1)/(2))",
            "M*((G)/(r*m + r*M))**((1)/(2))",
            "M*sqrt((G)/(r*(m + M)))",
            "M*sqrt((G)/(r*(M + m)))",
            "M*sqrt((G)/(r*m + r*M))",
            "sqrt(G*M*(1 - (m)/(m + M))/(r))",
            "sqrt((G*M**(2))/((m + M) * r))",
            "sqrt((G*M**(2))/((M + m) * r))",
            "sqrt(G*(M**(2))/((M + m) * r))",
            "sqrt((G*(M**(2)))/(r*(m + M)))",
            "sqrt((G*M**(2))/(r*(m + M)))",
            "sqrt(G*(M**(2))/(r*(m + M)))",
            "sqrt((G*M**(2))/(r*(M + m)))",
            "sqrt(G*(M**(2))/(r*(M + m)))",
            "sqrt(G*M**(2)*(r)/(r**(2)*(M + m)))",
            "sqrt((G*M*((M)/(m + M)))/(r))",
            "sqrt(G*M*(((M)/(M + m))/(r)))",
            "sqrt((G*(M)/(r)) * (1 - ((m)/(M + m))))",
            "sqrt((G*M)/(r**(2)) * (r - (m*r)/(m + M)))",
            "sqrt(G*(M)/(r**(2)) * (r - m*(r)/(M + m)))",
            "sqrt((G*M)/(r) - (G*M*m)/((M + m) * r))",
            "sqrt(G*(M)/(r) - (G*M*m)/(m*r + M*r))",
            "sqrt((G*M)/(r) - (G*M*m)/(M*r + m*r))",
            "sqrt(G*(M)/(r) - G*M*(m)/(r*m + r*M))",
            "sqrt((G*M*(r - (m*r)/(M + m))/(r**(2))))",
            "(sqrt(G*M*(r - r*(m)/(M + m))))/(r)",
            "sqrt((G)/(r*(M + m))) * M",
            "sqrt(((r - ((m*r)/(M + m))) * (G*M*m)/(r**(2)))/(m))",
            "sqrt(((r - (m*r)/(M + m)) * G*M)/((r)**(2)))",
            "sqrt(((r - (m*r)/(M + m)) * M*G)/(r**(2)))"
        ]
    },
    "v == sqrt(((G*M**(2))/(r*(m+M))))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "((G*M**(2))/((m + M) * r))**((1)/(2)) == v",
            "v == M*sqrt((G)/(r*(M + m)))",
            "v == sqrt((G*M)/(1 + (m)/(M)) * (1)/(r))",
            "v == sqrt((G*M*(1 - ((m)/(m + M))))/(r))",
            "v == sqrt((G*M*(1 - ((m)/(M + m))))/(r))",
            "v == sqrt((G*M**(2))/((m + M) * r))",
            "v == sqrt((G*M**(2))/((M + m) * r))",
            "v == sqrt((G*M**(2))/(r*(m + M)))",
            "v == sqrt((G*M**(2))/((r) * (M + m)))",
            "v == sqrt((G*M**(2))/(r*(M + m)))",
            "v == sqrt((G*M**(2))/(r*m + r*M))",
            "v == sqrt((G*(M**(2)))/(r*M + r*m))",
            "v == sqrt((G*M**(2))/(r*M + r*m))",
            "v == sqrt(((G*M)/(r)) * (1 - (m)/(m + M)))",
            "v == sqrt((G*M)/(r) * (1 - ((m)/(M + m))))",
            "v == sqrt((G*M)/(r) - (G*M*m)/(r*(m + M)))",
            "v == sqrt((G*M*(r - (m*r)/(m + M)))/(r**(2)))",
            "v == sqrt((G*M*(r - ((m*r)/(M + m))))/(r**(2)))",
            "v == sqrt((G*M*(r - (m*r)/(M + m)))/(r**(2)))",
            "v == sqrt((G)/(r*(m + M))) * M"
        ]
    },
    "((L)/(d_1))*(sqrt((d_2)/(g)))-((L)/(sqrt(g*d_1)))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "((1)/(sqrt((d_1)/(d_2))) - 1) * (L)/(sqrt(g*d_1))",
            "(d_2 - sqrt(d_1*d_2)) * (L)/(d_1*sqrt(g*d_2))",
            "(L*(1 - (sqrt((d_1)/(d_2)))))/(d_1*sqrt((g)/(d_2)))",
            "(L)/(cos(arccos(((d_1)/(d_2))**((1)/(2)))) * (g*d_1)**((1)/(2))) - (L)/((g*d_1)**((1)/(2)))",
            "(L)/((((d_1)/(d_2))**((1)/(2))) * (g*d_1)**((1)/(2))) - (L)/((g*d_1)**((1)/(2)))",
            "(L)/(d_1*g**((1)/(2))) * (d_2**((1)/(2)) - d_1**((1)/(2)))",
            "(L)/(d_1) * sqrt((d_2)/(g)) - (L)/(sqrt(d_1*g))",
            "(L)/(d_1) * sqrt((d_2)/(g)) - (L)/(sqrt(g*d_1))",
            "(L)/(d_1*sqrt((g)/(d_2))) - (L)/(sqrt(g*d_1))",
            "(L)/((d_1*sqrt(g))/(sqrt(d_2))) - (L)/(sqrt(g*d_1))",
            "L*(d_2**((1)/(2)) - d_1**((1)/(2)))/(d_1*g**((1)/(2)))",
            "(L) * ((d_2)**((1)/(2)))/(d_1*(g)**((1)/(2))) - (L)/((g*d_1)**((1)/(2)))",
            "L*((d_2)**((1)/(2)))/((g)**((1)/(2)) * d_1) - (L)/((g*d_1)**((1)/(2)))",
            "L*(((d_2)/(d_1))**((1)/(2)) - 1)/((g*d_1)**((1)/(2)))",
            "(L)/((g)**((1)/(2))) * ((d_2)**((1)/(2)) - d_1**((1)/(2)))/(d_1)",
            "L*(g*d_1)**( - (1)/(2)) * (((d_1)/(d_2))**( - (1)/(2)) - 1)",
            "(L)/((g*d_1)**((1)/(2))) * (((d_2)/(d_1))**((1)/(2)) - 1)",
            "(L - L*(d_1**((1)/(2)))/(d_2**((1)/(2))))/(sqrt(g*d_1) * (d_1**((1)/(2)))/(d_2**((1)/(2))))",
            "(((L)/(sqrt((d_1)/(d_2)))) - L)/(sqrt(g*d_1))",
            "((L)/(sqrt((d_1)/(d_2))) - (L))/(sqrt(g*d_1))",
            "((L)/(sqrt((d_1)/(d_2))) - L)/(sqrt(g*d_1))",
            "(L)/(sqrt((d_1)/(d_2)) * sqrt(g*d_1)) - (L)/(sqrt(g*d_1))",
            "(L*(sqrt((d_2)/(d_1)) - 1))/(sqrt(g*d_1))",
            "L*(sqrt((d_2)/(d_1)) - 1)/(sqrt(g*d_1))",
            "(L*sqrt(d_2))/(d_1*sqrt(g)) - (L)/(sqrt(g*d_1))",
            "L*(sqrt(d_2))/(d_1*sqrt(g)) - (L)/(sqrt(g*d_1))",
            "L*(sqrt((d_2)/(g*d_1**(2))) - (1)/(sqrt(g*d_1)))",
            "L*(sqrt(d_2*g))/(d_1*g) - (L)/(sqrt(d_1*g))",
            "L*(sqrt(d_2) - sqrt(d_1))/(d_1*(sqrt(g)))",
            "(L*sqrt(d_2))/(sqrt(g) * d_1) - (L)/(sqrt(d_1*g))",
            "(L)/(sqrt(g*d_1)) * ((1)/(((d_1)/(d_2))**((1)/(2))) - 1)",
            "((L)/(sqrt(g*d_1))) * ((1)/(sqrt((d_1)/(d_2))) - 1)",
            "(L)/(sqrt(g*d_1)) * ((1)/(sqrt((d_1)/(d_2))) - 1)",
            "(L)/(sqrt((g*d_1**(2))/(d_2))) - (L)/(sqrt(g*d_1))",
            "(L)/(sqrt(g*d_1)) * (sqrt((d_2)/(d_1)) - 1)",
            "((L*sqrt(g*d_2))/(g*d_1)) - ((L)/(sqrt(g*d_1)))",
            "(L*(sqrt(g*d_2))/(g*d_1)) - ((L)/(sqrt(g*d_1)))",
            "(L*sqrt(g*d_2))/(g*d_1) - (L)/(sqrt(g*d_1))",
            "(L)/(sqrt(g)) * ((sqrt(d_2))/(d_1) - (1)/(sqrt(d_1)))"
        ]
    },
    "t_d == ((L)/(d_1))*(sqrt((d_2)/(g)))-((L)/(sqrt(g*d_1)))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "t_d == (L)/(cos(arccos(sqrt((d_1)/(d_2)))) * sqrt(g*d_1)) - (L)/(sqrt(g*d_1))",
            "t_d == ((L)/((d_1**((1)/(2)))/(d_2**((1)/(2)))) - L)/(sqrt(g*d_1))",
            "t_d == (L*((d_1)/(d_2))**( - (1)/(2)) - L)/(sqrt(g*d_1))",
            "t_d == (L)/(d_1) * ((d_2)/(g))**((1)/(2)) - (L)/((g*d_1)**((1)/(2)))",
            "t_d == (L)/(d_1*sqrt((g)/(d_2))) - (L)/(sqrt(g*d_1))",
            "t_d == (L)/(d_1*sqrt(g)) * (sqrt(d_2) - sqrt(d_1))",
            "t_d == (L*d_2**((1)/(2)))/(d_1*g**((1)/(2))) - (L)/(d_1**((1)/(2))*g**((1)/(2)))",
            "t_d == (L*d_2**((1)/(2)))/(g**((1)/(2))*d_1) - (L)/(sqrt(g*d_1))",
            "t_d == L*(g*d_1)**( - (1)/(2)) * (((d_1)/(d_2))**( - (1)/(2)) - 1)",
            "t_d == (L - L*sqrt((d_1)/(d_2)))/(d_1*sqrt((g)/(d_2)))",
            "t_d == (L)/(sqrt((d_1**(2)*g)/(d_2))) - (L)/(sqrt(g*d_1))",
            "t_d == ((L)/(sqrt((d_1)/(d_2))) - L)/(sqrt(g*d_1))",
            "t_d == ((L)/(sqrt((d_1)/(d_2))))/(sqrt(g*d_1)) - (L)/(sqrt(g*d_1))",
            "t_d == (L*sqrt(d_2) * (1 - sqrt((d_1)/(d_2))))/(d_1*sqrt(g))",
            "t_d == (L*sqrt(d_2))/(d_1*sqrt(g)) - (L)/(sqrt(g*d_1))",
            "t_d == L*sqrt((d_2)/(g*d_1**(2))) - (L)/(sqrt(g*d_1))",
            "t_d == (L*sqrt(d_2) - L*sqrt(d_1))/(d_1*sqrt(g))",
            "t_d == (L*sqrt(d_2) - L*sqrt(d_1))/(sqrt(g) * d_1)",
            "t_d == (L*(sqrt(d_2) - sqrt(d_1)))/(d_1*sqrt(g))",
            "t_d == (L*(sqrt(d_2) - sqrt(d_1)))/(sqrt(g) * d_1)",
            "t_d == (L)/(sqrt(g*d_1)) * ((1)/(cos(arcsin(1) - arcsin(sqrt((d_1)/(d_2))))) - 1)",
            "t_d == (L)/(sqrt(g*d_1)) * ((1)/(((d_1)/(d_2))**((1)/(2))) - 1)",
            "t_d == (L)/(sqrt(g*d_1)) * ((1)/(sqrt((d_1)/(d_2))) - 1)",
            "t_d == (L)/(sqrt(g*d_1)) * ((1)/((sqrt(d_1))/(sqrt(d_2))) - 1)",
            "t_d == (L)/(sqrt(g*d_1) * sqrt((d_1)/(d_2))) - (L)/(sqrt(g*d_1))",
            "t_d == ((L)/(sqrt(g*d_1))) * (sqrt((d_2)/(d_1)) - 1)",
            "t_d == (L)/(sqrt(g*d_1)) * (sqrt((d_2)/(d_1)) - 1)",
            "t_d == (L)/(sqrt((g)/(d_2)) * d_1) - (L)/(sqrt(d_1*g))",
            "t_d == ((L*(sqrt(g*d_2))/(g*d_1)) - ((L)/(sqrt(g*d_1))))",
            "t_d == ((L*sqrt(g*d_2))/(g*d_1)) - ((L)/(sqrt(g*d_1)))",
            "t_d == (L*sqrt(g*d_2))/(g*d_1) - (L)/(sqrt(g*d_1))",
            "t_d == (L*sqrt(g) * (sqrt(d_2) - sqrt(d_1)))/(g*d_1)"
        ]
    },
    "(v_0/b)*(1 - e**(-b*t))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(1)/( - b) * v_0*e**( - b*t) + (1)/(b) * v_0",
            "- (1)/(b) * v_0*e**( - b*t) + (1)/(b) * v_0",
            "((e**( - b*t) - 1)/( - b)) * (v_0)",
            "e**( - b*t)*(v_0)/( - b) + (v_0)/(b)",
            "v_0*((1)/(b) - (e**( - b*t))/(b))",
            "((v_0)/(b)) * (1 - e**( - (b*t)))",
            "((v_0)/(b)) * (1 - e**( - b*t))",
            "(v_0)/(b) * (1 - e**( - (b*t)))",
            "(v_0)/(b) * (1 - e**( - b*t))",
            "(v_0)/(b) * ( - (e**( - (b*t))) + 1)",
            "(v_0)/(b) * ( - e**( - b*t) + 1)",
            "- (v_0)/(b) * (e**( - b*t) - 1)",
            "- ((v_0)/(b)) * e**( - b*t) + ((v_0)/(b))",
            "- (v_0)/(b) * e**( - b*t) + (v_0)/(b)",
            "(v_0)/(b) - (v_0)/(b) * e**( - b*t)",
            "(v_0)/(b) - (v_0*e**( - (b*t)))/(b)",
            "(v_0)/(b) - v_0*(e**( - b*t))/(b)",
            "- (v_0*(e**( - b*t) - 1))/(b)",
            "(v_0*e**( - b*t))/( - b) + (v_0)/(b)",
            "- (v_0*e**( - (b*t)))/(b) + (v_0)/(b)",
            "- v_0*(e**( - b*t))/(b) + (v_0)/(b)"
        ]
    },
    "x ==(v_0/b)*(1 - e**(-b*t))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "e**( - b*t)*(v_0)/( - b) + (v_0)/(b) == x",
            "(v_0)/(b) - v_0*(e**( - b*t))/(b) == x",
            "x ==  - (1)/(b) * e**( - b*t)*(v_0) + (1)/(b) * (v_0)",
            "x ==  - ((1)/(b)) * v_0*e**( - b*t) + ((1)/(b)) * v_0",
            "x ==  - (1)/(b) * v_0*e**( - b*t) + (1)/(b) * v_0",
            "x == (1)/( - b) * v_0*e**( - b*t) + (1)/(b) * v_0",
            "x ==  - (1)/(b) * (v_0) * e**( - b*t) + (1)/(b) * (v_0)",
            "x ==  - (1)/(b) * v_0*e**( - b*t) + (v_0)/(b)",
            "x == ( - 1)/(b) * v_0*e**( - b*t) + (v_0)/(b)",
            "x == (1 - e**( - b*t))/(b) * v_0",
            "x == ((e**( - b*t) - 1)/( - b)) * (v_0)",
            "x ==  - (e**( - b*t)*v_0)/(b) + (v_0)/(b)",
            "x == e**( - b*t)*(v_0)/( - b) + ((v_0)/(b))",
            "x == e**( - b*t)*(v_0)/( - b) + (v_0)/(b)",
            "x == v_0*((1)/(b) - (1)/(b) * e**( - b*t))",
            "x == v_0*((1)/(b) - (1)/(b*e**(b*t)))",
            "x == v_0*((1)/(b)) * (1 - e**( - (b*t)))",
            "x == v_0*( - (1)/(b) * e**( - b*t) + (1)/(b))",
            "x == v_0*(( - (1)/(b)) * e**( - b*t) + ((1)/(b)))",
            "x == v_0*(((1)/( - b)) * e**( - b*t) + ((1)/(b)))",
            "x == v_0*( - (1)/(b) * e**( - t*b) + (1)/(b))",
            "x == (v_0) * (1 - e**( - b*t))/(b)",
            "x == (v_0*(1 - e**( - b*t)))/(b)",
            "x == v_0*(1 +  - e**( - b*t))/(b)",
            "x == v_0*(1 - e**( - (b*t)))/(b)",
            "x == v_0*(1 - e**( - b*t))/(b)",
            "x == (v_0) * (1 - e**( - t*b))/(b)",
            "x == ((v_0)/(b)) * (1 - e**( - (b*t)))",
            "x == ((v_0)/(b)) * (1 - e**( - b*t))",
            "x == (v_0)/(b) * (1 - e**( - (b*t)))",
            "x == (v_0)/(b) * (1 - e**( - b*t))",
            "x == (v_0)/(b) * (1 - e**( - (t*b)))",
            "x == (v_0)/(b) * (1 - e**( - t*b))",
            "x ==  - ((v_0)/(b)) * (e**( - b*t) - 1)",
            "x ==  - (v_0)/(b) * (e**( - (b*t)) - 1)",
            "x ==  - (v_0)/(b) * (e**( - b*t) - 1)",
            "x == ( - (v_0)/(b)) * (e**( - b*t) - 1)",
            "x == ( - v_0)/(b) * (e**( - b*t) - 1)",
            "x == ((v_0)/(b)) * ( - e**( - (b*t)) + 1)",
            "x == ((v_0)/(b)) * ( - e**( - b*t) + 1)",
            "x == (v_0)/( - b) * (e**( - b*t) - 1)",
            "x == (v_0)/(b) * ( - e**( - b*t) + 1)",
            "x ==  - ((v_0)/(b)) * e**( - (b*t)) + (v_0)/(b)",
            "x ==  - ((v_0)/(b)) * e**( - b*t) + ((v_0)/(b))",
            "x ==  - ((v_0)/(b)) * e**( - b*t) + (v_0)/(b)",
            "x ==  - (v_0)/(b) * (e**( - b*t)) + (v_0)/(b)",
            "x ==  - (v_0)/(b) * e**( - (b*t)) + (v_0)/(b)",
            "x ==  - (v_0)/(b) * e**( - b*t) + (v_0)/(b)",
            "x == ( - (v_0)/(b)) * (e**( - b*t)) + (v_0)/(b)",
            "x == ( - (v_0)/(b)) * e**( - (b*t)) + (v_0)/(b)",
            "x == ( - (v_0)/(b)) * e**( - b*t) + ((v_0)/(b))",
            "x == ( - (v_0)/(b)) * e**( - b*t) + (v_0)/(b)",
            "x == ( - v_0)/(b) * e**( - b*t) + (v_0)/(b)",
            "x == ((v_0)/( - b)) * e**( - b*t) + ((v_0)/(b))",
            "x == ((v_0)/( - b)) * e**( - b*t) + (v_0)/(b)",
            "x == (v_0)/( - b) * e**( - b*t) + (v_0)/(b)",
            "x == (v_0)/( - b) * e**( - b*t) - (v_0)/( - b)",
            "x == ((v_0)/(b)) - ((v_0)/(b)) * e**( - b*t)",
            "x == ((v_0)/(b)) - ((v_0)/(b*e**(b*t)))",
            "x == (v_0)/(b) - (v_0)/(b) * e**( - (b*t))",
            "x == (v_0)/(b) - (v_0)/(b) * e**( - b*t)",
            "x == (v_0)/(b) - (v_0)/(b*e**(b*t))",
            "x == (v_0)/(b) - (v_0*e**( - (b*t)))/(b)",
            "x == (v_0)/(b) - (v_0*e**( - b*t))/(b)",
            "x == (v_0)/(b) - (v_0*e**( - t*b))/(b)",
            "x ==  - (v_0*(e**( - b*t) - 1)/(b))",
            "x == (v_0*( - e**( - b*t) + 1))/(b)",
            "x == (v_0*(e**( - b*t) - 1))/( - b)",
            "x == v_0*(( - e**( - b*t) + 1)/(b))",
            "x == v_0*( - (e**( - b*t))/(b) + (1)/(b))",
            "x ==  - (v_0*e**( - (b*t)))/(b) + (v_0)/(b)",
            "x ==  - (v_0*e**( - b*t))/(b) + ((v_0)/(b))",
            "x ==  - (v_0*e**( - b*t))/(b) + (v_0)/(b)",
            "x == ( - v_0*e**( - b*t))/(b) + (v_0)/(b)",
            "x == (v_0*e**( - b*t))/( - b) + (v_0)/(b)",
            "x ==  - v_0*((e**( - b*t))/(b)) + (v_0)/(b)",
            "x ==  - v_0*(e**( - b*t))/(b) + (v_0)/(b)",
            "x == (v_0) * ( - (e**( - (b*t)))/(b)) + (v_0)/(b)",
            "x == (v_0*(e**( - b*t))/( - b)) + (v_0)/(b)",
            "x == v_0*(( - e**( - b*t))/(b)) + (v_0)/(b)",
            "x == v_0*(e**( - b*t))/( - b) + (v_0)/(b)",
            "x ==  - (v_0*e**( - b*t) - v_0)/(b)",
            "x == ((v_0 - v_0*e**( - b*t))/(b))",
            "x == (v_0 - v_0*e**( - b*t))/(b)"
        ]
    },
    "((T**(2)*g*(m_2 - m_1))/(4*pi**(2)*(m_2 + m_1)))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(1 - 2*(m_1)/(m_1 + m_2)) * g*(T**(2))/(4*pi**(2))",
            "((1 - ((m_1)/(m_2)))/(1 + ((m_1)/(m_2)))) * ((g*T**(2))/(4*pi**(2)))",
            "((2*g*m_2)/(m_1 + m_2) - g) * ((T**(2))/(4*pi**(2)))",
            "((2*m_2)/(m_1 + m_2) - 1) * g*(T**(2))/(4*pi**(2))",
            "(((2*m_2)/(m_2 + m_1)) - 1) * (g) * ((T**(2))/(4*(pi**(2))))",
            "(g*(1 - 2*(m_1)/(m_1 + m_2)) * T**(2))/(4*pi**(2))",
            "(g*(1)/(2) * T**(2)*(m_2 - m_1))/((m_2 + m_1) * 2*pi**(2))",
            "g*(m_2 - m_1)/((2*(pi)/(T))**(2) * (m_1 + m_2))",
            "g*(m_2 - m_1)/((2*(pi)/(T))**(2) * (m_2 + m_1))",
            "(g*(m_2 - m_1)/(m_1 + m_2))/((2*(pi)/(T))**(2))",
            "g*(m_2 - m_1)/(m_1 + m_2) * (T**(2))/((2*pi)**(2))",
            "g*(m_2 - m_1)/(m_1 + m_2) * ((T**(2))/(4*pi**(2)))",
            "g*(m_2 - m_1)/(m_1 + m_2) * ((T)/(2*pi))**(2)",
            "(g*(m_2 - m_1))/(m_2 + m_1) * ((T**(2))/(4*pi**(2)))",
            "g*(m_2 - m_1)/(m_2 + m_1) * (T**(2))/(4*pi**(2))",
            "(g*(m_2 - m_1) * T**(2))/(4*(m_1 + m_2) * pi**(2))",
            "(g*(m_2 - m_1) * T**(2))/(4*pi**(2)*(m_1 + m_2))",
            "(g*(m_2 - m_1) * T**(2))/(4*pi**(2)*(m_2 + m_1))",
            "(g*(m_2 - m_1) * T**(2))/((m_1 + m_2) * (2*pi)**(2))",
            "g*(m_2 - m_1) * (T**(2))/((m_1 + m_2) * 4*pi**(2))",
            "(g*(m_2 - m_1) * (T**(2)))/((m_2 + m_1) * (4*pi**(2)))",
            "(g*(m_2 - m_1) * T**(2))/((m_2 + m_1) * 4*pi**(2))",
            "(g*(m_2 - m_1) * ((T)/(2*pi))**(2))/(m_1 + m_2)",
            "g*(T**(2))/(4*pi**(2)) * (2*(m_2)/(m_1 + m_2) - 1)",
            "((g*T**(2))/(4*pi**(2)) - (m_1*g*T**(2))/(4*pi**(2)*m_2))/(1 + (m_1)/(m_2))",
            "(g*T**(2))/(4*pi**(2)) * ((m_2 - m_1)/(m_1 + m_2))",
            "(g*T**(2))/(4*pi**(2)) * (m_2 - m_1)/(m_1 + m_2)",
            "g*(T**(2))/(4*pi**(2)) * ((m_2 - m_1)/(m_1 + m_2))",
            "g*(T**(2))/(4*pi**(2)) * (m_2 - m_1)/(m_1 + m_2)",
            "((g*T**(2))/(4*pi**(2))) * ((m_2 - m_1)/(m_2 + m_1))",
            "(g*(T**(2))/(4*pi**(2))) * ((m_2 - m_1)/(m_2 + m_1))",
            "(g*(T**(2))/(4*pi**(2))) * (m_2 - m_1)/(m_2 + m_1)",
            "(g*T**(2))/(4*pi**(2)) * ((m_2 - m_1)/(m_2 + m_1))",
            "(g*T**(2))/(4*pi**(2)) * (m_2 - m_1)/(m_2 + m_1)",
            "g*(T**(2))/(4*pi**(2)) * (m_2 - m_1)/(m_2 + m_1)",
            "( - g*T**(2)*(m_1 - m_2))/((m_1 + m_2) * (4*pi**(2)))",
            "(g*T**(2)*(m_2 - m_1))/((2*pi)**(2) * (m_1 + m_2))",
            "(g*T**(2)*(m_2 - m_1))/(4*(m_2 + m_1) * pi**(2))",
            "(g*T**(2)*(m_2 - m_1))/(4*pi**(2)*(m_1 + m_2))",
            "g*T**(2)*(m_2 - m_1)/(4*pi**(2)*(m_1 + m_2))",
            "((g*T**(2)) * (m_2 - m_1))/((4*pi**(2)) * (m_2 + m_1))",
            "(g*T**(2)*(m_2 - m_1))/(4*pi**(2)*(m_2 + m_1))",
            "g*T**(2)*(m_2 - m_1)/(4*pi**(2)*(m_2 + m_1))",
            "((g*T**(2)) * (m_2 - m_1))/((m_2 + m_1) * (4*pi**(2)))",
            "g*T**(2)*(m_2 - m_1)/((m_2 + m_1) * 4*pi**(2))",
            "((g) * ((T)/(2*pi))**(2)) * ((m_2 - m_1)/(m_2 + m_1))",
            "((m_1 - m_2) * g)/( - (m_1 + m_2) * (2*(pi)/(T))**(2))",
            "(( - m_1 + m_2) * g*T**(2))/((m_1 + m_2) * 4*pi**(2))",
            "( - m_1 + m_2)/(m_1 + m_2) * g*(T**(2))/(4*pi**(2))",
            "(m_2*(g)/((m_2 + m_1)/(2)) - g)/((2*(pi)/(T))**(2))",
            "((m_2 - m_1) * g)/((m_1 + m_2) * ((2*pi)/(T))**(2))",
            "((m_2 - m_1) * (g)/(m_1 + m_2))/((2*(pi)/(T))**(2))",
            "(((m_2 - m_1) * g)/(m_1 + m_2)) * ((T**(2))/(4*pi**(2)))",
            "(m_2 - m_1) * (g)/(m_1 + m_2) * ((T)/(2*pi))**(2)",
            "(m_2 - m_1) * (g)/((m_2 + m_1) * (2*(pi)/(T))**(2))",
            "((m_2 - m_1) * g*T**(2))/(4*pi**(2)*(m_1 + m_2))",
            "(m_2 - m_1) * g*(T**(2))/(4*pi**(2)*(m_1 + m_2))",
            "((m_2 - m_1) * g*T**(2))/(4*(pi)**(2) * (m_1 + m_2))",
            "(m_2 - m_1) * (g*T**(2))/(4*(pi)**(2) * (m_1 + m_2))",
            "((m_2 - m_1) * g*T**(2))/(4*pi**(2)*(m_2 + m_1))",
            "((m_2 - m_1) * g*T**(2))/((m_1 + m_2) * (2*pi)**(2))",
            "((m_2 - m_1) * g*T**(2))/((m_1 + m_2) * 4*pi**(2))",
            "(m_2 - m_1) * g*(T**(2))/((m_1 + m_2) * 4*pi**(2))",
            "((m_2 - m_1) * g*( - T**(2)))/((m_2 + m_1) * ( - 4*pi**(2)))",
            "((m_2 - m_1) * g*(T**(2)))/((m_2 + m_1) * (4*pi**(2)))",
            "((m_2 - m_1) * g*T**(2))/((m_2 + m_1) * (4*pi**(2)))",
            "((m_2 - m_1) * g*T**(2))/((m_2 + m_1) * 4*pi**(2))",
            "(m_2 - m_1)/(m_1 + m_2) * (g)/((2*(pi)/(T))**(2))",
            "((m_2 - m_1)/(m_1 + m_2)) * g*(T**(2))/(4*pi**(2))",
            "(m_2 - m_1)/(m_1 + m_2) * (g*(T**(2))/(4*pi**(2)))",
            "(m_2 - m_1)/(m_1 + m_2) * (g*T**(2))/(4*pi**(2))",
            "(m_2 - m_1)/(m_1 + m_2) * g*(T**(2))/(4*pi**(2))",
            "(m_2 - m_1)/(m_1 + m_2) * g*((T**(2))/(4))/(pi**(2))",
            "(m_2 - m_1)/(m_1 + m_2) * (T**(2))/(4*pi**(2)) * g",
            "((m_2 - m_1)/(m_1 + m_2)) * (T**(2)*g)/(4*pi**(2))",
            "(m_2 - m_1)/(m_1 + m_2) * ((T**(2)*g)/(4*pi**(2)))",
            "(m_2 - m_1)/(m_1 + m_2) * (T**(2)*g)/(4*pi**(2))",
            "(m_2 - m_1)/((m_2 + m_1) * 4*pi**(2)) * g*T**(2)",
            "(((m_2 - m_1)/(m_2 + m_1)) * g*T**(2))/(4*pi**(2))",
            "((m_2 - m_1)/(m_2 + m_1)) * g*((T**(2))/(4*pi**(2)))",
            "((m_2 - m_1)/(m_2 + m_1)) * g*(T**(2))/(4*pi**(2))",
            "(m_2 - m_1)/(m_2 + m_1) * g*((T**(2))/(4*pi**(2)))",
            "(m_2 - m_1)/(m_2 + m_1) * g*(T**(2))/(4*pi**(2))",
            "(m_2 - m_1)/(m_2 + m_1) * g*((T)/(2*pi))**(2)",
            "(m_2 - m_1)/(m_2 + m_1) * (T**(2))/(4*pi**(2)) * g",
            "(m_2 - m_1)/(m_2 + m_1) * (T**(2)*(g)/(4*pi**(2)))",
            "((m_2 - m_1) * T**(2)*g)/(4*(m_1 + m_2) * (pi)**(2))",
            "((m_2 - m_1) * T**(2)*g)/(4*pi**(2)*(m_1 + m_2))",
            "((m_2 - m_1) * T**(2)*g)/((m_1 + m_2) * 4*pi**(2))",
            "((m_2 - m_1) * T**(2)*g)/((m_2 + m_1) * 4*pi**(2))",
            "(m_2 - m_1) * T**(2)*(g)/((m_2 + m_1) * 4*pi**(2))",
            "(T**(2))/((2*pi)**(2)) * ((m_2 - m_1) * g)/(m_1 + m_2)",
            "(T**(2))/(4*pi**(2)) * (g - (2*g*m_1)/(m_1 + m_2))",
            "(T**(2))/(4*pi**(2)) * g*((m_2 - m_1)/(m_1 + m_2))",
            "(T**(2))/(4*pi**(2)) * g*((m_2 - m_1)/(m_2 + m_1))",
            "(T**(2))/(4*pi**(2)) * g*(m_2 - m_1)/(m_2 + m_1)",
            "(T**(2))/(4*pi**(2)) * (m_2*g**(2) - m_1*g**(2))/(m_2*g + m_1*g)",
            "(T**(2))/(4*pi**(2)) * ((m_2 - m_1) * g)/(m_1 + m_2)",
            "(T**(2))/(4*pi**(2)) * ((m_2 - m_1)/(m_2 + m_1)) * g",
            "(T**(2))/(4*pi*pi) * (g - m_1*g*(2)/(m_1 + m_2))",
            "(T**(2)*g*(1 - (m_2)/(m_1)))/( - (4*(pi**(2)) * ((m_2)/(m_1) + 1)))",
            "((T**(2)*g)/(4*pi**(2))) * ((1 - ((m_1)/(m_2)))/(1 + ((m_1)/(m_2))))",
            "(T**(2)*g)/(4*pi**(2)) * ((2*m_2)/(m_1 + m_2) - 1)",
            "T**(2)*(g)/(4*pi**(2)) * ((2*m_2)/(m_1 + m_2) - 1)",
            "(T**(2)*(g)/(4*pi**(2))) * ((m_2 - m_1)/(m_1 + m_2))",
            "(T**(2)*g)/(4*pi**(2)) * ((m_2 - m_1)/(m_1 + m_2))",
            "((T**(2)*g)/(4*pi**(2))) * (m_2 - m_1)/(m_2 + m_1)",
            "(T**(2)*g)/(4*pi**(2)) * ((m_2 - m_1)/(m_2 + m_1))",
            "(T**(2)*g)/(4*pi**(2)) * (m_2 - m_1)/(m_2 + m_1)",
            "T**(2)*(g)/(4*pi**(2)) * (m_2 - m_1)/(m_2 + m_1)",
            "(T**(2)*g*( - m_1 + m_2))/(4*pi**(2)*(m_1 + m_2))",
            "(T**(2)*g*( - m_1 + m_2))/(4*pi**(2)*(m_2 + m_1))",
            "- (T**(2)*g*(m_1 - m_2))/(4*pi**(2)*(m_2 + m_1))",
            "(T**(2)*(g*m_2 - g*m_1))/(4*pi**(2)*(m_2 + m_1))",
            "(T**(2)*g*(m_2 - m_1))/(4*(m_1 + m_2) * pi**(2))",
            "(T**(2)*g*(m_2 - m_1))/((4*pi**(2)) * (m_1 + m_2))",
            "(T**(2)*g*(m_2 - m_1))/(4*pi**(2)*(m_1 + m_2))",
            "T**(2)*g*(m_2 - m_1)/(4*pi**(2)*(m_1 + m_2))",
            "((T**(2)) * g*(m_2 - m_1))/(4*(pi**(2)) * (m_1 + m_2))",
            "(T**(2)*g*(m_2 - m_1))/(4*pi**(2)*(m_2 + m_1))",
            "T**(2)*g*(m_2 - m_1)/(4*pi**(2)*(m_2 + m_1))",
            "(T**(2)*g*(m_2 - m_1))/((m_1 + m_2) * 4*pi**(2))",
            "T**(2)*(m_2*g - m_1*g)/(( - m_1 - m_2) * ( - 4*pi**(2)))",
            "(T**(2)*(m_2 - m_1))/(4*pi**(2)*(m_1 + m_2)) * g",
            "(T**(2)*(m_2 - m_1))/(4*pi**(2)*(m_2 + m_1)) * g",
            "(T**(2)*(m_2 - m_1) * g)/(4*(m_2 + m_1) * pi**(2))",
            "(T**(2)*(m_2 - m_1) * g)/(4*pi**(2)*(m_1 + m_2))",
            "(T**(2)*(m_2 - m_1)) * (g)/(4*pi**(2)*(m_1 + m_2))",
            "(T**(2)*(m_2 - m_1) * g)/(4*pi**(2)*(m_2 + m_1))",
            "T**(2)*(m_2 - m_1) * (g)/(4*pi**(2)*(m_2 + m_1))",
            "T**(2)*(m_2 - m_1) * (g)/((m_1 + m_2) * (4*pi**(2)))",
            "(T**(2)*(m_2 - m_1) * (g))/((m_2 + m_1) * (4*pi**(2)))",
            "((T)/(2*pi))**(2) * ((m_2 - m_1) * g)/(m_1 + m_2)",
            "((T)/(2*pi))**(2) * ((m_2 - m_1)/(m_2 + m_1)) * g",
            "((T)/(2*pi))**(2) * (m_2 - m_1)/(m_2 + m_1) * g"
        ]
    },
    "R_a == (R_x*R_y)/(R_x + R_y + R_z)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "R_a == ((1)/((1)/(R_x) + (1)/(R_y + R_z)) + (1)/((1)/(R_y) + (1)/(R_x + R_z)) - (1)/((1)/(R_z) + (1)/(R_y + R_x)))/(2)",
            "R_a == ((1)/((1)/(R_y) + (1)/(R_x + R_z)) + (1)/((1)/(R_x) + (1)/(R_y + R_z)) - (1)/((1)/(R_z) + (1)/(R_y + R_x)))/(2)",
            "R_a == (1)/(2) * ((1)/((1)/(R_x) + (1)/(R_y + R_z)) - (1)/((1)/(R_z) + (1)/(R_x + R_y)) + (1)/((1)/(R_y) + (1)/(R_z + R_x)))",
            "R_a == (1)/(2) * (((1)/(R_x) + (1)/(R_y + R_z))**( - 1) + ((1)/(R_y) + (1)/(R_x + R_z))**( - 1) - ((1)/(R_z) + (1)/(R_x + R_y))**( - 1))",
            "R_a == ((R_x**( - 1) + (R_y + R_z)**( - 1))**( - 1) - (R_z**( - 1) + (R_y + R_x)**( - 1))**( - 1) + (R_y**( - 1) + (R_z + R_x)**( - 1))**( - 1))/(2)"
        ]
    },
    "tan(x)*ln(sin(x)) - x + k": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "2*( - (sin(x) * ln((2*sin(x))/((cos(x) + 1) * ((sin(x)**(2))/((cos(x) + 1)**(2)) + 1))))/((cos(x) + 1) * ((sin(x)**(2))/((cos(x) + 1)**(2)) - 1)) - arctan((sin(x))/(cos(x) + 1))) + k",
            "(x - x*tan((x)/(2))**(2) - 2*tan((x)/(2)) * ln((2*tan((x)/(2)))/(1 + tan((x)/(2))**(2))))/(tan((x)/(2))**(2) - 1) + k"
        ]
    },
    "(1/2)*(log(u,10)+log(v,10)-log(w,10))": {
        "type": "maths",
        "requireExact": true,
        "shouldMatch": [
            "(((1)/(2)) * (log(u, 10) + log(v, 10) - log(w, 10)))",
            "((1)/(2)) * (log(u, 10) + log(v, 10) - log(w, 10))",
            "(1)/(2) * ((log(u, 10) + (log(v, 10))) - log(w, 10))",
            "(1)/(2) * ((log(u, 10) + log(v, 10)) - log(w, 10))",
            "(1)/(2) * ((log(u, 10)) + (log(v, 10)) - (log(w, 10)))",
            "(1)/(2) * (log(u, 10) + (log(v, 10)) - (log(w, 10)))",
            "(1)/(2) * (log(u, 10) + log(v, 10) - (log(w, 10)))",
            "(1)/(2) * (log(u, 10) + log(v, 10) - log(w, 10))",
            "(1)/(2) * (log(u, 10) - log(w, 10) + log(v, 10))",
            "((1)/(2)) * (log(v, 10) + log(u, 10) - log(w, 10))",
            "(1)/(2) * (log(v, 10) + log(u, 10) - log(w, 10))",
            "(1)/(2) * ( - log(w, 10) + log(u, 10) + log(v, 10))",
            "(log(u, 10) + log(v, 10) - log(w, 10)) * (1)/(2)"
        ]
    },
    "((73*b)/(48*sqrt(2)))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "(((b*sqrt(2))/(2) + 3*b*sqrt(2) + (25*b*sqrt(2))/(32)) * (16*b**(2)) + (4*b*sqrt(2)) * (16*b**(2)))/(48*b**(2)) - 2*b*sqrt(2)",
            "73 * sqrt(2) * b / 96",
            "73 * sqrt(2) * (b / 96)",
            "(73 * sqrt(2)) * (b / 96)"
        ]
    },
    "2**(((2)/(5)))*(1+((x)/(5))-((3*x**(2))/(100))+((x**(3))/(125)))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "2**((2)/(5))*(1 + ((2)/(5)) * ((x)/(2)) + (((2)/(5)) * ( - (3)/(5)) * (((x)/(2))**(2)))/(2) + (((2)/(5)) * ( - (3)/(5)) * ( - (8)/(5)) * (((x)/(2))**(3)))/(6))",
            "2**((2)/(5))*(1 + ((2)/(5)) * ((x)/(2)) + (((2)/(5)) * ( - (3)/(5)) * ((x)/(2))**(2))/(2) + ((2)/(5)) * ( - (3)/(5)) * ( - (8)/(5)) * (((x)/(2))**(3))/(6))",
            "2**((2)/(5)) + 2**((2)/(5))*(x)/(5) + 2**((2)/(5))*( - 3*(x**(2))/(100)) + 2**((2)/(5))*(2)/(5) * ( - (3)/(5)) * ( - (8)/(5)) * (1)/(6) * (x**(3))/(8)",
            "2**((2)/(5)) + 2**( - (3)/(5))*((2)/(5)) * x - 2**( - (8)/(5))*((3)/(25)) * x**(2) + 2**( - (13)/(5))*((8)/(125)) * x**(3)",
            "2**((2)/(5)) + (2)/(5) * (2)**( - (3)/(5)) * x - (3)/(25) * (2)**( - (8)/(5)) * x**(2) + (8)/(125) * (2)**( - (13)/(5)) * x**(3)",
            "2**((2)/(5)) + (2)/(5) * (2**( - ((3)/(5)))) * x - (3)/(25) * (2**( - ((8)/(5)))) * x**(2) + (8)/(125) * (2**( - ((13)/(5)))) * x**(3)",
            "2**((2)/(5)) + (2)/(5) * (2**( - (3)/(5))) * x - (3)/(25) * (2**( - (8)/(5))) * x**(2) + (8)/(125) * (2**( - (13)/(5))) * x**(3)"
        ]
    },
    "F == ((G*M*m)/(r**(2)))": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "F == (sqrt((G*m**((1))*M*r**(-2))/(2*(2**(-1))))**(2))/((M**(0)*G**(0))/(r**(0))) * (((r*M*r*r*M*G)/(M*G*m))**(0))/(M**(0)*G**(0))",
            "F == (sqrt((G*m**((1))*M*r**(-2))/(2*(2**(-1))))**(2))/((M**(0)*G**(0))/(r**(0))) * (((r*M*r*r*M*G)/(M*G*m))**(0))/(((M**(0)*G**(0))/((G**(0))/((M**(0))/(r**(0)))))**(0))",
            "F == (sqrt((G*m**((1))*M*r**(-2))/(2*(2**(-1))))**(2))/((M**(0)*G**(0))/(r**(0))) * ((((r*M*r*r*M*G)/(M*G*m))**(0))/(((M**(0)*G**(0))/((G**(0))/((M**(0))/(r**(0)))))**(0)))/(((M**(0)*G**(0))/((r*G)/((m**(2))/((G**(69420)*M)/(694206)))))**(0))"
        ]
    },
    "tan(k*a) ==  - (k)/(k_1) * tan(k_1*a)": {
        "type": "maths",
        "requireExact": false,
        "shouldMatch": [
            "- (k)/(k_1) * tan(k_1*a) == tan(k*a)",
            "tan(a*k) == (k)/(k_1) * (sin(k_1*a) - tan(2*a*k_1) * cos(a*k_1))/(cos(a*k_1) + tan(2*a*k_1) * sin(k_1*a))",
            "tan(a*k) == (k)/(k_1) * (sin(k_1*a) - tan(2*a*k_1) * cos(k_1*a))/(cos(k_1*a) + tan(2*a*k_1) * sin(k_1*a))",
            "tan(a*k) ==  - (k)/(k_1) * tan(a*k_1)",
            "tan(a*k) ==  - (k)/(k_1) * tan(k_1*a)",
            "tan(k*a) ==  - (k)/(k_1) * ((sin(k_1*a)**(3) + sin(k_1*a) * cos(k_1*a)**(2))/(cos(k_1*a)**(3) + sin(k_1*a)**(2) * cos(k_1*a)))",
            "tan(k*a) == (k)/(k_1) * ((sin(k_1*a) - tan(2*k_1*a) * cos(k_1*a))/(cos(k_1*a) + tan(2*k_1*a) * sin(k_1*a)))",
            "tan(k*a) == (k)/(k_1) * (sin(k_1*a) - tan(2*k_1*a) * cos(k_1*a))/(cos(k_1*a) + tan(2*k_1*a) * sin(k_1*a))",
            "tan(k*a) == (k)/(k_1) * (sin(k_1*a) - tan(2*k_1*a) * cos(k_1*a))/(sin(k_1*a) * tan(2*k_1*a) + cos(k_1*a))",
            "tan(k*a) == (k)/(k_1) * (( - tan(2*k_1*a) * cos(k_1*a)) + sin(k_1*a))/(tan(2*k_1*a) * sin(k_1*a) + cos(k_1*a))",
            "tan(k*a) == ( - k)/(k_1) * tan(a*k_1)",
            "tan(k*a) ==  - (k)/(k_1) * (tan(k_1*a))",
            "tan(k*a) ==  - (k)/(k_1) * tan(k_1*a)",
            "tan(k*a) == (k)/(k_1) * (tan(k_1*a) - tan(2*k_1*a))/(1 + tan(k_1*a) * tan(2*k_1*a))",
            "tan(k*a) == (k*(sin(k_1*a) - tan(2*k_1*a) * cos(k_1*a)))/(k_1*(cos(k_1*a) + tan(2*k_1*a) * sin(k_1*a)))",
            "tan(k*a) ==  - (k*tan(k_1*a))/(k_1)",
            "tan(k*a) == ( - k*tan(k_1*a))/(k_1)"
        ]
    },
    "((not A) and B) or not (B and C)": {
        "type": "logic",
        "requireExact": false,
        "shouldMatch": [
            "((A ^ B) & B) | (~(B & C))",
            "(((~(A)) & B) | (~(B & C)))",
            "((~(A) & (B)) | ~(B & C))",
            "((~(A) & B) | (~(B & C)))",
            "((~(A) & B) | ~((B & C)))",
            "((~(A) & B) | ~(B & C))",
            "((~(A) & B)) | (~((B & C)))",
            "((~(A)) & (B)) | (~((B) & (C)))",
            "((~(A)) & B) | (~(B & C))",
            "((~(A)) & B) | ~((B & C))",
            "(~((A)) & B) | ~((B & C))",
            "(~((A)) & B) | ~(B & C)",
            "(~((A))) & B | (~(B & C))",
            "(~(A & B) | B ^ C)",
            "(~(A & B)) | (~(B & C))",
            "(~(A & B)) | (B ^ C)",
            "(~(A & B)) | ~((B & C))",
            "(~(A) & (B)) | ~(B & C)",
            "(~(A) & B | ~(B & C))",
            "(~(A) & B) | (~((B & C)))",
            "(~(A) & B) | (~(B & C))",
            "(~(A) & B) | (~(B) | ~(C))",
            "(~(A) & B) | ~((B & C))",
            "(~(A) & B) | ~((B) & C)",
            "(~(A) & B) | ~(B & C)",
            "(~(A)) & B | (~(B & C))",
            "~((A & B)) | (~(B & C))",
            "~((A & B)) | (B ^ C)",
            "~((A & B)) | ~((B & C))",
            "~((A & B)) | ~(B & C)",
            "~((A) & B) | (~(B & C))",
            "~((A) & B) | ~((B & C))",
            "~((A) & B) | ~(B & C)",
            "~((A)) & B | ~((B & C))",
            "~((A)) & B | ~(B & C)",
            "~(~(~(A) & B | ~(B & C)))",
            "~(A & B) | (B & ~(C))",
            "~(A & B) | (B ^ C)",
            "~(A & B) | ~(B & C)",
            "~(A & B) | B ^ C",
            "~(A) & (B) | ~(B & C)",
            "~(A) & B | (~(B & C))",
            "~(A) & B | ~((B & C))",
            "~(A) & B | ~(B & C)",
            "~(A) & B | ~(B) | ~(C)",
            "((~(A) & B) | (~(B & C))) | ((~(A) & B) & (~(B & C)))",
            "((~(A) & B) | (~(B & C))) | ((~(A) & B) & (~(B) & C))",
            "~(A & B & C)",
            "~(A & B) | ~(C)",
            "~(A) | (~(B & C))",
            "~(A) | ~(B & C)",
            "~(A) | ~(B) | ~(C)",
            "~(A) | ~(B & C) | ~(A) & B",
            "((~(A)) & B) | (~(C & B))",
            "(~(A) & B) | (~(C & B))",
            "(~(A) & B) | ~((C & B))",
            "(~(A) & B) | ~(C & B)",
            "~(A & B) | (C ^ B)",
            "~(A & B) | ~(C & B)",
            "~(A) & B | ~((C & B))",
            "~(A) & B | ~(C & B)",
            "~(A) & (B & C) | ~(B & C)",
            "~(A) & B & C | ~(B & C)",
            "(B & ~((A))) | (~(B & C))",
            "(B & ~(A)) | (~(B & C))",
            "(B & ~(A)) | ~((B & C))",
            "(B & ~(A)) | ~(B & C)",
            "B & (~(A)) | (~(B & C))",
            "B & (~(A)) | ~(B & C)",
            "B & ~(A) | ~(B & C)",
            "(B & ~(A)) | (~(C & B))",
            "(B & ~(A)) | ~((C & B))",
            "(B & ~(A)) | ~(C & B)",
            "B & ~(A) | ~(C & B)",
            "(~(B & C)) | (~(A) & B)",
            "(~(B & C)) | ~(A) & B",
            "~((B & C)) | (~(A) & B)",
            "~((B & C)) | ~(A) & B",
            "~(B & C) | (~(A & B))",
            "~(B & C) | (~(A) & B)",
            "~(B & C) | ~(A) & B",
            "(~(B & C)) | (B & ~(A))",
            "~((B & C)) | (B & ~(A))",
            "~(B & C) | (B & ~(A))",
            "~(B & C) | B & ~(A)",
            "(C & ~(A)) | (~(B & C))",
            "(~(C & B)) | (~(A) & B)",
            "~((C & B)) | (~(A) & B)",
            "~(C & B) | (~(A) & B)",
            "~(C & B) | ~(A) & B",
            "(~(C & B)) | (B & ~(A))",
            "~(C & B) | (B & ~(A))",
            "~(C & B) | B & ~(A)"
        ]
    },
    "M or (E and not(P))": {
        "type": "logic",
        "requireExact": false,
        "shouldMatch": [
            "((E & ~(P)) | M)",
            "(E & (~(P))) | M",
            "(E & ~(P) | M)",
            "(E & ~(P)) | (M)",
            "(E & ~(P)) | M",
            "E & (~(P)) | M",
            "E & ~((P)) | M",
            "E & ~(P) | M",
            "(M) | (E & (~(P)))",
            "(M) | (E & ~(P))",
            "M | (E & ~(P))",
            "M | E & ~(P)",
            "M | (E & ~(P) & ~(M))",
            "M | (~(P) & E)",
            "M | ~(P) & E",
            "((~(P)) & E) | M",
            "(~(P) & E) | (M)",
            "(~(P) & E) | M",
            "~(P) & E | (M)",
            "~(P) & E | M"
        ]
    },
    "A == M or (E and not(P))": {
        "type": "logic",
        "requireExact": false,
        "shouldMatch": [
            "A == ((E & ~((P)))) | M",
            "A == ((E & ~(P)) | M)",
            "A == (E & ~(P) | M)",
            "A == (E & ~(P)) | (M)",
            "A == (E & ~(P)) | M",
            "A == (E) & ~(P) | M",
            "A == E & (~(P)) | M",
            "A == E & ~(P) | M",
            "A == ((M) | (E & (~(P))))",
            "A == (M | (E & ~(P)))",
            "A == (M) | (E & ~(P))",
            "A == M | (E & ~(P))",
            "A == M | E & ~((P))",
            "A == M | E & ~(P)",
            "A == M | (E & ~(P) & ~(M))",
            "A == (M | (~(P) & E))",
            "A == (M | ~(P) & E)",
            "A == (M) | (~(P) & E)",
            "A == M | (~(P) & E)",
            "A == M | (~(P)) & E",
            "A == M | ~(P | ~(E))",
            "A == M | ~(P) & E",
            "A == ((~(P)) & E) | M",
            "A == (~(P) & E) | (M)",
            "A == (~(P) & E) | M",
            "A == ~(P) & E | M",
            "((E & ~(P)) | M) == A",
            "(E & ~(P) | M) == A",
            "(E & ~(P)) | (M) == A",
            "(E & ~(P)) | M == A",
            "E & ~(P) | M == A",
            "(E & ~(P)) | M | (~(P) & E) == A",
            "(M | E) & (M | ~(P)) == A",
            "(M) | (E & ~(P)) == A",
            "M | (E & ~(P)) == A",
            "M | E & ~(P) == A",
            "(M | (~(P) & E)) == A",
            "M | (~(P) & E) == A",
            "M | ~(P) & E == A",
            "((~(P)) & E) | M == A",
            "(~(P) & E) | (M) == A",
            "(~(P) & E) | M == A",
            "~(P) & E | M == A"
        ]
    }
}